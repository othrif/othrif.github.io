<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Othmane Rifki</title>
    <link>http://othrif.github.io/technical_note/cpp/basics/</link>
      <atom:link href="http://othrif.github.io/technical_note/cpp/basics/index.xml" rel="self" type="application/rss+xml" />
    <description>Othmane Rifki</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 12 Apr 2020 14:41:32 +0200</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Othmane Rifki</title>
      <link>http://othrif.github.io/technical_note/cpp/basics/</link>
    </image>
    
    <item>
      <title>&#43;&#43;*ptr vs. *ptr&#43;&#43;</title>
      <link>http://othrif.github.io/technical_note/cpp/basics/ptr_deref/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/cpp/basics/ptr_deref/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;rules&#34;&gt;Rules&lt;/h3&gt;
&lt;p&gt;Prefix operator &lt;code&gt;++&lt;/code&gt; has the same precedence as dereference: &lt;code&gt;++*ptr&lt;/code&gt; = &lt;code&gt;++(*ptr)&lt;/code&gt;. &lt;code&gt;++ptr&lt;/code&gt; evaluates to the &lt;em&gt;incremented&lt;/em&gt; value of &lt;code&gt;ptr&lt;/code&gt;&lt;br&gt;
Postfix operator &lt;code&gt;++&lt;/code&gt; has a higher precedence than dereference: So &lt;code&gt;*ptr++&lt;/code&gt; gets evaluated as &lt;code&gt;*(ptr++)&lt;/code&gt;. &lt;code&gt;ptr++&lt;/code&gt; evaluates to the current value of &lt;code&gt;ptr&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{int x = 19;
int *ptr = &amp;amp;x;
cout &amp;lt;&amp;lt; *ptr &amp;lt;&amp;lt; endl;
cout &amp;lt;&amp;lt; ++(*ptr) &amp;lt;&amp;lt; endl;
cout &amp;lt;&amp;lt; *ptr &amp;lt;&amp;lt; endl;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;19
20
20
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{int x = 19;
int *ptr = &amp;amp;x;
cout &amp;lt;&amp;lt; *ptr &amp;lt;&amp;lt; endl;
cout &amp;lt;&amp;lt; (*ptr)++ &amp;lt;&amp;lt; endl; // *ptr++ means *(ptr++) and will give garbage
cout &amp;lt;&amp;lt; *ptr &amp;lt;&amp;lt; endl;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;19
19
20
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Bitwise Operations</title>
      <link>http://othrif.github.io/technical_note/cpp/basics/strings/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/cpp/basics/strings/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
using namespace std;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;string-size&#34;&gt;String size&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{
string str = &amp;quot;hello&amp;quot;;
cout &amp;lt;&amp;lt; &amp;quot;String size is &amp;quot; &amp;lt;&amp;lt; str.length() &amp;lt;&amp;lt; endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;String size is 5
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;string-append&#34;&gt;String append&lt;/h3&gt;
&lt;p&gt;For one character, use &lt;code&gt;pash_back()&lt;/code&gt; otherwise &lt;code&gt;append()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{
string inStr = &amp;quot;123&amp;quot;; 
string outStr = &amp;quot;&amp;quot;; 
outStr.append(&amp;quot;4&amp;quot;); 
outStr.append(inStr);
char x = &#39;X&#39;;
outStr.push_back(x); // Valid when appending 1 char
cout &amp;lt;&amp;lt; outStr &amp;lt;&amp;lt; endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;4123X
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;string-check-space&#34;&gt;String check space&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{string str = &amp;quot; HEY &amp;quot;;
 
 for(size_t i = 0; i&amp;lt;str.length(); i++){
     if( isspace(str[i]) )
         cout &amp;lt;&amp;lt; &amp;quot;Found space!&amp;quot; &amp;lt;&amp;lt; endl;
     else
         cout &amp;lt;&amp;lt; &amp;quot;Space Not found!&amp;quot; &amp;lt;&amp;lt; endl;
 }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Found space!
Space Not found!
Space Not found!
Space Not found!
Found space!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{string str = &amp;quot; &amp;quot;;
if(str == &amp;quot; &amp;quot;)
    cout &amp;lt;&amp;lt; &amp;quot;Found!&amp;quot; &amp;lt;&amp;lt; endl;
 else
     cout &amp;lt;&amp;lt; &amp;quot;Not found!&amp;quot; &amp;lt;&amp;lt; endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Found!
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;erase-a-string&#34;&gt;Erase a string&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{
    string str (&amp;quot;This is an example sentence.&amp;quot;);
    str.erase (str.begin()+5, str.end()-9);
    cout &amp;lt;&amp;lt; str &amp;lt;&amp;lt; endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;This sentence.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;copy-string-to-char-array&#34;&gt;Copy string to char array&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;cstring&amp;gt;
using namespace std;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{std::string s = &amp;quot;Hello World!&amp;quot;;

char cstr[s.size() + 1]; // +1 for /0 character
strcpy(cstr, s.c_str()); // or pass &amp;amp;s[0]

std::cout &amp;lt;&amp;lt; cstr &amp;lt;&amp;lt; &#39;\n&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Hello World!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;alternatively, if you will not remember &lt;code&gt;strcpy&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{
    std::string s = &amp;quot;Hello World!&amp;quot;;
    char cstr[s.size() + 1]; // +1 for /0 character
    for (int i=0; i&amp;lt;s.size(); i++)
        cstr[i] = s[i];
    std::cout &amp;lt;&amp;lt; cstr &amp;lt;&amp;lt; &#39;\n&#39;;
    
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Hello World!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Data types</title>
      <link>http://othrif.github.io/technical_note/cpp/basics/datatypes/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/cpp/basics/datatypes/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;size-of-common-data-types&#34;&gt;Size of common data types&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;   cout &amp;lt;&amp;lt; &amp;quot;Size of char : &amp;quot; &amp;lt;&amp;lt; sizeof(char) &amp;lt;&amp;lt; endl;
   cout &amp;lt;&amp;lt; &amp;quot;Size of int : &amp;quot; &amp;lt;&amp;lt; sizeof(int) &amp;lt;&amp;lt; endl;
   cout &amp;lt;&amp;lt; &amp;quot;Size of unsigned int : &amp;quot; &amp;lt;&amp;lt; sizeof(unsigned int) &amp;lt;&amp;lt; endl;
   cout &amp;lt;&amp;lt; &amp;quot;Size of short int : &amp;quot; &amp;lt;&amp;lt; sizeof(short int) &amp;lt;&amp;lt; endl;
   cout &amp;lt;&amp;lt; &amp;quot;Size of long int : &amp;quot; &amp;lt;&amp;lt; sizeof(long int) &amp;lt;&amp;lt; endl;
   cout &amp;lt;&amp;lt; &amp;quot;Size of float : &amp;quot; &amp;lt;&amp;lt; sizeof(float) &amp;lt;&amp;lt; endl;
   cout &amp;lt;&amp;lt; &amp;quot;Size of double : &amp;quot; &amp;lt;&amp;lt; sizeof(double) &amp;lt;&amp;lt; endl;
   cout &amp;lt;&amp;lt; &amp;quot;Size of wchar_t : &amp;quot; &amp;lt;&amp;lt; sizeof(wchar_t) &amp;lt;&amp;lt; endl;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Size of char : 1
Size of int : 4
Size of unsigned int : 4
Size of short int : 2
Size of long int : 8
Size of float : 4
Size of double : 8
Size of wchar_t : 4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Function arguments, by reference</title>
      <link>http://othrif.github.io/technical_note/cpp/basics/func_args/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/cpp/basics/func_args/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;pass-by-pointer&#34;&gt;Pass by pointer&lt;/h3&gt;
&lt;p&gt;Pass-by-pointer means to pass a pointer argument in the calling function to the corresponding formal parameter of the called function. The called function can modify the value of the variable to which the pointer argument points
Pass by pointer using a pointer, here you can pass a &lt;code&gt;NULL&lt;/code&gt; pointer&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;double f1(double* x, double* y)
{
    std::cout &amp;lt;&amp;lt; &amp;quot;val x: &amp;quot; &amp;lt;&amp;lt; *x &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;val y: &amp;quot; &amp;lt;&amp;lt; *y &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    return *x * *y;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void swapnum_byPointer(int *i, int *j) {
  int temp = *i;
  *i = *j;
  *j = temp;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{int a = 10;
int b = 20;
swapnum_byPointer(&amp;amp;a, &amp;amp;b);
cout &amp;lt;&amp;lt; &amp;quot;A is &amp;quot; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &amp;quot; and B is &amp;quot; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A is 20 and B is 10
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;pass-by-reference&#34;&gt;Pass by reference&lt;/h3&gt;
&lt;p&gt;Pass by reference by creating an alias to the arguments you pass. Use &lt;code&gt;const&lt;/code&gt; to not change these arguments&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;double f2(double const &amp;amp;x, double const &amp;amp;y)
{
    std::cout &amp;lt;&amp;lt; &amp;quot;val x: &amp;quot; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;val y: &amp;quot; &amp;lt;&amp;lt; y &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    return x * y;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pass by reference by creating an alias to the arguments you pass. Do not use &lt;code&gt;const&lt;/code&gt; if you plan to modify the arguments&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;double f3(double &amp;amp;x, double &amp;amp;y)
{
    std::cout &amp;lt;&amp;lt; &amp;quot;val x: &amp;quot; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;val y: &amp;quot; &amp;lt;&amp;lt; y &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    return x * y;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{double a, b;
a = 2;
b = 3; 
std::cout &amp;lt;&amp;lt; f1(&amp;amp;a, &amp;amp;b) &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
std::cout &amp;lt;&amp;lt; f2(a, b) &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
std::cout &amp;lt;&amp;lt; f3(a, b) &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;val x: 2
val y: 3
6
val x: 2
val y: 3
6
val x: 2
val y: 3
6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void swapnum(int &amp;amp;i, int &amp;amp;j) {
  int temp = i;
  i = j;
  j = temp;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{int a = 10;
int b = 20;
swapnum(a, b);
cout &amp;lt;&amp;lt; &amp;quot;A is &amp;quot; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &amp;quot; and B is &amp;quot; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A is 20 and B is 10
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void modify_const(const int&amp;amp; x) {
  int&amp;amp; y = const_cast&amp;lt;int&amp;amp;&amp;gt;(x);
  ++y;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{int a = 5;
  modify_const(a);
  cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl;}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;pass-by-value&#34;&gt;Pass by value&lt;/h3&gt;
&lt;p&gt;The value of an argument is copied to a non-pointer or non-reference parameter in the called function definition. The parameter in the called function is initialized with the value of the passed argument. As long as the parameter has not been declared as constant, the value of the parameter can be changed, but the changes are only performed within the scope of the called function only; they have no effect on the value of the argument in the calling function.&lt;/p&gt;
&lt;p&gt;Pass-by-reference is more efficient than pass-by-value, because it does not copy the arguments.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;double f4(double x, double y)
{
    std::cout &amp;lt;&amp;lt; &amp;quot;val x: &amp;quot; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;val y: &amp;quot; &amp;lt;&amp;lt; y &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    return x * y;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;result&#34;&gt;Result&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{double a, b;
a = 2;
b = 3; 
std::cout &amp;lt;&amp;lt; f4(a, b) &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;val x: 2
val y: 3
6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Iterate over vector or array</title>
      <link>http://othrif.github.io/technical_note/cpp/basics/iteration/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/cpp/basics/iteration/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;iterate-over-stdvector&#34;&gt;Iterate over std::vector&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;std::vector&amp;lt;float&amp;gt; v = {7.3, 5.1, 16.3, 8.9}; // T = int, it can be anything else
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-iterators&#34;&gt;Using iterators&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;
for(std::vector&amp;lt;float&amp;gt;::iterator it = v.begin(); it != v.end(); ++it) {
    std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;quot; &amp;quot;; /* ... */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;7.3 5.1 16.3 8.9 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-indices&#34;&gt;Using indices&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;for(std::vector&amp;lt;int&amp;gt;::size_type i = 0; i != v.size(); i++) {
    std::cout &amp;lt;&amp;lt; v[i] &amp;lt;&amp;lt; &amp;quot; &amp;quot;; /* ... */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;7.3 5.1 16.3 8.9 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-range&#34;&gt;Using range&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;for(auto const&amp;amp; value: v) {
     std::cout &amp;lt;&amp;lt; value &amp;lt;&amp;lt; &amp;quot; &amp;quot;; /* ... */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;7.3 5.1 16.3 8.9 
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;iterate-over-arrays&#34;&gt;Iterate over arrays&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;double a[] = {7.3, 5.1, 16.3, 8.9, 9.1}; // T = int, it can be anything else
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-indices-1&#34;&gt;Using indices&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;for(std::size_t i = 0; i != (sizeof a / sizeof *a); i++) {
    std::cout &amp;lt;&amp;lt; a[i] &amp;lt;&amp;lt; &amp;quot; &amp;quot;; /* ... */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;7.3 5.1 16.3 8.9 9.1 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-range-1&#34;&gt;Using range&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;for(auto const&amp;amp; value: a) {
     std::cout &amp;lt;&amp;lt; value &amp;lt;&amp;lt; &amp;quot; &amp;quot;; /* ... */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;7.3 5.1 16.3 8.9 9.1 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Sorting</title>
      <link>http://othrif.github.io/technical_note/cpp/basics/sort/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/cpp/basics/sort/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
using namespace std;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;sort-string&#34;&gt;Sort string&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;string str = &amp;quot;hgfedcba&amp;quot;;
 string c_str(str);
 sort(c_str.begin(), c_str.end());
cout &amp;lt;&amp;lt; c_str &amp;lt;&amp;lt; endl;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;abcdefgh
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>String manipulation</title>
      <link>http://othrif.github.io/technical_note/cpp/basics/bitwiseoperations/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/cpp/basics/bitwiseoperations/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
using namespace std;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;convert-between-different-dec-and-binary&#34;&gt;Convert between different Dec and Binary&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;bitset&amp;gt;

std::bitset&amp;lt;32&amp;gt;(1).to_string()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;00000000000000000000000000000001&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;bitwise-operations&#34;&gt;Bitwise operations&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;cout &amp;lt;&amp;lt; bitset&amp;lt;32&amp;gt;(1) &amp;lt;&amp;lt; endl;
cout &amp;lt;&amp;lt; &amp;quot;================================&amp;quot; &amp;lt;&amp;lt; endl;
for (int i = 0; i &amp;lt; 32; i++)
cout &amp;lt;&amp;lt; bitset&amp;lt;32&amp;gt;(1 &amp;lt;&amp;lt; i) &amp;lt;&amp;lt; endl;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;00000000000000000000000000000001
================================
00000000000000000000000000000001
00000000000000000000000000000010
00000000000000000000000000000100
00000000000000000000000000001000
00000000000000000000000000010000
00000000000000000000000000100000
00000000000000000000000001000000
00000000000000000000000010000000
00000000000000000000000100000000
00000000000000000000001000000000
00000000000000000000010000000000
00000000000000000000100000000000
00000000000000000001000000000000
00000000000000000010000000000000
00000000000000000100000000000000
00000000000000001000000000000000
00000000000000010000000000000000
00000000000000100000000000000000
00000000000001000000000000000000
00000000000010000000000000000000
00000000000100000000000000000000
00000000001000000000000000000000
00000000010000000000000000000000
00000000100000000000000000000000
00000001000000000000000000000000
00000010000000000000000000000000
00000100000000000000000000000000
00001000000000000000000000000000
00010000000000000000000000000000
00100000000000000000000000000000
01000000000000000000000000000000
10000000000000000000000000000000
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;check-bits&#34;&gt;Check bits&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{
    int value = 7;
    cout &amp;lt;&amp;lt; value &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; std::bitset&amp;lt;32&amp;gt;(1 ) &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; std::bitset&amp;lt;32&amp;gt;(1 &amp;lt;&amp;lt; value) &amp;lt;&amp;lt; endl;
    unsigned int checker = 0;
    cout &amp;lt;&amp;lt; std::bitset&amp;lt;32&amp;gt;(checker) &amp;lt;&amp;lt; endl;
    checker = (1 &amp;lt;&amp;lt; value);
    cout &amp;lt;&amp;lt; std::bitset&amp;lt;32&amp;gt;(checker) &amp;lt;&amp;lt; endl;
    checker |= (1 &amp;lt;&amp;lt; 3);
    cout &amp;lt;&amp;lt; std::bitset&amp;lt;32&amp;gt;(checker) &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; bool(checker &amp;amp; 1 &amp;lt;&amp;lt; value) &amp;lt;&amp;lt; endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;7
00000000000000000000000000000001
00000000000000000000000010000000
00000000000000000000000000000000
00000000000000000000000010000000
00000000000000000000000010001000
1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
