<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Othmane Rifki</title>
    <link>http://othrif.github.io/technical_note/python/basics/</link>
      <atom:link href="http://othrif.github.io/technical_note/python/basics/index.xml" rel="self" type="application/rss+xml" />
    <description>Othmane Rifki</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 12 Apr 2020 14:41:32 +0200</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Othmane Rifki</title>
      <link>http://othrif.github.io/technical_note/python/basics/</link>
    </image>
    
    <item>
      <title>Binary, Octal, and Hexadecimal Integers</title>
      <link>http://othrif.github.io/technical_note/python/basics/bin_dec_hex/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/bin_dec_hex/</guid>
      <description>&lt;h1 id=&#34;summary-table&#34;&gt;Summary table&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;{&amp;quot;Decimal&amp;quot;:&amp;lt;10} {&amp;quot;Binary&amp;quot;:&amp;lt;15} {&amp;quot;Hexadecimal&amp;quot;:&amp;lt;10}&#39;)
for i in range(32):
    i_bin = bin(i)
    i_oct = oct(i)
    i_hex = hex(i)
    print(f&#39;{i:10} {i_bin:15} {i_hex:10}&#39;)
for i in range(5,10):
    i = 2**i
    i_bin = bin(i)
    i_oct = oct(i)
    i_hex = hex(i)
    print(f&#39;{i:10} {i_bin:15} {i_hex:10}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Decimal    Binary          Hexadecimal
         0 0b0             0x0       
         1 0b1             0x1       
         2 0b10            0x2       
         3 0b11            0x3       
         4 0b100           0x4       
         5 0b101           0x5       
         6 0b110           0x6       
         7 0b111           0x7       
         8 0b1000          0x8       
         9 0b1001          0x9       
        10 0b1010          0xa       
        11 0b1011          0xb       
        12 0b1100          0xc       
        13 0b1101          0xd       
        14 0b1110          0xe       
        15 0b1111          0xf       
        16 0b10000         0x10      
        17 0b10001         0x11      
        18 0b10010         0x12      
        19 0b10011         0x13      
        20 0b10100         0x14      
        21 0b10101         0x15      
        22 0b10110         0x16      
        23 0b10111         0x17      
        24 0b11000         0x18      
        25 0b11001         0x19      
        26 0b11010         0x1a      
        27 0b11011         0x1b      
        28 0b11100         0x1c      
        29 0b11101         0x1d      
        30 0b11110         0x1e      
        31 0b11111         0x1f      
        32 0b100000        0x20      
        64 0b1000000       0x40      
       128 0b10000000      0x80      
       256 0b100000000     0x100     
       512 0b1000000000    0x200     
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;convert-to-binary&#34;&gt;Convert to Binary&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 79
# Base 2(binary)
bin_a = bin(a)
print(bin_a)
print(int(bin_a, 2)) #Base 2(binary)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b1001111
79
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;convert-to-octal&#34;&gt;Convert to Octal&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 79
# Base 8(octal)
oct_a = oct(a)
print(oct_a)
print(int(oct_a, 8))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0o117
79
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;convert-to-hexadecimal&#34;&gt;Convert to Hexadecimal&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 79
# Base 16(hexadecimal)
hex_a = hex(a)
print(hex_a)
print(int(hex_a, 16))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0x4f
79
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Datetime</title>
      <link>http://othrif.github.io/technical_note/python/basics/datetime/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/datetime/</guid>
      <description>&lt;h3 id=&#34;convert-string-to-datetime&#34;&gt;Convert string to datetime&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;datetime.strptime(date_string, format)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import datetime
date_string=&#39;03/01/2019 12:00:00 AM&#39;
datetime.strptime(date_string, &#39;%m/%d/%Y %I:%M:%S %p&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 3, 1, 0, 0)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;find-last-month&#34;&gt;Find last month&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import datetime
today = datetime.date.today()
print(today)
first = today.replace(day=1)
print(first)
lastMonth = first - datetime.timedelta(days=1)
print(lastMonth)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2020-05-17
2020-05-01
2020-04-30
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;count-number-of-months&#34;&gt;Count number of months&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def diff_month(d1, d2):
    return (d1.year - d2.year) * 12 + d1.month - d2.month
num_months = diff_month(first,lastMonth)
print(num_months)
num_months = diff_month(today,first)
print(num_months)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1
0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>File, dir handling with os module</title>
      <link>http://othrif.github.io/technical_note/python/basics/os_manip/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/os_manip/</guid>
      <description>&lt;h3 id=&#34;preliminary&#34;&gt;Preliminary&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;current-location&#34;&gt;Current location&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;Current location is: {os.getcwd()!r}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Current location is: &#39;/Users/othmanerifki/projects/website/othrif.hugo/content/technical_note/python/basics&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-dir-if-it-does-not-exist&#34;&gt;Create dir if it does not exist&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;path=&#39;/tmp/test&#39;
if not os.path.exists(path):
    os.mkdir(path)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;check-by-going-to-the-newly-created-area-and-outputing-path&#34;&gt;Check by going to the newly created area and outputing path&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;os.chdir(path)
print(f&#39;New location is: {os.getcwd()!r}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;New location is: &#39;/private/tmp/test&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;open-file&#34;&gt;Open file&lt;/h3&gt;
&lt;p&gt;Options available: &lt;code&gt;os.O_RDONLY, os.O_WRONLY, os.O_RDWR, os.O_CREAT, os.O_APPEND&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fd = os.open(path+&#39;/mytext.txt&#39;, os.O_RDONLY | os.O_CREAT) # open file
print(f&#39;Intial file: {os.listdir(path)}&#39;)
os.rename(&#39;mytext.txt&#39;, &amp;quot;mytest_rename.txt&amp;quot;)
print(f&#39;Renamed file:{os.listdir(path)}&#39;)
os.close(fd) # close
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Intial file: [&#39;mytext.txt&#39;]
Renamed file:[&#39;mytest_rename.txt&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;remove-commands&#34;&gt;Remove commands&lt;/h3&gt;
&lt;h4 id=&#34;1-remove-directory-and-all-its-content&#34;&gt;1. Remove directory and all its content&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import shutil
if os.path.exists(path) and os.path.isdir(path):
    shutil.rmtree(path)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-alternative-approach&#34;&gt;2. Alternative approach&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pathlib import Path
dirpath = Path(path)
if dirpath.exists() and dirpath.is_dir():
    shutil.rmtree(path)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>http://othrif.github.io/technical_note/python/basics/functions/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/functions/</guid>
      <description>&lt;h3 id=&#34;exit-from-function-with-conditions&#34;&gt;Exit from function with conditions&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;outer_condition=True
condition_a=True
condition_b=False


def some_function():
    if condition_a:
        # do something and return early
        print(f&#39;condition a satisfied!&#39;)
        return
    if condition_b:
        # do something else and return early
        print(f&#39;condition b satisfied!&#39;)
        return
    return

if outer_condition:
    some_function()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;condition a satisfied!
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;passing-a-list-as-an-argument&#34;&gt;Passing a list as an argument&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def my_function(food):
  for x in food:
    print(x)

fruits = [&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;]

my_function(fruits)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;apple
banana
cherry
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get ASCII of a character</title>
      <link>http://othrif.github.io/technical_note/python/basics/ascii/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/ascii/</guid>
      <description>&lt;h3 id=&#34;get-the-int-value-of-the-char&#34;&gt;Get the int value of the char&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ord(&#39;a&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;97
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;get-the-char-value-of-the-ascii-int&#34;&gt;Get the char value of the ascii int&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;chr(97)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;a&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;manipulations&#34;&gt;Manipulations&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;chr(ord(&#39;a&#39;) + 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;d&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Join strings</title>
      <link>http://othrif.github.io/technical_note/python/basics/join/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/join/</guid>
      <description>&lt;h3 id=&#34;basic-join&#34;&gt;Basic join&lt;/h3&gt;
&lt;p&gt;Syntax: &lt;code&gt;str.join(iterable)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = [&amp;quot;First&amp;quot;, &amp;quot;Second&amp;quot;, &amp;quot;Third&amp;quot;]
&#39;_&#39;.join(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;First_Second_Third&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;num = &#39;12345&#39;
&#39;-&#39;.join(num)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;1-2-3-4-5&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;let = &#39;abcdefg&#39;
&#39;.&#39;.join(let)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;a.b.c.d.e.f.g&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Lists, Tuples</title>
      <link>http://othrif.github.io/technical_note/python/basics/lists/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/lists/</guid>
      <description>&lt;h3 id=&#34;lists&#34;&gt;Lists&lt;/h3&gt;
&lt;p&gt;Lists are mutable&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [&#39;Hello world!&#39;, &#39;banans&#39;, &#39;apples&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.append(&#39;add one more&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Hello world!&#39;, &#39;banans&#39;, &#39;apples&#39;, &#39;add one more&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.extend([&#39;another&#39;,&#39;even more&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Hello world!&#39;, &#39;banans&#39;, &#39;apples&#39;, &#39;add one more&#39;, &#39;another&#39;, &#39;even more&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;access-an-element&#34;&gt;Access an element&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;apples&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(my_list)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;list
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;tuples&#34;&gt;Tuples&lt;/h3&gt;
&lt;p&gt;Tuples are immutable&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;t = (0,1,2,3,4)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;access-an-element-1&#34;&gt;Access an element&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;t[2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(t)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;special-cases&#34;&gt;Special cases&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;single = (1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(single)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;int
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;single = (1,)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(single)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;appending&#34;&gt;Appending&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo = ([&#39;test&#39;],)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;([&#39;test&#39;],)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo[0].append(&#39;another test&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;([&#39;test&#39;, &#39;another test&#39;],)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo[0].append(&#39;yet another test&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;([&#39;test&#39;, &#39;another test&#39;, &#39;yet another test&#39;],)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but this is not possible&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo[0] = [&#39;reset&#39;,&#39;can\&#39;t be done&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-34-e195864df4a2&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 galileo[0] = [&#39;reset&#39;,&#39;can\&#39;t be done&#39;]


TypeError: &#39;tuple&#39; object does not support item assignment
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;packing-and-unpacking&#34;&gt;Packing and unpacking&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;date = 6,5,2020
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(date)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;day,month,year = date
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;day={day}, month={month}, year={year}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;day=6, month=5, year=2020
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(day,month,year) = date
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;swap-variables-using-unpacking&#34;&gt;Swap variables using unpacking&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x,y = 1,2
x,y = y,x
print(f&#39;x={x}, y={y}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;x=2, y=1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;remainder&#34;&gt;Remainder&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;first, *rest = (1,2,3,4,5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;first={first} rest={rest}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;first=1 rest=[2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;first, *middle, last = (1,2,3,4,5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(middle)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;first={first} middle={middle} last={last}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;first=1 middle=[2, 3, 4] last=5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;first, *middle, last = [1,2,3,4,5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;first={first} middle={middle} last={last}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;first=1 middle=[2, 3, 4] last=5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a, *b, c = &#39;HELLOWORLD&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;E&#39;, &#39;L&#39;, &#39;L&#39;, &#39;O&#39;, &#39;W&#39;, &#39;O&#39;, &#39;R&#39;, &#39;L&#39;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Manipulation, indexing, and slicing</title>
      <link>http://othrif.github.io/technical_note/python/basics/strings/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/strings/</guid>
      <description>&lt;h3 id=&#34;access-elements&#34;&gt;Access elements&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt = &#39;Hello world!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;H&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[4]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;o&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;substrings&#34;&gt;Substrings&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[0:5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Hello&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;backwards&#34;&gt;Backwards&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[-1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[-5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;o&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;skip-over&#34;&gt;Skip over&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[::2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Hlowrd&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;reverse&#34;&gt;Reverse&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[::-1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;!dlrow olleH&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;concatenation&#34;&gt;Concatenation&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;language = &#39;Python&#39;
language + &#39; is great!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Python is great!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;repetition&#34;&gt;Repetition&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;.&#39;*100
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;....................................................................................................&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;100*&#39;.&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;....................................................................................................&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;length&#34;&gt;Length&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(language)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;escape-characters&#34;&gt;Escape Characters&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;\N{GREEK CAPITAL LETTER DELTA}&#39;)
print(&#39;\u0394&#39;) # unicode 16-bit hex
print(&#39;\U00000394&#39;)# unicode 32-bit hex
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Δ
Δ
Δ
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt = &#39;Hello World&#39;
print(f&#39;Particular element: {txt[0]}&#39;)
print(f&#39;substring: {txt[0:5]}&#39;)
print(f&#39;substring: {txt[:5]}&#39;)
print(f&#39;substring: {txt[0:-6]}&#39;)
print(f&#39;substring: {txt[6:]}&#39;)
print(f&#39;skip 2: {txt[::2]}&#39;)
print(f&#39;skip 3: {txt[::3]}&#39;)
print(f&#39;Invert order: {txt[::-1]}&#39;)
print(f&#39;String length: {len(txt)}&#39;)
print(f&#39;Repetition: {&amp;quot;.&amp;quot;*10}&#39;)
print(f&#39;Concatenation: {txt+&amp;quot; from Hamburg!&amp;quot;}&#39;)
print(f&#39;Escape characters...&#39;)
print(f&#39;few examples in this line: \&#39;\&amp;quot;123\b \thorizontal&#39;)
print(f&#39;1234567 carriage return \rXXX&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Particular element: H
substring: Hello
substring: Hello
substring: Hello
substring: World
skip 2: HloWrd
skip 3: HlWl
Invert order: dlroW olleH
String length: 11
Repetition: ..........
Concatenation: Hello World from Hamburg!
Escape characters...
few examples in this line: &#39;&amp;quot;12 	horizontal
XXX4567 carriage return 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;strings-are-immutable&#34;&gt;Strings are immutable&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;language[9]=-1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-45-4d8be7846d5d&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 language[9]=-1


TypeError: &#39;str&#39; object does not support item assignment
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you cannot change the values inside of string&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;~1


&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;-2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Operators</title>
      <link>http://othrif.github.io/technical_note/python/basics/operators/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/operators/</guid>
      <description>&lt;h3 id=&#34;bitwise-operation&#34;&gt;Bitwise operation&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x=3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(bin(x))
print(bin(~x))
~x # = -(x+1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b11
-0b100





-4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(bin(6))
print(bin(3))
print(bin(6 | 3))
6 | 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b110
0b11
0b111





7
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;bitwise-xor&#34;&gt;Bitwise XOR&lt;/h3&gt;
&lt;p&gt;each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(bin(6))
print(bin(3))
print(bin(6 ^ 3))
6 ^ 3

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b110
0b11
0b101





5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;use XOR as a short-cut to setting the value of a register to zero&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;6 ^ 6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;shift-operators&#34;&gt;Shift operators&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(bin(1))
print(bin(1 &amp;lt;&amp;lt; 5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b1
0b100000
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(bin(5))
print(bin(5 &amp;lt;&amp;lt; 1))
print(5 &amp;lt;&amp;lt; 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b101
0b1010
10
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(bin(2))
print(bin(2 &amp;lt;&amp;lt; 3))
print(2 &amp;lt;&amp;lt; 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b10
0b10000
16
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Parsing command line options</title>
      <link>http://othrif.github.io/technical_note/python/basics/parse_commandline/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/parse_commandline/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import argparse

parser = argparse.ArgumentParser(description=&#39;Program to analyze something.&#39;)
parser.add_argument(dest=&#39;filenames&#39;, metavar=&#39;filename&#39;, nargs=&#39;*&#39;)
parser.add_argument(&#39;-i&#39;, &#39;--input&#39;, metavar=&#39;input_file&#39;, required=False, dest=&#39;input_file&#39;, action=&#39;store&#39;, default=&#39;./input/dummy.csv&#39;, help=&#39;Input csv file&#39;)
parser.add_argument(&#39;-o&#39;, &#39;--output&#39;, metavar=&#39;output_file&#39;, required=False, dest=&#39;output_file&#39;, action=&#39;store&#39;, default=&#39;./output/out_dummy.csv&#39;, help=&#39;Output csv file with results&#39;)
parser.add_argument(&#39;--choice&#39;, dest=&#39;mychoice&#39;, action=&#39;store&#39;, choices=&#39;{&#39;slow&#39;,&#39;fast&#39;}&#39;, default=&#39;slow&#39;, help=&#39;my speed choice&#39;)
parser.add_argument(&#39;-p&#39;, &#39;--pat&#39;, metavar=&#39;pattern&#39;, required=True, dest=&#39;mychoice&#39;, action=&#39;append&#39;, help=&#39;can append to the list of arguments here&#39;)
parser.add_argument(&#39;-v&#39;, &#39;--verbose&#39;, dest=&#39;verbose&#39;, action=&#39;store_true&#39;, help=&#39;Verbose mode&#39;)
args = parser.parse_args()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Print statements</title>
      <link>http://othrif.github.io/technical_note/python/basics/print/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/print/</guid>
      <description>&lt;h3 id=&#34;simple-printing&#34;&gt;Simple printing&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;Printing example!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Printing example!
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;f-string-formatting&#34;&gt;f-string formatting:&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f &#39; &amp;lt;text&amp;gt; { &amp;lt;expression&amp;gt; &amp;lt;optional !s, !r, or !a&amp;gt; &amp;lt;optional : format specifier&amp;gt; } &amp;lt;text&amp;gt; ... &#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where &lt;code&gt;&amp;lt;optional !s, !r, or !a&amp;gt;&lt;/code&gt; mean &lt;code&gt;!s (str), !r (repr), and !a (ascii)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import datetime
name = &#39;Othmane&#39;
age = 30
anniversary = datetime.date(1989, 2, 6)
print(f&#39;My name is {name.lower()}, my age next year is {age+1}, my anniversary is {anniversary:%A, %B %d, %Y}.&#39;)
print(f&#39;He said his name is {name!r}.&#39;) # !r for repr
print(r&#39;Raw output: /Users/othmanerifki&#39;) # r for raw output
message = (
    f&#39;Hi {name}.&#39;
    f&#39;Your age is {age}.&#39;
)
print(message)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;In lower case:  othmane
My name is othmane, my age next year is 31, my anniversary is Monday, February 06, 1989.
He said his name is &#39;Othmane&#39;.
Raw output: /Users/othmanerifki
Hi Othmane.Your age is 30.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;quotation-braces&#34;&gt;Quotation, braces:&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;Using quotation {name}.&#39;)
print(f&#39;Using quotation &amp;quot;{name}&amp;quot;.&#39;)
print(f&#39;Using quotation \&#39;{name}\&#39;.&#39;)
print(f&#39;Without braces {74}&#39;)
print(f&#39;With braces {{74}}&#39;)
print(f&#39;to show more {{{{74}}}}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Using quotation Othmane.
Using quotation &amp;quot;Othmane&amp;quot;.
Using quotation &#39;Othmane&#39;.
Without braces 74
With braces {74}
to show more {{74}}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;number-formatting&#34;&gt;Number formatting&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;python f&#39;{value:{width}.{precision}&amp;lt;type&amp;gt;}&#39;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;type&amp;gt;&lt;/code&gt;: s(string), f(float), d(decimal), x(hex), X(HEX), e(exponent scientific notation), E(same as e with &amp;lsquo;E&amp;rsquo;), g(general, it rounds and format to scientific or fixed decimals), G(same as g but E), %(x100 and percent sign)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;weight = 83.1
print(f&#39;With float is {weight:.2f}kg&#39;)
print(f&#39;With percentage is {20/100:.2%}&#39;)
print(f&#39;With scientific notation is {10**-6:.2E}&#39;)
print(f&#39;With general notation is {10**-6:g}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;With float is 83.10kg
With percentage is 20.00%
With scientific notation is 1.00E-06
With general notation is 1e-06
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;formatting-columns-with-text&#34;&gt;Formatting columns with text&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;some_number=23
some_other_number = 2.23432
print(f&#39;{&amp;quot;d1=0:&amp;quot;:&amp;lt;20} limit = {some_number:.3f} \timpact = {some_other_number:.3%}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;d1=0:                limit = 23.000 	impact = 223.432%
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;casting&#34;&gt;Casting&lt;/h3&gt;
&lt;p&gt;Same as above, not related to printing but gives a good illustration&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x=&amp;quot;10&amp;quot;
y=&amp;quot;7.1&amp;quot;
print(f&#39;Test with x+y where x={x}, y={y}&#39;)
print(f&#39;No casting: x+y={x+y}&#39;)
print(f&#39;Casting to float: x+y={float(x)+float(y)}&#39;)
print(f&#39;Casting to int: x+y={int(x)+int(float(y))}&#39;) # int(7.1) give error
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Test with x+y where x=10, y=7.1
No casting: x+y=107.1
Casting to float: x+y=17.1
Casting to int: x+y=17
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python 3 in MacOS</title>
      <link>http://othrif.github.io/technical_note/python/basics/macos_env/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/macos_env/</guid>
      <description>&lt;h3 id=&#34;change-python-to-point-to-python3-by-default&#34;&gt;Change python to point to python3 by default&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls -l /usr/local/bin/python*
ln -s -f /usr/local/bin/python3.7 /usr/local/bin/python
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;which-python-version&#34;&gt;Which Python version&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -V
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;install-package&#34;&gt;Install package&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install SomePackage --upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;upgrade-package&#34;&gt;Upgrade package&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install SomePackage --upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;main-packages-used&#34;&gt;Main packages used&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install numpy
pip install scipy
pip install scikit-learn
pip install matplotlib
pip install pandas
pip install jupyter notebook
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python classes</title>
      <link>http://othrif.github.io/technical_note/python/basics/classes/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/classes/</guid>
      <description>&lt;h3 id=&#34;self-in-python-class&#34;&gt;Self in Python class&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class car(): 
      
    # init method or constructor 
    def __init__(self, model, color): 
        self.model = model 
        self.color = color 
          
    def show(self): 
        print(&amp;quot;Model is&amp;quot;, self.model ) 
        print(&amp;quot;color is&amp;quot;, self.color ) 
          
# both objects have different self which  
# contain their attributes 
audi = car(&amp;quot;audi a4&amp;quot;, &amp;quot;blue&amp;quot;) 
ferrari = car(&amp;quot;ferrari 488&amp;quot;, &amp;quot;green&amp;quot;) 
  
audi.show()     # same output as car.show(audi) 
ferrari.show()  # same output as car.show(ferrari) 
  
# Behind the scene, in every instance method  
# call, python sends the instances also with 
# that method call like car.show(audi)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Model is audi a4
color is blue
Model is ferrari 488
color is green
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Splitting strings</title>
      <link>http://othrif.github.io/technical_note/python/basics/splitting/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/splitting/</guid>
      <description>&lt;h3 id=&#34;basic-splitting&#34;&gt;Basic splitting&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str = &amp;quot;I am playing with;##9Strings () while testing \n how these randome ## chE@sracters worK;\nhere\\right ## there&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;splitseperatormaxsplitpositions&#34;&gt;split(seperator,maxsplit=positions)&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.split()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I&#39;,
 &#39;am&#39;,
 &#39;playing&#39;,
 &#39;with;##9Strings&#39;,
 &#39;()&#39;,
 &#39;while&#39;,
 &#39;testing&#39;,
 &#39;how&#39;,
 &#39;these&#39;,
 &#39;randome&#39;,
 &#39;##&#39;,
 &#39;chE@sracters&#39;,
 &#39;worK;here\\right&#39;,
 &#39;##&#39;,
 &#39;there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.split(&#39;##&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;&#39;,
 &#39;9Strings () while testing \n how these randome &#39;,
 &#39; chE@sracters worK;here\\right &#39;,
 &#39; there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.split(&#39;##&#39;,2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;&#39;,
 &#39;9Strings () while testing \n how these randome &#39;,
 &#39; chE@sracters worK;here\\right ## there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.split(&#39;##&#39;,maxsplit=2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;&#39;,
 &#39;9Strings () while testing \n how these randome &#39;,
 &#39; chE@sracters worK;here\\right ## there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;rsplitseperatormaxsplitpositions&#34;&gt;rsplit(seperator,maxsplit=positions)&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.rsplit(&#39;##&#39;,maxsplit=2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;##9Strings () while testing \n how these randome &#39;,
 &#39; chE@sracters worK;here\\right &#39;,
 &#39; there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;consecutive-delimiters&#34;&gt;Consecutive delimiters&lt;/h4&gt;
&lt;p&gt;Consecutive delimiters give empty strings&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.rsplit(&#39;#&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;&#39;,
 &#39;&#39;,
 &#39;9Strings () while testing \n how these randome &#39;,
 &#39;&#39;,
 &#39; chE@sracters worK;here\\right &#39;,
 &#39;&#39;,
 &#39; there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;helo  ljdk lksd   klsd&#39;.rsplit()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;helo&#39;, &#39;ljdk&#39;, &#39;lksd&#39;, &#39;klsd&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;helo  ljdk lksd   klsd&#39;.rsplit(&#39; &#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;helo&#39;, &#39;&#39;, &#39;ljdk&#39;, &#39;lksd&#39;, &#39;&#39;, &#39;&#39;, &#39;klsd&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;disasembling-strings-to-lines&#34;&gt;Disasembling strings to lines&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.splitlines()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;##9Strings () while testing &#39;,
 &#39; how these randome ## chE@sracters worK;&#39;,
 &#39;here\\right ## there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Keep end of lines by passing &lt;code&gt;True&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.splitlines(True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;##9Strings () while testing \n&#39;,
 &#39; how these randome ## chE@sracters worK;\n&#39;,
 &#39;here\\right ## there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;partition&#34;&gt;Partition&lt;/h3&gt;
&lt;p&gt;Split string at the first occurence of seperator, and return 3 tuple: (before sep, sep, after sep)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;first;second;third&#39;.partition(&#39;;&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(&#39;first&#39;, &#39;;&#39;, &#39;second;third&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;compare with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;first;second;third&#39;.split(&#39;;&#39;,1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;first&#39;, &#39;second;third&#39;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
