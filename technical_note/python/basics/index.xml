<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Othmane Rifki</title>
    <link>http://othrif.github.io/technical_note/python/basics/</link>
      <atom:link href="http://othrif.github.io/technical_note/python/basics/index.xml" rel="self" type="application/rss+xml" />
    <description>Othmane Rifki</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 12 Apr 2020 14:41:32 +0200</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Othmane Rifki</title>
      <link>http://othrif.github.io/technical_note/python/basics/</link>
    </image>
    
    <item>
      <title>*args, **kwargs</title>
      <link>http://othrif.github.io/technical_note/python/basics/argskwargs/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/argskwargs/</guid>
      <description>&lt;h3 id=&#34;functions-with-variable-arguments-args&#34;&gt;Functions with variable arguments (*args)&lt;/h3&gt;
&lt;p&gt;It allows you to pass a variable number of arguments to functions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def gibberish(*args):
    &amp;quot;&amp;quot;&amp;quot;Concatenate strings in *args together.&amp;quot;&amp;quot;&amp;quot;

    hodgepodge = &#39;&#39;

    for word in args:
        hodgepodge += word

    return hodgepodge

# Call gibberish() with one string: one_word
one_word = gibberish(&#39;luke&#39;)

# Call gibberish() with five strings: many_words
many_words = gibberish(&amp;quot;luke&amp;quot;, &amp;quot;leia&amp;quot;, &amp;quot;han&amp;quot;, &amp;quot;obi&amp;quot;, &amp;quot;darth&amp;quot;)

# Print one_word and many_words
print(one_word)
print(many_words)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;luke
lukeleiahanobidarth
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;functions-with-variable-length-keyword-arguments-kwargs&#34;&gt;Functions with variable-length keyword arguments (**kwargs)&lt;/h3&gt;
&lt;p&gt;It allows you to pass a variable number of keyword arguments to functions. Wthin the function definition, kwargs is a dictionary.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def report_status(**kwargs):
    &amp;quot;&amp;quot;&amp;quot;Print out the status of a movie character.&amp;quot;&amp;quot;&amp;quot;

    print(&amp;quot;\nBEGIN: REPORT\n&amp;quot;)
    for key, val in kwargs.items():
        print(key + &amp;quot;: &amp;quot; + val)
    print(&amp;quot;\nEND REPORT&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;report_status(name=&amp;quot;luke&amp;quot;, affiliation=&amp;quot;jedi&amp;quot;, status=&amp;quot;missing&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;BEGIN: REPORT

name: luke
affiliation: jedi
status: missing

END REPORT
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;report_status(name=&amp;quot;anakin&amp;quot;, affiliation=&amp;quot;sith lord&amp;quot;, status=&amp;quot;deceased&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;BEGIN: REPORT

name: anakin
affiliation: sith lord
status: deceased

END REPORT
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Alter variable defined in global scope</title>
      <link>http://othrif.github.io/technical_note/python/basics/global/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/global/</guid>
      <description>&lt;p&gt;the keyword global within a function to alter the value of a variable defined in the global scope.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;team = &amp;quot;teen titans&amp;quot;

def change_team():
    &amp;quot;&amp;quot;&amp;quot;Change the value of the global variable team.&amp;quot;&amp;quot;&amp;quot;
    global team
    team = &#39;justice league&#39;
    

print(team)
change_team()
print(team)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;teen titans
justice league
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Attaching nonlocal variables to nested functions</title>
      <link>http://othrif.github.io/technical_note/python/basics/function_closure/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/function_closure/</guid>
      <description>&lt;h3 id=&#34;nested-function&#34;&gt;Nested function&lt;/h3&gt;
&lt;p&gt;A function dened inside another function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# outer function
def parent():
    # nested function
    def child():
        pass
    return child
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;nonlocal-variables&#34;&gt;Nonlocal variables&lt;/h3&gt;
&lt;p&gt;Variables dened in the parent function that are used by the child function&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def parent(arg_1, arg_2):
    # From child()&#39;s point of view,
    # `value` and `my_dict` are nonlocal variables,
    # as are `arg_1` and `arg_2`.
    value = 22
    my_dict = {&#39;chocolate&#39;: &#39;yummy&#39;}
    def child():
        print(2 * value)
        print(my_dict[&#39;chocolate&#39;])
        print(arg_1 + arg_2)
    return child
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_func = parent([1], [2,3,4])
print(my_func)
my_func()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;function parent.&amp;lt;locals&amp;gt;.child at 0x10c0cb048&amp;gt;
44
yummy
[1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;closure&#34;&gt;Closure&lt;/h3&gt;
&lt;p&gt;Nonlocal variables attached to a returned function&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;new_function = parent(3, 4)
print([cell.cell_contents for cell in new_function.__closure__])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[3, 4, {&#39;chocolate&#39;: &#39;yummy&#39;}, 22]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;checking-for-closure&#34;&gt;Checking for closure&lt;/h3&gt;
&lt;p&gt;Values passed to &lt;code&gt;return_a_func()&lt;/code&gt; are still accessible to the new function returned, even after the program has left the scope of &lt;code&gt;return_a_func()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Values get added to a function&amp;rsquo;s closure in the order they are defined in the enclosing function (in this case, &lt;code&gt;arg1&lt;/code&gt; and then &lt;code&gt;arg2&lt;/code&gt;), but only if they are used in the nested function. That is, if &lt;code&gt;return_a_func()&lt;/code&gt; took a third argument (e.g., &lt;code&gt;arg3&lt;/code&gt;) that wasn&amp;rsquo;t used by &lt;code&gt;new_func()&lt;/code&gt;, then it would not be captured in &lt;code&gt;new_func()&lt;/code&gt;&#39;s closure.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def return_a_func(arg1, arg2, arg3):
  def new_func():
    print(&#39;arg1 was {}&#39;.format(arg1))
    print(&#39;arg2 was {}&#39;.format(arg2))
  return new_func
    
my_func = return_a_func(2, 17, &#39;hello&#39;)

print(my_func.__closure__ is not None)
print(len(my_func.__closure__))

# Get the values of the variables in the closure
closure_values = [
  my_func.__closure__[i].cell_contents for i in range(2)
]
print(closure_values)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
2
[2, 17]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;closure-keep-your-values-safe&#34;&gt;Closure keep your values safe&lt;/h3&gt;
&lt;p&gt;no matter what you do to &lt;code&gt;my_special_function()&lt;/code&gt; after passing it to &lt;code&gt;get_new_func()&lt;/code&gt;, the new function still mimics the behavior of the original &lt;code&gt;my_special_function()&lt;/code&gt; because it is in the new function&amp;rsquo;s closure.
even if you delete &lt;code&gt;my_special_function()&lt;/code&gt;, you can still call &lt;code&gt;new_func()&lt;/code&gt; without any problems.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def my_special_function():
  print(&#39;You are running my_special_function()&#39;)
  
def get_new_func(func):
  def call_func():
    func()
  return call_func

new_func = get_new_func(my_special_function)

# Delete my_special_function()
del(my_special_function)

new_func()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;You are running my_special_function()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;be-aware&#34;&gt;Be aware!!!&lt;/h3&gt;
&lt;p&gt;you could run into memory issues if you wound up adding a very large array or object to the closure, and has resolved to keep her eye out for that sort of problem.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Attribute naming conventions</title>
      <link>http://othrif.github.io/technical_note/python/basics/naming_conventions/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/naming_conventions/</guid>
      <description>&lt;h3 id=&#34;_name&#34;&gt;&lt;code&gt;_name&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;A convention for internal details of implementation.
A helper method that checks the validity of an attribute&amp;rsquo;s value but isn&amp;rsquo;t considered a part of class&amp;rsquo;s public interface.&lt;/p&gt;
&lt;p&gt;if you see an attribute name with one leading underscore in someone&amp;rsquo;s class - don&amp;rsquo;t use it! The class developer trusts you with this responsibility.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# MODIFY to add class attributes for max number of days and months
class BetterDate:
  
    _MAX_DAYS = 30
    _MAX_MONTH = 12
    
    def __init__(self, year, month, day):
      self.year, self.month, self.day = year, month, day
      
    @classmethod
    def from_str(cls, datestr):
        year, month, day = map(int, datestr.split(&amp;quot;-&amp;quot;))
        return cls(year, month, day)
    
    # Add _is_valid() checking day and month values
    def _is_valid(self):
        if self.day &amp;lt;= BetterDate._MAX_DAYS and self.month &amp;lt;= BetterDate._MAX_MONTH:
            return True
        else:
            return False
         
bd1 = BetterDate(2020, 4, 30)
print(bd1._is_valid())

bd2 = BetterDate(2020, 6, 45)
print(bd2._is_valid())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
False
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;__name&#34;&gt;&lt;code&gt;__name&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Used for attributes that should not be inherited to aviod name clashes in child classes.
A version attribute that stores the current version of the class and shoulnd&amp;rsquo;t be passed to child classes, who will have their own versions.&lt;/p&gt;
&lt;h3 id=&#34;__name__&#34;&gt;&lt;code&gt;__name__&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Reserved for built-in methods. A method that is run whenever the object is printed, constructor called, etc&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Binary, Octal, and Hexadecimal Integers</title>
      <link>http://othrif.github.io/technical_note/python/basics/bin_dec_hex/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/bin_dec_hex/</guid>
      <description>&lt;h1 id=&#34;summary-table&#34;&gt;Summary table&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;{&amp;quot;Decimal&amp;quot;:&amp;lt;10} {&amp;quot;Binary&amp;quot;:&amp;lt;15} {&amp;quot;Hexadecimal&amp;quot;:&amp;lt;10}&#39;)
for i in range(32):
    i_bin = bin(i)
    i_oct = oct(i)
    i_hex = hex(i)
    print(f&#39;{i:10} {i_bin:15} {i_hex:10}&#39;)
for i in range(5,10):
    i = 2**i
    i_bin = bin(i)
    i_oct = oct(i)
    i_hex = hex(i)
    print(f&#39;{i:10} {i_bin:15} {i_hex:10}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Decimal    Binary          Hexadecimal
         0 0b0             0x0       
         1 0b1             0x1       
         2 0b10            0x2       
         3 0b11            0x3       
         4 0b100           0x4       
         5 0b101           0x5       
         6 0b110           0x6       
         7 0b111           0x7       
         8 0b1000          0x8       
         9 0b1001          0x9       
        10 0b1010          0xa       
        11 0b1011          0xb       
        12 0b1100          0xc       
        13 0b1101          0xd       
        14 0b1110          0xe       
        15 0b1111          0xf       
        16 0b10000         0x10      
        17 0b10001         0x11      
        18 0b10010         0x12      
        19 0b10011         0x13      
        20 0b10100         0x14      
        21 0b10101         0x15      
        22 0b10110         0x16      
        23 0b10111         0x17      
        24 0b11000         0x18      
        25 0b11001         0x19      
        26 0b11010         0x1a      
        27 0b11011         0x1b      
        28 0b11100         0x1c      
        29 0b11101         0x1d      
        30 0b11110         0x1e      
        31 0b11111         0x1f      
        32 0b100000        0x20      
        64 0b1000000       0x40      
       128 0b10000000      0x80      
       256 0b100000000     0x100     
       512 0b1000000000    0x200     
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;convert-to-binary&#34;&gt;Convert to Binary&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 79
# Base 2(binary)
bin_a = bin(a)
print(bin_a)
print(int(bin_a, 2)) #Base 2(binary)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b1001111
79
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;convert-to-octal&#34;&gt;Convert to Octal&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 79
# Base 8(octal)
oct_a = oct(a)
print(oct_a)
print(int(oct_a, 8))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0o117
79
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;convert-to-hexadecimal&#34;&gt;Convert to Hexadecimal&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 79
# Base 16(hexadecimal)
hex_a = hex(a)
print(hex_a)
print(int(hex_a, 16))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0x4f
79
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Built-in functions</title>
      <link>http://othrif.github.io/technical_note/python/basics/builtin_functions/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/builtin_functions/</guid>
      <description>&lt;h3 id=&#34;list-of-most-widely-used-python-built-in-functions&#34;&gt;List of most widely used python built-in functions&lt;/h3&gt;
&lt;h4 id=&#34;help-or-module&#34;&gt;&lt;code&gt;help&lt;/code&gt; or &lt;code&gt;?&amp;lt;module&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;get help on any &lt;code&gt;__builtin__&lt;/code&gt; module&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;?help
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[0;31mSignature:[0m   [0mhelp[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwds[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;31mType:[0m        _Helper
[0;31mString form:[0m Type help() for interactive help, or help(object) for help about object.
[0;31mNamespace:[0m   Python builtin
[0;31mFile:[0m        /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/_sitebuiltins.py
[0;31mDocstring:[0m  
Define the builtin &#39;help&#39;.

This is a wrapper around pydoc.help that provides a helpful message
when &#39;help&#39; is typed at the Python interactive prompt.

Calling help() at the Python prompt starts an interactive help session.
Calling help(thing) prints help for the python object &#39;thing&#39;.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(help)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Help on _Helper in module _sitebuiltins object:

class _Helper(builtins.object)
 |  Define the builtin &#39;help&#39;.
 |  
 |  This is a wrapper around pydoc.help that provides a helpful message
 |  when &#39;help&#39; is typed at the Python interactive prompt.
 |  
 |  Calling help() at the Python prompt starts an interactive help session.
 |  Calling help(thing) prints help for the python object &#39;thing&#39;.
 |  
 |  Methods defined here:
 |  
 |  __call__(self, *args, **kwds)
 |      Call self as a function.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;round&#34;&gt;&lt;code&gt;round()&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&#34;max&#34;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&#34;other&#34;&gt;Other&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def demofunc(a,b):
  &amp;quot;&amp;quot;&amp;quot;
//This function is to demonstrate a few built-in functions in Python
  &amp;quot;&amp;quot;&amp;quot;
  print(&amp;quot;Begin&amp;quot;)
  print(max(a,b))
  print(abs(a),abs(b))
  print(float(a),b)
  print(callable(a))
  print(hash(a),hash(b))
  print(len(&#39;ab&#39;))
  print(type(a))
  for i in range(2,4): print(i)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;demofunc(3,4)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Begin
4
3 4
3.0 4
False
3 4
2
&amp;lt;class &#39;int&#39;&amp;gt;
2
3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Built-in object methods</title>
      <link>http://othrif.github.io/technical_note/python/basics/builtin_methods/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/builtin_methods/</guid>
      <description>&lt;h1 id=&#34;list-of-most-widely-used-methods-per-object-type&#34;&gt;List of most widely used methods per object type&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Everything = object&lt;/li&gt;
&lt;li&gt;Objects have methods associated depending on type&lt;/li&gt;
&lt;li&gt;Unlike functions, methods are only called on an object (list, str, etc.)&lt;/li&gt;
&lt;li&gt;Methods can alter the object&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;list-methods&#34;&gt;list methods&lt;/h2&gt;
&lt;p&gt;See all methods by typing &lt;code&gt;help(list)&lt;/code&gt; and scroll down after &lt;code&gt;__...__&lt;/code&gt;, you start seeing the methods&lt;/p&gt;
&lt;h4 id=&#34;index&#34;&gt;&lt;code&gt;index()&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mylist = [1,2,&#39;hello&#39;,&#39;othmane&#39;,2,3,4,&#39;hello&#39;]
mylist.index(&#39;othmane&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;count&#34;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mylist.count(&#39;hello&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;append&#34;&gt;&lt;code&gt;append()&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mylist.append(&#39;really&#39;)
mylist
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 2, &#39;hello&#39;, &#39;othmane&#39;, 2, 3, 4, &#39;hello&#39;, &#39;really&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;reverse&#34;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create list areas
areas = [11.25, 18.0, 20.0, 10.75, 9.50]

# Use append twice to add poolhouse and garage size
areas.append(24.5)
areas.append(15.45)

# Print out areas
print(areas)

# Reverse the orders of the elements in areas
areas.reverse()

# Print out areas
print(areas)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[11.25, 18.0, 20.0, 10.75, 9.5, 24.5, 15.45]
[15.45, 24.5, 9.5, 10.75, 20.0, 18.0, 11.25]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;str-methods&#34;&gt;str methods&lt;/h2&gt;
&lt;h4 id=&#34;capitalize&#34;&gt;&lt;code&gt;capitalize()&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mystr = &#39;othmane&#39;
mystr.capitalize()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Othmane&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;replace&#34;&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mystr.replace(&#39;h&#39;,&#39;H&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;otHmane&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;index-1&#34;&gt;&lt;code&gt;index()&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mystr.index(&#39;h&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Builtins</title>
      <link>http://othrif.github.io/technical_note/python/basics/builtins/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/builtins/</guid>
      <description>&lt;p&gt;To query builtins, you&amp;rsquo;ll need to import builtins because the name builtins is not itself built in&amp;hellip;No, I’m serious!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import builtins
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;module &#39;builtins&#39; (built-in)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;print a list of all the names in the module &lt;code&gt;builtins&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dir(builtins)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;ArithmeticError&#39;,
 &#39;AssertionError&#39;,
 &#39;AttributeError&#39;,
 &#39;BaseException&#39;,
 &#39;BlockingIOError&#39;,
 &#39;BrokenPipeError&#39;,
 &#39;BufferError&#39;,
 &#39;BytesWarning&#39;,
 &#39;ChildProcessError&#39;,
 &#39;ConnectionAbortedError&#39;,
 &#39;ConnectionError&#39;,
 &#39;ConnectionRefusedError&#39;,
 &#39;ConnectionResetError&#39;,
 &#39;DeprecationWarning&#39;,
 &#39;EOFError&#39;,
 &#39;Ellipsis&#39;,
 &#39;EnvironmentError&#39;,
 &#39;Exception&#39;,
 &#39;False&#39;,
 &#39;FileExistsError&#39;,
 &#39;FileNotFoundError&#39;,
 &#39;FloatingPointError&#39;,
 &#39;FutureWarning&#39;,
 &#39;GeneratorExit&#39;,
 &#39;IOError&#39;,
 &#39;ImportError&#39;,
 &#39;ImportWarning&#39;,
 &#39;IndentationError&#39;,
 &#39;IndexError&#39;,
 &#39;InterruptedError&#39;,
 &#39;IsADirectoryError&#39;,
 &#39;KeyError&#39;,
 &#39;KeyboardInterrupt&#39;,
 &#39;LookupError&#39;,
 &#39;MemoryError&#39;,
 &#39;ModuleNotFoundError&#39;,
 &#39;NameError&#39;,
 &#39;None&#39;,
 &#39;NotADirectoryError&#39;,
 &#39;NotImplemented&#39;,
 &#39;NotImplementedError&#39;,
 &#39;OSError&#39;,
 &#39;OverflowError&#39;,
 &#39;PendingDeprecationWarning&#39;,
 &#39;PermissionError&#39;,
 &#39;ProcessLookupError&#39;,
 &#39;RecursionError&#39;,
 &#39;ReferenceError&#39;,
 &#39;ResourceWarning&#39;,
 &#39;RuntimeError&#39;,
 &#39;RuntimeWarning&#39;,
 &#39;StopAsyncIteration&#39;,
 &#39;StopIteration&#39;,
 &#39;SyntaxError&#39;,
 &#39;SyntaxWarning&#39;,
 &#39;SystemError&#39;,
 &#39;SystemExit&#39;,
 &#39;TabError&#39;,
 &#39;TimeoutError&#39;,
 &#39;True&#39;,
 &#39;TypeError&#39;,
 &#39;UnboundLocalError&#39;,
 &#39;UnicodeDecodeError&#39;,
 &#39;UnicodeEncodeError&#39;,
 &#39;UnicodeError&#39;,
 &#39;UnicodeTranslateError&#39;,
 &#39;UnicodeWarning&#39;,
 &#39;UserWarning&#39;,
 &#39;ValueError&#39;,
 &#39;Warning&#39;,
 &#39;ZeroDivisionError&#39;,
 &#39;__IPYTHON__&#39;,
 &#39;__build_class__&#39;,
 &#39;__debug__&#39;,
 &#39;__doc__&#39;,
 &#39;__import__&#39;,
 &#39;__loader__&#39;,
 &#39;__name__&#39;,
 &#39;__package__&#39;,
 &#39;__spec__&#39;,
 &#39;abs&#39;,
 &#39;all&#39;,
 &#39;any&#39;,
 &#39;ascii&#39;,
 &#39;bin&#39;,
 &#39;bool&#39;,
 &#39;breakpoint&#39;,
 &#39;bytearray&#39;,
 &#39;bytes&#39;,
 &#39;callable&#39;,
 &#39;chr&#39;,
 &#39;classmethod&#39;,
 &#39;compile&#39;,
 &#39;complex&#39;,
 &#39;copyright&#39;,
 &#39;credits&#39;,
 &#39;delattr&#39;,
 &#39;dict&#39;,
 &#39;dir&#39;,
 &#39;display&#39;,
 &#39;divmod&#39;,
 &#39;enumerate&#39;,
 &#39;eval&#39;,
 &#39;exec&#39;,
 &#39;filter&#39;,
 &#39;float&#39;,
 &#39;format&#39;,
 &#39;frozenset&#39;,
 &#39;get_ipython&#39;,
 &#39;getattr&#39;,
 &#39;globals&#39;,
 &#39;hasattr&#39;,
 &#39;hash&#39;,
 &#39;help&#39;,
 &#39;hex&#39;,
 &#39;id&#39;,
 &#39;input&#39;,
 &#39;int&#39;,
 &#39;isinstance&#39;,
 &#39;issubclass&#39;,
 &#39;iter&#39;,
 &#39;len&#39;,
 &#39;license&#39;,
 &#39;list&#39;,
 &#39;locals&#39;,
 &#39;map&#39;,
 &#39;max&#39;,
 &#39;memoryview&#39;,
 &#39;min&#39;,
 &#39;next&#39;,
 &#39;object&#39;,
 &#39;oct&#39;,
 &#39;open&#39;,
 &#39;ord&#39;,
 &#39;pow&#39;,
 &#39;print&#39;,
 &#39;property&#39;,
 &#39;range&#39;,
 &#39;repr&#39;,
 &#39;reversed&#39;,
 &#39;round&#39;,
 &#39;set&#39;,
 &#39;setattr&#39;,
 &#39;slice&#39;,
 &#39;sorted&#39;,
 &#39;staticmethod&#39;,
 &#39;str&#39;,
 &#39;sum&#39;,
 &#39;super&#39;,
 &#39;tuple&#39;,
 &#39;type&#39;,
 &#39;vars&#39;,
 &#39;zip&#39;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Class inheritance</title>
      <link>http://othrif.github.io/technical_note/python/basics/class_inheritance/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/class_inheritance/</guid>
      <description>&lt;h3 id=&#34;class-inheritance&#34;&gt;Class inheritance&lt;/h3&gt;
&lt;p&gt;Allows us to reuse and customize code without rewriting existing code. By calling methods of the parent class within the child class, we reuse all the code in those methods, making our code concise and manageable.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Manager&lt;/code&gt; employee &amp;ldquo;is-a&amp;rdquo; &lt;code&gt;Employee&lt;/code&gt; = &amp;lsquo;is-a&amp;rsquo; Relationship.
Example of customizing functionality via inheritance&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Employee:
  MIN_SALARY = 30000    

  def __init__(self, name, salary=MIN_SALARY):
      self.name = name
      if salary &amp;gt;= Employee.MIN_SALARY:
        self.salary = salary
      else:
        self.salary = Employee.MIN_SALARY
  def give_raise(self, amount):
    self.salary += amount      
        
# Manager class inherits from Employee class and add a display method
class Manager(Employee):
    def display(self):
      print(&amp;quot;Manager &amp;quot;+self.name)

    def __init__(self, name, salary=50000, project=None):
        Employee.__init__(self, name, salary)
        self.project = project

    def give_raise(self,amount,bonus=1.05):
        Employee.give_raise(self, amount*bonus)

mng = Manager(&amp;quot;Debbie Lashko&amp;quot;, 86500)
print(mng.name)

# Call mng.display()
mng.display()

mngr = Manager(&amp;quot;Ashta Dunbar&amp;quot;, 78500)
mngr.give_raise(1000)
print(mngr.salary)
mngr.give_raise(2000)
print(mngr.salary)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Debbie Lashko
Manager Debbie Lashko
79550.0
81650.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;inheritance-of-class-attributes&#34;&gt;Inheritance of class attributes&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Boss(Employee):
    MIN_SALARY = 300000
 

e = Employee(&#39;employee&#39;)
b = Boss(&#39;boss&#39;)

print(&amp;quot;e.MIN_SALARY = &amp;quot;, e.MIN_SALARY)
print(&amp;quot;b.MIN_SALARY = &amp;quot;, b.MIN_SALARY)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;e.MIN_SALARY =  30000
b.MIN_SALARY =  300000
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Class vs Object vs Instance</title>
      <link>http://othrif.github.io/technical_note/python/basics/class_object_instance/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/class_object_instance/</guid>
      <description>&lt;p&gt;An &lt;strong&gt;object&lt;/strong&gt; is a software bundle of related &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;behavior&lt;/code&gt;. A &lt;strong&gt;class&lt;/strong&gt; is a blueprint or prototype from which &lt;code&gt;objects&lt;/code&gt; are created. An &lt;strong&gt;instance&lt;/strong&gt; is a single and unique unit of a class.&lt;/p&gt;
&lt;p&gt;Example, we have a blueprint (class) represents student (object) with fields like name, age, course (class member). And we have 2 students here, Foo and Bob. So, Foo and Bob is 2 different instances of the class (Student class) that represent object (Student people).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class-level attributes, alternative constructors, and inheritance of class methods</title>
      <link>http://othrif.github.io/technical_note/python/basics/class_att/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/class_att/</guid>
      <description>&lt;p&gt;Class level attributes store data that is shared among all the class instances. They are assigned values in the class body and are refered to using the &lt;code&gt;ClassName&lt;/code&gt; rather than &lt;code&gt;self&lt;/code&gt; syntax&lt;/p&gt;
&lt;h3 id=&#34;class-level-data&#34;&gt;Class-level data&lt;/h3&gt;
&lt;p&gt;use &lt;code&gt;ClassName.ATTR_NAME&lt;/code&gt; to accessthe class attribute value&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Player:
    MAX_POSITION = 10
    MAX_SPEED = 3
    
    def __init__(self):
        self.position = 0

    # Add a move() method with steps parameter
    def move(self, steps):
        self.position += steps
        if self.position &amp;gt;= Player.MAX_POSITION:
            self.position = Player.MAX_POSITION
       
    # This method provides a rudimentary visualization in the console    
    def draw(self):
        drawing = &amp;quot;-&amp;quot; * self.position + &amp;quot;|&amp;quot; +&amp;quot;-&amp;quot;*(Player.MAX_POSITION - self.position)
        print(drawing)

p = Player(); p.draw()
p.move(4); p.draw()
p.move(5); p.draw()
p.move(3); p.draw()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;|----------
----|------
---------|-
----------|
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;p1, p2 = Player(), Player()

print(&amp;quot;MAX_SPEED of p1 and p2 before assignment:&amp;quot;)
print(p1.MAX_SPEED)
print(p2.MAX_SPEED)

# Modify class attribute
Player.MAX_SPEED = 7

print(&amp;quot;MAX_SPEED of p1 and p2 after assignment of class attribute:&amp;quot;)
print(p1.MAX_SPEED)
print(p2.MAX_SPEED)
print(&amp;quot;MAX_SPEED of Player:&amp;quot;)
print(Player.MAX_SPEED)

# Modify instance attribute
p1.MAX_SPEED = 0

print(&amp;quot;MAX_SPEED of p1 and p2 after assignment of instance attribute:&amp;quot;)
print(p1.MAX_SPEED)
print(p2.MAX_SPEED)
print(&amp;quot;MAX_SPEED of Player:&amp;quot;)
print(Player.MAX_SPEED)


&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;MAX_SPEED of p1 and p2 before assignment:
7
7
MAX_SPEED of p1 and p2 after assignment of class attribute:
7
7
MAX_SPEED of Player:
7
MAX_SPEED of p1 and p2 after assignment of instance attribute:
0
7
MAX_SPEED of Player:
7
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;alternative-constructors&#34;&gt;Alternative constructors&lt;/h3&gt;
&lt;p&gt;Define class methods as well, using the &lt;code&gt;@classmethod&lt;/code&gt; decorator and a special first argument cls. The main use of class methods is defining methods that return an instance of the class, but aren&amp;rsquo;t using the same code as &lt;code&gt;__init__()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# import datetime from datetime
from datetime import datetime

class BetterDate:
    def __init__(self, year, month, day):
      self.year, self.month, self.day = year, month, day
      
    @classmethod
    def from_str(cls, datestr):
        year, month, day = map(int, datestr.split(&amp;quot;-&amp;quot;))
        return cls(year, month, day)
        
    # Define a class method from_datetime accepting a datetime object
    @classmethod
    def from_datetime(cls, datetime):
        return cls(datetime.year, datetime.month, datetime.day)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bd_def = BetterDate(2020,7,3)   
print(bd_def.year)
print(bd_def.month)
print(bd_def.day)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2020
7
3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bd_str = BetterDate.from_str(&amp;quot;2020-7-3&amp;quot;)   
print(bd_str.year)
print(bd_str.month)
print(bd_str.day)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2020
7
3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;today = datetime.today()     
bd = BetterDate.from_datetime(today)   
print(bd.year)
print(bd.month)
print(bd.day)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2020
7
3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;inheritance-of-class-methods&#34;&gt;Inheritance of class methods&lt;/h3&gt;
&lt;p&gt;To customize the parent&amp;rsquo;s class method in a child class, start with a &lt;code&gt;@classmethod&lt;/code&gt; decorator, and define a method with the same name in the child&amp;rsquo;s class, just like you did with regular methods.&lt;/p&gt;
&lt;p&gt;The only difference is that to call the parent&amp;rsquo;s class method within the child&amp;rsquo;s method, you can use &lt;code&gt;ClassName.method_name(args...)&lt;/code&gt; without passing &lt;code&gt;self&lt;/code&gt; or &lt;code&gt;cls&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Define an EvenBetterDate class and customize from_str
class EvenBetterDate(BetterDate):
    @classmethod
    def from_str(self, datestr, format=&#39;YYYY-MM-DD&#39;):
        if format==&#39;YYYY-MM-DD&#39;:
            return BetterDate.from_str(datestr)
        elif format == &#39;DD-MM-YYYY&#39;:
            day,month,year = datestr.split(&#39;-&#39;)
            return BetterDate.from_str((&#39;-&#39;).join([year, month, day]))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ebd_str = EvenBetterDate.from_str(&#39;02-12-2019&#39;, format=&#39;DD-MM-YYYY&#39;)
print(ebd_str.year)
ebd_dt = EvenBetterDate.from_datetime(datetime.today())
print(ebd_dt.year)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2019
2020
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Class-level attributes, alternative constructors, and inheritance of class methods</title>
      <link>http://othrif.github.io/technical_note/python/basics/class_dataframe/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/class_dataframe/</guid>
      <description>&lt;h3 id=&#34;customize-the-constructor-of-the-dataframe&#34;&gt;Customize the constructor of the DataFrame&lt;/h3&gt;
&lt;p&gt;implement a small LoggedDF class that inherits from a regular pandas DataFrame but has a created_at attribute storing the timestamp.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import pandas as pd
import pandas as pd

# Define LoggedDF inherited from pd.DataFrame and add the constructor
class LoggedDF(pd.DataFrame):
  
  def __init__(self, *args, **kwargs):
    pd.DataFrame.__init__(self, *args, **kwargs)
    self.created_at = datetime.today()
    
    
ldf = LoggedDF({&amp;quot;col1&amp;quot;: [1,2], &amp;quot;col2&amp;quot;: [3,4]})
print(ldf.values)
print(ldf.created_at)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[1 3]
 [2 4]]
2020-07-03 14:14:13.578281
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;customize-a-method-of-the-dataframe&#34;&gt;Customize a method of the DataFrame&lt;/h3&gt;
&lt;p&gt;Using &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; allows you to not worry about keeping the signature of your customized method compatible. Notice how in the very last line, you called the parent method and passed an object to it that isn&amp;rsquo;t self. When you call parent methods in the class, they should accept some object as the first argument, and that object is usually &lt;code&gt;self&lt;/code&gt;, but it doesn&amp;rsquo;t have to be!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import pandas as pd
import pandas as pd

# Define LoggedDF inherited from pd.DataFrame and add the constructor
class LoggedDF(pd.DataFrame):
  
  def __init__(self, *args, **kwargs):
    pd.DataFrame.__init__(self, *args, **kwargs)
    self.created_at = datetime.today()
    
  def to_csv(self, *args, **kwargs):
    # Copy self to a temporary DataFrame
    temp = self.copy()
    
    # Create a new column filled with self.created at
    temp[&amp;quot;created_at&amp;quot;] = self.created_at
    
    # Call pd.DataFrame.to_csv on temp with *args and **kwargs
    pd.DataFrame.to_csv(temp, *args, **kwargs)
    
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ldf = LoggedDF({&amp;quot;col1&amp;quot;: [1,2], &amp;quot;col2&amp;quot;: [3,4]})
print(ldf.values)
print(ldf.created_at)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[1 3]
 [2 4]]
2020-07-03 14:14:14.769906
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Context manager: `with ... as ...`</title>
      <link>http://othrif.github.io/technical_note/python/basics/context_manager/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/context_manager/</guid>
      <description>&lt;h3 id=&#34;with--as-&#34;&gt;&lt;code&gt;with ... as ...&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;as &amp;lt;variable name&amp;gt;&lt;/code&gt; is not needed if a context manager does not return a value.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Open &amp;quot;alice.txt&amp;quot; and assign the file to &amp;quot;file&amp;quot;
with open(&#39;alice.txt&#39;) as file:
  text = file.read()

n = 0
for word in text.split():
    if word.lower() in [&#39;cat&#39;, &#39;cats&#39;]:
        n += 1

print(&#39;Lewis Carroll uses the word &amp;quot;cat&amp;quot; {} times&#39;.format(n))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Lewis Carroll uses the word &amp;quot;cat&amp;quot; 4 times
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;how-to-create-a-context-manager&#34;&gt;How to create a context manager&lt;/h3&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import contextlib
@contextlib.contextmanager
def my_context():
    # Add any set up code you need
    yield
    # Add any tear down code you need (optional)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
@contextlib.contextmanager
def my_context():
    print(&#39;start context&#39;)
    yield 9999
    print(&#39;good bye!&#39;)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with my_context() as foo:
    print(&#39;foo is {}&#39;.format(foo))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;start context
foo is 9999
good bye!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Write &lt;code&gt;timer()&lt;/code&gt; context manager to figure out which of their functions is running too slow. Notice that the three elements of a context manager are all here: a function definition, a yield statement, and the @contextlib.contextmanager decorator. It&amp;rsquo;s also worth noticing that timer() is a context manager that does not return an explicit value, so yield is written by itself without specifying anything to return.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import time

@contextlib.contextmanager
def timer():
  &amp;quot;&amp;quot;&amp;quot;Time the execution of a context block.

  Yields:
    None
  &amp;quot;&amp;quot;&amp;quot;
  start = time.time()
  # Send control back to the context block
  yield
  end = time.time()
  print(&#39;Elapsed: {:.2f}s&#39;.format(end - start))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with timer():
  print(&#39;This should take approximately 0.25 seconds&#39;)
  time.sleep(0.25)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;This should take approximately 0.25 seconds
Elapsed: 0.25s
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;a-read-only-open-context-manager&#34;&gt;A read-only open() context manager&lt;/h3&gt;
&lt;p&gt;read-only version of the open() context manager to use in your project to not accidentally overwrite one of the files when trying to read it in.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@contextlib.contextmanager
def open_read_only(filename):
  &amp;quot;&amp;quot;&amp;quot;Open a file in read-only mode.

  Args:
    filename (str): The location of the file to read

  Yields:
    file object
  &amp;quot;&amp;quot;&amp;quot;
  read_only_file = open(filename, mode=&#39;r&#39;)
  # Yield read_only_file so it can be assigned to my_file
  yield read_only_file
  # Close read_only_file
  read_only_file.close()

with open_read_only(&#39;alice.txt&#39;) as my_file:
  print(my_file.read())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;this is alice.txt counting how many CATS i have. yes i said cAts . Not just one cat , but many catS !
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;changing-the-working-directory&#34;&gt;Changing the working directory&lt;/h3&gt;
&lt;p&gt;change the current working directory back to what it was when they called in_dir(). This is important to do because your users might be relying on their working directory being what it was when they started the script. in_dir() is a great example of the CHANGE/RESET pattern that indicates you should use a context manager.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def in_dir(directory):
  &amp;quot;&amp;quot;&amp;quot;Change current working directory to `directory`,
  allow the user to run some code, and change back.

  Args:
    directory (str): The path to a directory to work in.
  &amp;quot;&amp;quot;&amp;quot;
  current_dir = os.getcwd()
  os.chdir(directory)

  # Add code that lets you handle errors
  try:
    yield
  # Ensure the directory is reset,
  # whether there was an error or not
  finally:
    os.chdir(current_dir)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;context-manager-patterns&#34;&gt;Context manager patterns&lt;/h3&gt;
&lt;p&gt;Situation where using a context manager with exception handling &lt;code&gt;try-finally&lt;/code&gt; that can be useful&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Start&lt;/th&gt;
&lt;th&gt;Finish&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Open&lt;/td&gt;
&lt;td&gt;Close&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lock&lt;/td&gt;
&lt;td&gt;Release&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Change&lt;/td&gt;
&lt;td&gt;Reset&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enter&lt;/td&gt;
&lt;td&gt;Exit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Start&lt;/td&gt;
&lt;td&gt;Stop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Setup&lt;/td&gt;
&lt;td&gt;Teardown&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Connect&lt;/td&gt;
&lt;td&gt;Disconnect&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Control attribute acess using @property</title>
      <link>http://othrif.github.io/technical_note/python/basics/properties/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/properties/</guid>
      <description>&lt;h3 id=&#34;what-are-properties&#34;&gt;What are properties?&lt;/h3&gt;
&lt;p&gt;You could think of properties as attributes with built-in access control. They are especially useful when there is some additional code you&amp;rsquo;d like to execute when assigning values to attributes.
to a class user, they look just like regular attributes, but behind the scenes, they can have custom code executed when they are accessed.&lt;/p&gt;
&lt;h3 id=&#34;create-and-set-properties&#34;&gt;Create and set properties&lt;/h3&gt;
&lt;p&gt;There are two parts to defining a property:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define an &amp;ldquo;internal&amp;rdquo; attribute that will contain the data &lt;code&gt;_name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Define a &lt;code&gt;@property&lt;/code&gt;-decorated method whose name is the property &lt;code&gt;name&lt;/code&gt;, and that returns the internal attribute storing the data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;rsquo;d also like to define a custom setter method, there&amp;rsquo;s an additional step:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define another method whose name is exactly the property name (again), and decorate it with &lt;code&gt;@prop_name.setter&lt;/code&gt; where &lt;code&gt;prop_name&lt;/code&gt; is the name of the property. The method should take two arguments &amp;ndash; &lt;code&gt;self&lt;/code&gt; (as always), and the value that&amp;rsquo;s being assigned to the property.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Customer:
    def __init__(self, name, new_bal):
        self.name = name
        if new_bal &amp;lt; 0:
           raise ValueError(&amp;quot;Invalid balance!&amp;quot;)
        self._balance = new_bal  

    # Add a decorated balance() method returning _balance        
    @property
    def balance(self):
        return self._balance

    # Add a setter balance() method
    @balance.setter
    def balance(self, new_bal):
        # Validate the parameter value
        if new_bal &amp;lt; 0:
           raise ValueError(&amp;quot;Invalid balance!&amp;quot;)
        self._balance = new_bal
        print(&amp;quot;Setter method called&amp;quot;)

# Create a Customer        
cust = Customer(&#39;Belinda Lutz&#39;, 2000)

# Assign 3000 to the balance property
cust.balance = 3000

# Print the balance property
print(cust.balance)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Setter method called
3000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the user of your &lt;code&gt;Customer&lt;/code&gt; class won&amp;rsquo;t be able to assign arbitrary values to the customers&amp;rsquo; balance.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Custom exception</title>
      <link>http://othrif.github.io/technical_note/python/basics/custom_exception/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/custom_exception/</guid>
      <description>&lt;h3 id=&#34;handling-exception&#34;&gt;Handling exception&lt;/h3&gt;
&lt;p&gt;Built-in exceptions inherit from class &lt;code&gt;BaseException&lt;/code&gt; or &lt;code&gt;Exception&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# MODIFY the function to catch exceptions
def invert_at_index(x, ind):
    try:
        return 1/x[ind]
    except ZeroDivisionError:
        print(&amp;quot;Cannot divide by zero!&amp;quot;)
    except IndexError:
        print(&amp;quot;Index out of range!&amp;quot;)
 
a = [5,6,0,7]

# Works okay
print(invert_at_index(a, 1))

# Potential ZeroDivisionError
print(invert_at_index(a, 2))

# Potential IndexError
print(invert_at_index(a, 5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.16666666666666666
Cannot divide by zero!
None
Index out of range!
None
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;custom-exception&#34;&gt;Custom exception&lt;/h3&gt;
&lt;p&gt;Need to define an exception is a class inherited from the built-in &lt;code&gt;Exception&lt;/code&gt; class or one of its subclasses.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class SalaryError(ValueError): pass
class BonusError(SalaryError): pass

class Employee:
  MIN_SALARY = 30000
  MAX_BONUS = 5000

  def __init__(self, name, salary = 30000):
    self.name = name    
    if salary &amp;lt; Employee.MIN_SALARY:
      raise SalaryError(&amp;quot;Salary is too low!&amp;quot;)      
    self.salary = salary
    
  # Rewrite using exceptions  
  def give_bonus(self, amount):
    if amount &amp;gt; Employee.MAX_BONUS:
        raise BonusError(&amp;quot;The bonus amount is too high!&amp;quot;)  
        
    elif self.salary + amount &amp;lt;  Employee.MIN_SALARY:
        raise SalaryError(&amp;quot;The salary after bonus is too low!&amp;quot;)
      
    else:  
      self.salary += amount
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;e = Employee(&#39;othmane&#39;,1000)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

SalaryError                               Traceback (most recent call last)

&amp;lt;ipython-input-16-96ecb849cf7a&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 e = Employee(&#39;othmane&#39;,1000)


&amp;lt;ipython-input-14-1dd77ad984a7&amp;gt; in __init__(self, name, salary)
      9     self.name = name
     10     if salary &amp;lt; Employee.MIN_SALARY:
---&amp;gt; 11       raise SalaryError(&amp;quot;Salary is too low!&amp;quot;)
     12     self.salary = salary
     13 


SalaryError: Salary is too low!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;e = Employee(&#39;othmane&#39;,1000000)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;e.give_bonus(500000)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

BonusError                                Traceback (most recent call last)

&amp;lt;ipython-input-18-0cfd0f4c6fd2&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 e.give_bonus(500000)


&amp;lt;ipython-input-14-1dd77ad984a7&amp;gt; in give_bonus(self, amount)
     15   def give_bonus(self, amount):
     16     if amount &amp;gt; Employee.MAX_BONUS:
---&amp;gt; 17         raise BonusError(&amp;quot;The bonus amount is too high!&amp;quot;)
     18 
     19     elif self.salary + amount &amp;lt;  Employee.MIN_SALARY:


BonusError: The bonus amount is too high!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;e.give_bonus(-980000)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

SalaryError                               Traceback (most recent call last)

&amp;lt;ipython-input-20-c41bdf5a7cec&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 e.give_bonus(-980000)


&amp;lt;ipython-input-14-1dd77ad984a7&amp;gt; in give_bonus(self, amount)
     18 
     19     elif self.salary + amount &amp;lt;  Employee.MIN_SALARY:
---&amp;gt; 20         raise SalaryError(&amp;quot;The salary after bonus is too low!&amp;quot;)
     21 
     22     else:


SalaryError: The salary after bonus is too low!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Datetime</title>
      <link>http://othrif.github.io/technical_note/python/basics/datetime/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/datetime/</guid>
      <description>&lt;h3 id=&#34;convert-string-to-datetime&#34;&gt;Convert string to datetime&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;datetime.strptime(date_string, format)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import datetime
date_string=&#39;03/01/2019 12:00:00 AM&#39;
datetime.strptime(date_string, &#39;%m/%d/%Y %I:%M:%S %p&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 3, 1, 0, 0)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;find-last-month&#34;&gt;Find last month&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import datetime
today = datetime.date.today()
print(today)
first = today.replace(day=1)
print(first)
lastMonth = first - datetime.timedelta(days=1)
print(lastMonth)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2020-05-17
2020-05-01
2020-04-30
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;count-number-of-months&#34;&gt;Count number of months&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def diff_month(d1, d2):
    return (d1.year - d2.year) * 12 + d1.month - d2.month
num_months = diff_month(first,lastMonth)
print(num_months)
num_months = diff_month(today,first)
print(num_months)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1
0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Defining a decorator @decorator</title>
      <link>http://othrif.github.io/technical_note/python/basics/function_decorator/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/function_decorator/</guid>
      <description>&lt;h3 id=&#34;defining-a-decorator&#34;&gt;Defining a decorator&lt;/h3&gt;
&lt;p&gt;The decorator is a function that takes another function as an argument and modifies its behavior. Add &lt;code&gt;@&lt;/code&gt; before the decorator function name without &lt;code&gt;()&lt;/code&gt;.
The syntax&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@decorator
def function():
    pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is equivalent to&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def function():
    pass

function = decorator(function)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def parent(func):
    # nested function
    def child(a,b):
        return func(a*2,b*2)
    return child

def multiply(a,b):
    return a*b

multiply = parent(multiply)
multiply(1,2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def parent(func):
    # nested function
    def child(a,b):
        return func(a*2,b*2)
    return child

@parent
def multiply(a,b):
    return a*b

multiply(1,2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;verifying-decorator&#34;&gt;Verifying decorator&lt;/h3&gt;
&lt;p&gt;The decorator &lt;code&gt;print_before_and_after()&lt;/code&gt; defines a nested function &lt;code&gt;wrapper()&lt;/code&gt; that calls whatever function gets passed to &lt;code&gt;print_before_and_after()&lt;/code&gt;. &lt;code&gt;wrapper()&lt;/code&gt; adds a little something else to the function call by printing one message before the decorated function is called and another right afterwards. Since &lt;code&gt;print_before_and_after()&lt;/code&gt; returns the new &lt;code&gt;wrapper()&lt;/code&gt; function, we can use it as a decorator to decorate the &lt;code&gt;multiply()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def print_before_and_after(func):
  def wrapper(*args):
    print(&#39;Before {}&#39;.format(func.__name__))
    # Call the function being decorated with *args
    func(*args)
    print(&#39;After {}&#39;.format(func.__name__))
  # Return the nested function
  return wrapper

@print_before_and_after
def multiply(a, b):
  print(a * b)

multiply(5, 10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Before multiply
50
After multiply
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Dictionaries</title>
      <link>http://othrif.github.io/technical_note/python/basics/dictionary/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/dictionary/</guid>
      <description>&lt;h3 id=&#34;basics&#34;&gt;Basics&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition of dictionary
europe = {&#39;spain&#39;:&#39;madrid&#39;, &#39;france&#39;:&#39;paris&#39;, &#39;germany&#39;:&#39;berlin&#39;, &#39;norway&#39;:&#39;oslo&#39; }

# Print out the keys in europe
print(europe.keys())

# Print out value that belongs to key &#39;norway&#39;
print(europe[&#39;norway&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dict_keys([&#39;spain&#39;, &#39;france&#39;, &#39;germany&#39;, &#39;norway&#39;])
oslo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;addremove-an-element&#34;&gt;Add/Remove an element&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;europe[&#39;italy&#39;] = &#39;rome&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;europe
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;spain&#39;: &#39;madrid&#39;,
 &#39;france&#39;: &#39;paris&#39;,
 &#39;germany&#39;: &#39;berlin&#39;,
 &#39;norway&#39;: &#39;oslo&#39;,
 &#39;italy&#39;: &#39;rome&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;del(europe[&#39;france&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;europe
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;spain&#39;: &#39;madrid&#39;, &#39;germany&#39;: &#39;berlin&#39;, &#39;norway&#39;: &#39;oslo&#39;, &#39;italy&#39;: &#39;rome&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Docstrings: google style and numpydoc</title>
      <link>http://othrif.github.io/technical_note/python/basics/docstring_style/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/docstring_style/</guid>
      <description>&lt;h3 id=&#34;google-style&#34;&gt;Google style&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def count_letter(content, letter):
  &amp;quot;&amp;quot;&amp;quot;Count the number of times `letter` appears in `content`.

  Args:
    content (str): The string to search.
    letter (str): The letter to search for.

  Returns:
    int

  # Add a section detailing what errors might be raised
  Raises:
    ValueError: If `letter` is not a one-character string.
  &amp;quot;&amp;quot;&amp;quot;
  if (not isinstance(letter, str)) or len(letter) != 1:
    raise ValueError(&#39;`letter` must be a single character string.&#39;)
  return len([char for char in content if char == letter])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;numpydoc&#34;&gt;Numpydoc&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def function(arg_1, arg_2=42):
    &amp;quot;&amp;quot;&amp;quot;
    Description of what the function does.
    
    Parameters
    ----------
    arg_1 : expected type of arg_1
        Description of arg_1.
    arg_2 : int, optional
        Write optional when an argument has a default value.
        Default=42.
        
    Returns
    -------
    The type of the return value
        Can include a description of the return value.
        Replace &amp;quot;Returns&amp;quot; with &amp;quot;Yields&amp;quot; if this function is a generator
    &amp;quot;&amp;quot;&amp;quot;
    pass
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;retriving-docstrings&#34;&gt;Retriving docstrings&lt;/h3&gt;
&lt;h4 id=&#34;help&#34;&gt;&lt;code&gt;help()&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(count_letter)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Help on function count_letter in module __main__:

count_letter(content, letter)
    Count the number of times `letter` appears in `content`.
    
    Args:
      content (str): The string to search.
      letter (str): The letter to search for.
    
    Returns:
      int
    
    # Add a section detailing what errors might be raised
    Raises:
      ValueError: If `letter` is not a one-character string.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;__doc__&#34;&gt;&lt;code&gt;__doc__&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;docstring = count_letter.__doc__

border = &#39;#&#39; * 100
print(&#39;{}\n{}\n{}&#39;.format(border, docstring, border))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;####################################################################################################
Count the number of times `letter` appears in `content`.

  Args:
    content (str): The string to search.
    letter (str): The letter to search for.

  Returns:
    int

  # Add a section detailing what errors might be raised
  Raises:
    ValueError: If `letter` is not a one-character string.
  
####################################################################################################
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;module-inspectgetdoc&#34;&gt;Module &lt;code&gt;inspect.getdoc()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Preferred way for visually pretty doc!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import inspect

# Get the docstring with a function from the inspect module
docstring = inspect.getdoc(function)

border = &#39;#&#39; * 100
print(&#39;{}\n{}\n{}&#39;.format(border, docstring, border))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;####################################################################################################
Description of what the function does.

Parameters
----------
arg_1 : expected type of arg_1
    Description of arg_1.
arg_2 : int, optional
    Write optional when an argument has a default value.
    Default=42.
    
Returns
-------
The type of the return value
    Can include a description of the return value.
    Replace &amp;quot;Returns&amp;quot; with &amp;quot;Yields&amp;quot; if this function is a generator
####################################################################################################
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;tools-to-generated-docs&#34;&gt;Tools to generated docs:&lt;/h3&gt;
&lt;p&gt;There are some wonderful tools like &lt;code&gt;sphinx&lt;/code&gt; and &lt;code&gt;pydoc&lt;/code&gt; that will automatically generate online documentation for you based off of your docstrings.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Enumerate a dictionary</title>
      <link>http://othrif.github.io/technical_note/python/basics/enumerate/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/enumerate/</guid>
      <description>&lt;h3 id=&#34;enumerate-through-both-keys-and-values&#34;&gt;Enumerate through both keys and values&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;example_dict = {1:&#39;a&#39;, 2:&#39;b&#39;, 3:&#39;c&#39;, 4:&#39;d&#39;}
for i, (k, v) in enumerate(example_dict.items()):
    print(i, k, v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0 1 a
1 2 b
2 3 c
3 4 d
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Error and exception</title>
      <link>http://othrif.github.io/technical_note/python/basics/exception/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/exception/</guid>
      <description>&lt;h3 id=&#34;error-handling-with-try-except-finally&#34;&gt;Error handling with try-except-finally&lt;/h3&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try: 
    # code that might raise an error
except:
    # do something about the error
finally:
    # this code runs no matter what 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def shout_echo(word1, echo=1):
    &amp;quot;&amp;quot;&amp;quot;Concatenate echo copies of word1 and three
    exclamation marks at the end of the string.&amp;quot;&amp;quot;&amp;quot;

    echo_word=&#39;&#39;
    shout_words=&#39;&#39;

    # Add exception handling with try-except
    try:
        echo_word = word1*echo
        shout_words = echo_word+&#39;!!!&#39;
    except:
        print(&amp;quot;word1 must be a string and echo must be an integer.&amp;quot;)
        
    return shout_words

shout_echo(&#39;particle&#39;, echo=&#39;accelerator&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;word1 must be a string and echo must be an integer.





&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;error-handling-by-raising-an-error&#34;&gt;Error handling by raising an error&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def shout_echo(word1, echo=1):
    &amp;quot;&amp;quot;&amp;quot;Concatenate echo copies of word1 and three
    exclamation marks at the end of the string.&amp;quot;&amp;quot;&amp;quot;

    # Raise an error with raise
    if echo&amp;lt;0:
        raise ValueError(&#39;echo must be greater than or equal to 0&#39;)

    echo_word = word1*echo
    shout_words = echo_word+&#39;!!!&#39;

    return shout_word

shout_echo(&amp;quot;particle&amp;quot;, echo=-5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&amp;lt;ipython-input-13-85d647f11453&amp;gt; in &amp;lt;module&amp;gt;
     12     return shout_word
     13 
---&amp;gt; 14 shout_echo(&amp;quot;particle&amp;quot;, echo=-5)


&amp;lt;ipython-input-13-85d647f11453&amp;gt; in shout_echo(word1, echo)
      5     # Raise an error with raise
      6     if echo&amp;lt;0:
----&amp;gt; 7         raise ValueError(&#39;echo must be greater than or equal to 0&#39;)
      8 
      9     echo_word = word1*echo


ValueError: echo must be greater than or equal to 0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;common-errors&#34;&gt;Common errors:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AttributeError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>File, dir handling with os module</title>
      <link>http://othrif.github.io/technical_note/python/basics/os_manip/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/os_manip/</guid>
      <description>&lt;h3 id=&#34;preliminary&#34;&gt;Preliminary&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;current-location&#34;&gt;Current location&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;Current location is: {os.getcwd()!r}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Current location is: &#39;/Users/othmanerifki/projects/website/othrif.hugo/content/technical_note/python/basics&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-dir-if-it-does-not-exist&#34;&gt;Create dir if it does not exist&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;path=&#39;/tmp/test&#39;
if not os.path.exists(path):
    os.mkdir(path)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;check-by-going-to-the-newly-created-area-and-outputing-path&#34;&gt;Check by going to the newly created area and outputing path&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;os.chdir(path)
print(f&#39;New location is: {os.getcwd()!r}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;New location is: &#39;/private/tmp/test&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;open-file&#34;&gt;Open file&lt;/h3&gt;
&lt;p&gt;Options available: &lt;code&gt;os.O_RDONLY, os.O_WRONLY, os.O_RDWR, os.O_CREAT, os.O_APPEND&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fd = os.open(path+&#39;/mytext.txt&#39;, os.O_RDONLY | os.O_CREAT) # open file
print(f&#39;Intial file: {os.listdir(path)}&#39;)
os.rename(&#39;mytext.txt&#39;, &amp;quot;mytest_rename.txt&amp;quot;)
print(f&#39;Renamed file:{os.listdir(path)}&#39;)
os.close(fd) # close
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Intial file: [&#39;mytext.txt&#39;]
Renamed file:[&#39;mytest_rename.txt&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;remove-commands&#34;&gt;Remove commands&lt;/h3&gt;
&lt;h4 id=&#34;1-remove-directory-and-all-its-content&#34;&gt;1. Remove directory and all its content&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import shutil
if os.path.exists(path) and os.path.isdir(path):
    shutil.rmtree(path)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-alternative-approach&#34;&gt;2. Alternative approach&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pathlib import Path
dirpath = Path(path)
if dirpath.exists() and dirpath.is_dir():
    shutil.rmtree(path)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Function as an object, nested functions</title>
      <link>http://othrif.github.io/technical_note/python/basics/function_object/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/function_object/</guid>
      <description>&lt;h3 id=&#34;nested-functions&#34;&gt;Nested functions&lt;/h3&gt;
&lt;p&gt;Notice how we assign the return value from &lt;code&gt;create_math_function()&lt;/code&gt; to the &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;subtract&lt;/code&gt; variables in the script. Since &lt;code&gt;create_math_function()&lt;/code&gt; returns a function, we can then call those variables as functions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def create_math_function(func_name):
  if func_name == &#39;add&#39;:
    def add(a, b):
      return a + b
    return add
  elif func_name == &#39;subtract&#39;:
    # Define the subtract() function
    def subtract(a,b):
        return a - b
    return subtract
  else:
    print(&amp;quot;I don&#39;t know that one&amp;quot;)
    
add = create_math_function(&#39;add&#39;)
print(&#39;5 + 2 = {}&#39;.format(add(5, 2)))

subtract = create_math_function(&#39;subtract&#39;)
print(&#39;5 - 2 = {}&#39;.format(subtract(5, 2)))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5 + 2 = 7
5 - 2 = 3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>http://othrif.github.io/technical_note/python/basics/functions/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/functions/</guid>
      <description>&lt;h3 id=&#34;exit-from-function-with-conditions&#34;&gt;Exit from function with conditions&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;outer_condition=True
condition_a=True
condition_b=False


def some_function():
    if condition_a:
        # do something and return early
        print(f&#39;condition a satisfied!&#39;)
        return
    if condition_b:
        # do something else and return early
        print(f&#39;condition b satisfied!&#39;)
        return
    return

if outer_condition:
    some_function()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;condition a satisfied!
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;passing-a-list-as-an-argument&#34;&gt;Passing a list as an argument&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def my_function(food):
  for x in food:
    print(x)

fruits = [&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;]

my_function(fruits)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;apple
banana
cherry
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get ASCII of a character</title>
      <link>http://othrif.github.io/technical_note/python/basics/ascii/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/ascii/</guid>
      <description>&lt;h3 id=&#34;get-the-int-value-of-the-char&#34;&gt;Get the int value of the char&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ord(&#39;a&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;97
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;get-the-char-value-of-the-ascii-int&#34;&gt;Get the char value of the ascii int&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;chr(97)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;a&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;manipulations&#34;&gt;Manipulations&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;chr(ord(&#39;a&#39;) + 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;d&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Immutable or mutable?</title>
      <link>http://othrif.github.io/technical_note/python/basics/immutable_mutable/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/immutable_mutable/</guid>
      <description>&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Immutable&lt;/th&gt;
&lt;th&gt;Mutable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;list&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;set&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;objects&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;functions&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;almost everything else&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Header&lt;/th&gt;
&lt;th&gt;Second Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;best-practice-for-default-arguments&#34;&gt;Best practice for default arguments&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
# Use an immutable variable for the default argument 
def better_add_column(values, df=None):
  &amp;quot;&amp;quot;&amp;quot;Add a column of `values` to a DataFrame `df`.&amp;quot;&amp;quot;&amp;quot;
  # Update the function to create a default DataFrame
  if df is None:
    df = pandas.DataFrame()
  df[&#39;col_{}&#39;.format(len(df.columns))] = values
  return df
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We cannot define the function as: &lt;code&gt;def better_add_column(values, df=pandas.DataFrame()):&lt;/code&gt; . It does not work since the code used a mutable variable as a default argument value which gives unexpected behavior&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Importing HDF5 files and LIGO data</title>
      <link>http://othrif.github.io/technical_note/python/basics/loadhdf5/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/loadhdf5/</guid>
      <description>&lt;h3 id=&#34;hdf5-files&#34;&gt;HDF5 files&lt;/h3&gt;
&lt;p&gt;The most efficient way to store large files up to the exabyte scale.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import h5py
filenmae = &#39;L-L1_LOSC_4_V1-1126259446-32.hdf5&#39;
data = h5py.File(filenmae, &#39;r&#39;)
print(type(data))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;h5py._hl.files.File&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for key in data.keys():
    print(key)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;meta
quality
strain
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for key in data[&#39;meta&#39;].keys():
    print(key)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Description
DescriptionURL
Detector
Duration
GPSstart
Observatory
Type
UTCstart
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(data[&#39;meta&#39;][&#39;Description&#39;][()],data[&#39;meta&#39;][&#39;Detector&#39;][()])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;b&#39;Strain data time series from LIGO&#39; b&#39;L1&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
# Get the HDF5 group: group
group = data[&#39;strain&#39;]

# Check out keys of group
for key in group.keys():
    print(key)

# Set variable equal to time series data: strain
strain = data[&#39;strain&#39;][&#39;Strain&#39;][()]

# Set number of time points to sample: num_samples
num_samples = 10000

# Set time vector
time = np.arange(0, 1, 1/num_samples)

# Plot data
plt.plot(time, strain[:num_samples])
plt.xlabel(&#39;GPS Time (s)&#39;)
plt.ylabel(&#39;strain&#39;)
plt.show()

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Strain
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;loadhdf5_6_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Importing MATLAB data</title>
      <link>http://othrif.github.io/technical_note/python/basics/loadmatlab/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/loadmatlab/</guid>
      <description>&lt;h3 id=&#34;matlab&#34;&gt;MATLAB&lt;/h3&gt;
&lt;p&gt;for &amp;ldquo;Matrix Laboratory&amp;rdquo;  &lt;br&gt;
&amp;lsquo;.mat&amp;rsquo; files&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import package
import scipy.io

# Load MATLAB file: mat
mat = scipy.io.loadmat(&#39;ja_data2.mat&#39;)

# Print the datatype type of mat
print(type(mat))

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;dict&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
import numpy as np
# Print the keys of the MATLAB dictionary
print(mat.keys())

# Print the type of the value corresponding to the key &#39;CYratioCyt&#39;
print(mat[&#39;CYratioCyt&#39;])

# Print the shape of the value corresponding to the key &#39;CYratioCyt&#39;
print(np.shape(mat[&#39;CYratioCyt&#39;]))

# Subset the array and plot it
data = mat[&#39;CYratioCyt&#39;][25, 5:]
fig = plt.figure()
plt.plot(data)
plt.xlabel(&#39;time (min.)&#39;)
plt.ylabel(&#39;normalized fluorescence (measure of expression)&#39;)
plt.show()

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dict_keys([&#39;__header__&#39;, &#39;__version__&#39;, &#39;__globals__&#39;, &#39;rfpCyt&#39;, &#39;rfpNuc&#39;, &#39;cfpNuc&#39;, &#39;cfpCyt&#39;, &#39;yfpNuc&#39;, &#39;yfpCyt&#39;, &#39;CYratioCyt&#39;])
[[0.         1.53071547 1.54297013 ... 1.34990123 1.35329984 1.34922173]
 [0.         1.28605578 1.29385656 ... 1.31307311 1.30039694 1.30563938]
 [0.         1.32731222 1.32884617 ... 1.24887565 1.24506205 1.25825831]
 ...
 [0.         0.         0.         ... 0.         0.         0.        ]
 [0.         1.44552606 1.42862357 ... 0.         0.         0.        ]
 [0.         1.45794466 0.         ... 1.1229479  1.12224652 1.1486481 ]]
(200, 137)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;loadmatlab_3_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Importing SAS and Stata files</title>
      <link>http://othrif.github.io/technical_note/python/basics/loadsas/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/loadsas/</guid>
      <description>&lt;h3 id=&#34;sas-files&#34;&gt;SAS files&lt;/h3&gt;
&lt;p&gt;SAS: Statistical Analysis System&lt;br&gt;
Used for business analytics and biostatistics&lt;br&gt;
File extension: &lt;code&gt;.sasb7dat&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import matplotlib.pyplot as plt
from sas7bdat import SAS7BDAT


# Save file to a DataFrame: df_sas
with SAS7BDAT(&#39;sales.sas7bdat&#39;) as file:
    df_sas = file.to_data_frame()

# Print head of DataFrame
print(df_sas.head())

# Plot histogram of DataFrame features (pandas and pyplot already imported)
pd.DataFrame.hist(df_sas[[&#39;S&#39;,&#39;P&#39;]])
plt.ylabel(&#39;count&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     YEAR     P           S
0  1950.0  12.9  181.899994
1  1951.0  11.9  245.000000
2  1952.0  10.7  250.199997
3  1953.0  11.3  265.899994
4  1954.0  11.2  248.500000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;loadsas_2_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;stata-files&#34;&gt;Stata files&lt;/h3&gt;
&lt;p&gt;Stata: Statistical Analysis System&lt;br&gt;
Used for
File extension: &lt;code&gt;.dta&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import pandas
import pandas as pd

# Load Stata file into a pandas DataFrame: df
df = pd.read_stata(&#39;disarea.dta&#39;)

# Print the head of the DataFrame df
print(df.head())

# Plot histogram of one column of the DataFrame
pd.DataFrame.hist(df[[&#39;disa10&#39;]])
plt.xlabel(&#39;Extent of disease&#39;)
plt.ylabel(&#39;Number of countries&#39;)
plt.show()

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  wbcode               country  disa1  disa2  disa3  disa4  disa5  disa6  \
0    AFG           Afghanistan   0.00   0.00   0.76   0.73    0.0   0.00   
1    AGO                Angola   0.32   0.02   0.56   0.00    0.0   0.00   
2    ALB               Albania   0.00   0.00   0.02   0.00    0.0   0.00   
3    ARE  United Arab Emirates   0.00   0.00   0.00   0.00    0.0   0.00   
4    ARG             Argentina   0.00   0.24   0.24   0.00    0.0   0.23   

   disa7  disa8  ...  disa16  disa17  disa18  disa19  disa20  disa21  disa22  \
0   0.00    0.0  ...     0.0     0.0     0.0    0.00    0.00     0.0    0.00   
1   0.56    0.0  ...     0.0     0.4     0.0    0.61    0.00     0.0    0.99   
2   0.00    0.0  ...     0.0     0.0     0.0    0.00    0.00     0.0    0.00   
3   0.00    0.0  ...     0.0     0.0     0.0    0.00    0.00     0.0    0.00   
4   0.00    0.0  ...     0.0     0.0     0.0    0.00    0.05     0.0    0.00   

   disa23  disa24  disa25  
0    0.02    0.00    0.00  
1    0.98    0.61    0.00  
2    0.00    0.00    0.16  
3    0.00    0.00    0.00  
4    0.01    0.00    0.11  

[5 rows x 27 columns]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;loadsas_4_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Iterables with enumerate() and zip()</title>
      <link>http://othrif.github.io/technical_note/python/basics/iterators_enum_zip/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/iterators_enum_zip/</guid>
      <description>&lt;h3 id=&#34;using-enumerate&#34;&gt;Using &lt;code&gt;enumerate()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;enumerate()&lt;/code&gt; returns an enumerate object that produces a sequence of tuples, and each of the tuples is an index-value pair.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mutants = [&#39;charles xavier&#39;, 
            &#39;bobby drake&#39;, 
            &#39;kurt wagner&#39;, 
            &#39;max eisenhardt&#39;, 
            &#39;kitty pryde&#39;]

# Create a list of tuples
mutant_list = list(enumerate(mutants))
print(mutant_list)

# Unpack and print the tuple pairs
for index1,value1 in enumerate(mutants):
    print(index1, value1)

# Change the start index
for index2,value2 in enumerate(mutants, start=1):
    print(index2, value2)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[(0, &#39;charles xavier&#39;), (1, &#39;bobby drake&#39;), (2, &#39;kurt wagner&#39;), (3, &#39;max eisenhardt&#39;), (4, &#39;kitty pryde&#39;)]
0 charles xavier
1 bobby drake
2 kurt wagner
3 max eisenhardt
4 kitty pryde
1 charles xavier
2 bobby drake
3 kurt wagner
4 max eisenhardt
5 kitty pryde
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-zip&#34;&gt;Using &lt;code&gt;zip()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;takes any number of iterables and returns a zip object that is an iterator of tuples. If you wanted to print the values of a zip object, you can convert it into a list and then print it. Printing just a zip object will not return the values unless you unpack it first.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mutants=[&#39;charles xavier&#39;, &#39;bobby drake&#39;, &#39;kurt wagner&#39;, &#39;max eisenhardt&#39;, &#39;kitty pryde&#39;]
aliases=[&#39;prof x&#39;, &#39;iceman&#39;, &#39;nightcrawler&#39;, &#39;magneto&#39;, &#39;shadowcat&#39;]
powers=[&#39;telepathy&#39;, &#39;thermokinesis&#39;, &#39;teleportation&#39;, &#39;magnetokinesis&#39;, &#39;intangibility&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create a list of tuples
mutant_data = list(zip(mutants,aliases,powers))
print(mutant_data)

# Create a zip object using the three lists
mutant_zip = zip(mutants,aliases,powers)
print(mutant_zip)

# Unpack the zip object and print the tuple values
for value1,value2,value3 in mutant_zip:
    print(value1, value2, value3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[(&#39;charles xavier&#39;, &#39;prof x&#39;, &#39;telepathy&#39;), (&#39;bobby drake&#39;, &#39;iceman&#39;, &#39;thermokinesis&#39;), (&#39;kurt wagner&#39;, &#39;nightcrawler&#39;, &#39;teleportation&#39;), (&#39;max eisenhardt&#39;, &#39;magneto&#39;, &#39;magnetokinesis&#39;), (&#39;kitty pryde&#39;, &#39;shadowcat&#39;, &#39;intangibility&#39;)]
&amp;lt;zip object at 0x10ac88b88&amp;gt;
charles xavier prof x telepathy
bobby drake iceman thermokinesis
kurt wagner nightcrawler teleportation
max eisenhardt magneto magnetokinesis
kitty pryde shadowcat intangibility
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using--and-zip-to-unzip&#34;&gt;Using * and zip to &amp;lsquo;unzip&amp;rsquo;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt; unpacks an iterable such as a list or a tuple into positional arguments in a function call.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create a zip object from mutants and powers
z1 = zip(mutants,powers)

# Print the tuples in z1 by unpacking with *
print(*z1)

# Re-create a zip object from mutants and powers, as the print(*) exhausted all elements of z1
z1 = zip(mutants,powers)

# &#39;Unzip&#39; the tuples in z1 by unpacking with * and zip(): result1, result2
result1, result2 = zip(*z1)

# Check if unpacked tuples are equivalent to original tuples
print(result1 == mutants)
print(result2 == powers)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(&#39;charles xavier&#39;, &#39;telepathy&#39;) (&#39;bobby drake&#39;, &#39;thermokinesis&#39;) (&#39;kurt wagner&#39;, &#39;teleportation&#39;) (&#39;max eisenhardt&#39;, &#39;magnetokinesis&#39;) (&#39;kitty pryde&#39;, &#39;intangibility&#39;)
False
False
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Iterables with itr() and next()</title>
      <link>http://othrif.github.io/technical_note/python/basics/iterators/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/iterators/</guid>
      <description>&lt;h3 id=&#34;iterarble-and-iterator&#34;&gt;Iterarble and iterator&lt;/h3&gt;
&lt;p&gt;an iterable is an object that can return an iterator, while an iterator is an object that keeps state and produces the next value when you call &lt;code&gt;next()&lt;/code&gt; on it&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;flash = [&#39;jay garrick&#39;, &#39;barry allen&#39;, &#39;wally west&#39;, &#39;bart allen&#39;]

# Print each list item in flash using a for loop
for item in flash:
    print(&#39;for-loop:&#39;+item)


# Create an iterator for flash: superhero
superhero = iter(flash)

# Print each item from the iterator
print(&#39;next-iter:&#39;+next(superhero))
print(&#39;next-iter:&#39;+next(superhero))
print(&#39;next-iter:&#39;+next(superhero))
print(&#39;next-iter:&#39;+next(superhero))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;for-loop:jay garrick
for-loop:barry allen
for-loop:wally west
for-loop:bart allen
next-iter:jay garrick
next-iter:barry allen
next-iter:wally west
next-iter:bart allen
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;iterator-with-range&#34;&gt;Iterator with &lt;code&gt;range()&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;small_value = iter(range(3))

print(&#39;next-iter:&#39;+str(next(small_value)))
print(&#39;next-iter:&#39;+str(next(small_value)))
print(&#39;next-iter:&#39;+str(next(small_value)))

for i in range(3):
    print(&#39;for-loop:&#39;+str(i))


# Create an iterator for range(10 ** 100): googol
googol = iter(range(10 ** 100))

# Print the first 5 values from googol
print(&#39;googol:&#39;+str(next(googol)))
print(&#39;googol:&#39;+str(next(googol)))
print(&#39;googol:&#39;+str(next(googol)))
print(&#39;googol:&#39;+str(next(googol)))
print(&#39;googol:&#39;+str(next(googol)))

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;next-iter:0
next-iter:1
next-iter:2
for-loop:0
for-loop:1
for-loop:2
googol:0
googol:1
googol:2
googol:3
googol:4
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;functions-that-take-iterators-and-iterables-as-arguments&#34;&gt;Functions that take iterators and iterables as arguments&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;values = range(10,21)
print(values)


values_list = list(values)
print(values_list)


values_sum = sum(values)
print(values_sum)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;range(10, 21)
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
165
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Join strings</title>
      <link>http://othrif.github.io/technical_note/python/basics/join/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/join/</guid>
      <description>&lt;h3 id=&#34;basic-join&#34;&gt;Basic join&lt;/h3&gt;
&lt;p&gt;Syntax: &lt;code&gt;str.join(iterable)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = [&amp;quot;First&amp;quot;, &amp;quot;Second&amp;quot;, &amp;quot;Third&amp;quot;]
&#39;_&#39;.join(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;First_Second_Third&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;num = &#39;12345&#39;
&#39;-&#39;.join(num)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;1-2-3-4-5&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;let = &#39;abcdefg&#39;
&#39;.&#39;.join(let)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;a.b.c.d.e.f.g&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Lambda functions and map(), filter(), reduce()</title>
      <link>http://othrif.github.io/technical_note/python/basics/lambda/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/lambda/</guid>
      <description>&lt;h3 id=&#34;basic-syntax&#34;&gt;Basic syntax&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lambda arguments : &amp;lt;do something&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;myfunc = lambda a: a+&#39;!!!&#39;
myfunc(&#39;hello&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;hello!!!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;converting-a-function-to-lambda&#34;&gt;Converting a function to lambda&lt;/h3&gt;
&lt;p&gt;Compare the two functions and how &lt;code&gt;lambda&lt;/code&gt; is much more concise&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def echo_word_def(word1, echo):
    &amp;quot;&amp;quot;&amp;quot;Concatenate echo copies of word1.&amp;quot;&amp;quot;&amp;quot;
    words = word1 * echo
    return words
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;echo_word_lambda = (lambda word1, echo: word1*echo)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(echo_word_def(&#39;hey&#39;,5))
print(echo_word_lambda(&#39;hey&#39;,5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;heyheyheyheyhey
heyheyheyheyhey
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;map-and-lambda-functions&#34;&gt;&lt;code&gt;Map()&lt;/code&gt; and lambda functions&lt;/h3&gt;
&lt;p&gt;map() applies a function over an object, such as a list. The syntax follows &lt;code&gt; map(func, list)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nums = [2, 4, 6, 8, 10]

result = map(lambda a: a ** 2, nums)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in this example, a lambda function, which raises a value &lt;code&gt;a&lt;/code&gt; to the power of 2, is passed to &lt;code&gt;map()&lt;/code&gt; alongside a list of numbers, &lt;code&gt;nums&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list(result)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[4, 16, 36, 64, 100]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;filter-and-lambda-functions&#34;&gt;&lt;code&gt;Filter()&lt;/code&gt; and lambda functions&lt;/h3&gt;
&lt;p&gt;The function &lt;code&gt;filter()&lt;/code&gt; offers a way to filter out elements from a list that don&amp;rsquo;t satisfy certain criteria.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fellowship = [&#39;frodo&#39;, &#39;samwise&#39;, &#39;merry&#39;, &#39;pippin&#39;, &#39;aragorn&#39;, &#39;boromir&#39;, &#39;legolas&#39;, &#39;gimli&#39;, &#39;gandalf&#39;]
result = filter(lambda a: len(a)&amp;gt;6, fellowship)
result_list = list(result)
print(result_list)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;samwise&#39;, &#39;aragorn&#39;, &#39;boromir&#39;, &#39;legolas&#39;, &#39;gandalf&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;reduce-and-lambda-functions&#34;&gt;&lt;code&gt;Reduce()&lt;/code&gt; and lambda functions&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;reduce()&lt;/code&gt; function is useful for performing some computation on a list and, unlike &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;filter()&lt;/code&gt;, returns a single value as a result. To use reduce(), you must import it from the functools module.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import reduce 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;stark = [&#39;robb&#39;, &#39;sansa&#39;, &#39;arya&#39;, &#39;brandon&#39;, &#39;rickon&#39;]
result = reduce(lambda item1,item2: item1+item2 , stark)
print(result)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;robbsansaaryabrandonrickon
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Lists, Tuples</title>
      <link>http://othrif.github.io/technical_note/python/basics/lists/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/lists/</guid>
      <description>&lt;h3 id=&#34;lists&#34;&gt;Lists&lt;/h3&gt;
&lt;p&gt;Lists are mutable&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [&#39;Hello world!&#39;, &#39;banans&#39;, &#39;apples&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.append(&#39;add one more&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Hello world!&#39;, &#39;banans&#39;, &#39;apples&#39;, &#39;add one more&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.extend([&#39;another&#39;,&#39;even more&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Hello world!&#39;, &#39;banans&#39;, &#39;apples&#39;, &#39;add one more&#39;, &#39;another&#39;, &#39;even more&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;access-an-element&#34;&gt;Access an element&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;apples&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(my_list)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;list
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;subsetting-a-list&#34;&gt;Subsetting a list&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;list[inclusive:exluive]&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[1:3]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;banans&#39;, &#39;apples&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;del-element&#34;&gt;Del element&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Hello world!&#39;, &#39;banans&#39;, &#39;apples&#39;, &#39;add one more&#39;, &#39;another&#39;, &#39;even more&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;del(my_list[1])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Hello world!&#39;, &#39;apples&#39;, &#39;add one more&#39;, &#39;another&#39;, &#39;even more&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;copy-list-with-list&#34;&gt;Copy list with &lt;code&gt;list()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list1 = list0&lt;/code&gt; allows the list to point to the same memory area. Any changes to &lt;code&gt;list1&lt;/code&gt; will affect &lt;code&gt;list0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To copy &lt;code&gt;list()&lt;/code&gt; or &lt;code&gt;[:]&lt;/code&gt;, use the syntax: &lt;code&gt;list1=list(list0)&lt;/code&gt; or &lt;code&gt;list1=list0[:]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create list areas
areas = [11.25, 18.0, 20.0, 10.75, 9.50]
print(f&#39;before after: {areas}&#39;)

# Create areas_copy
areas_copy1 = areas
areas_copy2 = list(areas)
areas_copy3 = areas[:]

# Change areas_copy
areas_copy1[0] = 1.0
areas_copy2[0] = 2.0
areas_copy3[0] = 3.0

# Print areas
print(f&#39;areas after: {areas}&#39;)
print(f&#39;areas_copy1 after: {areas_copy1}&#39;)
print(f&#39;areas_copy2 after: {areas_copy2}&#39;)
print(f&#39;areas_copy3 after: {areas_copy3}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;before after: [11.25, 18.0, 20.0, 10.75, 9.5]
areas after: [1.0, 18.0, 20.0, 10.75, 9.5]
areas_copy1 after: [1.0, 18.0, 20.0, 10.75, 9.5]
areas_copy2 after: [2.0, 18.0, 20.0, 10.75, 9.5]
areas_copy3 after: [3.0, 18.0, 20.0, 10.75, 9.5]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;tuples&#34;&gt;Tuples&lt;/h3&gt;
&lt;p&gt;Tuples are immutable&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;t = (0,1,2,3,4)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;access-an-element-1&#34;&gt;Access an element&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;t[2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(t)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;special-cases&#34;&gt;Special cases&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;single = (1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(single)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;int
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;single = (1,)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(single)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;appending&#34;&gt;Appending&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo = ([&#39;test&#39;],)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;([&#39;test&#39;],)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo[0].append(&#39;another test&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;([&#39;test&#39;, &#39;another test&#39;],)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo[0].append(&#39;yet another test&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;([&#39;test&#39;, &#39;another test&#39;, &#39;yet another test&#39;],)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but this is not possible&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo[0] = [&#39;reset&#39;,&#39;can\&#39;t be done&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-34-e195864df4a2&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 galileo[0] = [&#39;reset&#39;,&#39;can\&#39;t be done&#39;]


TypeError: &#39;tuple&#39; object does not support item assignment
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;packing-and-unpacking&#34;&gt;Packing and unpacking&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;date = 6,5,2020
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(date)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;day,month,year = date
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;day={day}, month={month}, year={year}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;day=6, month=5, year=2020
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(day,month,year) = date
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;swap-variables-using-unpacking&#34;&gt;Swap variables using unpacking&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x,y = 1,2
x,y = y,x
print(f&#39;x={x}, y={y}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;x=2, y=1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;remainder&#34;&gt;Remainder&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;first, *rest = (1,2,3,4,5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;first={first} rest={rest}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;first=1 rest=[2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;first, *middle, last = (1,2,3,4,5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(middle)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;first={first} middle={middle} last={last}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;first=1 middle=[2, 3, 4] last=5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;first, *middle, last = [1,2,3,4,5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;first={first} middle={middle} last={last}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;first=1 middle=[2, 3, 4] last=5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a, *b, c = &#39;HELLOWORLD&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;E&#39;, &#39;L&#39;, &#39;L&#39;, &#39;O&#39;, &#39;W&#39;, &#39;O&#39;, &#39;R&#39;, &#39;L&#39;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Load data in chunks</title>
      <link>http://othrif.github.io/technical_note/python/basics/iterators_file/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/iterators_file/</guid>
      <description>&lt;h3 id=&#34;loading-data-in-chunks&#34;&gt;Loading data in chunks&lt;/h3&gt;
&lt;p&gt;the data we have to process reaches a size that is too much for a computer&amp;rsquo;s memory to handle. A solution to this is to process an entire data source chunk by chunk, instead of a single go all at once.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
counts_dict = {}
csv_url=&#39;../datasets/tweets.csv&#39;
pd.set_option(&#39;display.max_colwidth&#39;,-1)
# Iterate over the file chunk by chunk
for chunk in pd.read_csv(csv_url, chunksize=10):
    print(chunk[&#39;text&#39;])
    # Iterate over the column in DataFrame
    for entry in chunk[&#39;lang&#39;]:
        if entry in counts_dict.keys():
            counts_dict[entry] += 1
        else:
            counts_dict[entry] = 1

# Print the populated dictionary
print(counts_dict)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0    RT @bpolitics: .@krollbondrating&#39;s Christopher Whalen says Clinton is the weakest Dem candidate in 50 years https://t.co/pLk7rvoRSn https:/…
1    RT @HeidiAlpine: @dmartosko Cruz video found.....racing from the scene.... #cruzsexscandal https://t.co/zuAPZfQDk3                          
2    Njihuni me Zonjën Trump !!! | Ekskluzive https://t.co/4KmsQi47VD                                                                            
3    Your an idiot she shouldn&#39;t have tried to grab trump after the fact she&#39;s an idiot https://t.co/lpASyeNVpG                                  
4    RT @AlanLohner: The anti-American D.C. elites despise Trump for his America-first foreign policy. Trump threatens their gravy train. https:…
5    RT @BIackPplTweets: Young Donald trump meets his neighbor  https://t.co/RFlu17Z1eE                                                          
6    RT @trumpresearch: @WaitingInBagdad @thehill Trump supporters have selective amnisia.                                                       
7    RT @HouseCracka: 29,000+ PEOPLE WATCHING TRUMP LIVE ON ONE STREAM!!!\n\nhttps://t.co/7QCFz9ehNe                                             
8    RT @urfavandtrump: RT for Brendon Urie\nFav for Donald Trump https://t.co/PZ5vS94lOg                                                        
9    RT @trapgrampa: This is how I see #Trump every time he speaks. https://t.co/fYSiHNS0nT                                                      
Name: text, dtype: object
10    RT @trumpresearch: @WaitingInBagdad @thehill Trump supporters have selective amnisia.                                                        
11    RT @Pjw20161951: NO KIDDING: #SleazyDonald just attacked Scott Walker for NOT RAISING TAXES in WI! #LyinTrump\n#NeverTrump  #CruzCrew  https…
12    RT @urfavandtrump: RT for Brendon Urie\nFav for Donald Trump https://t.co/PZ5vS94lOg                                                         
13    RT @ggreenwald: The media spent all day claiming @SusanSarandon said she might vote for Trump. A total fabrication, but whatever... https:/… 
14    RT @Pjw20161951: NO KIDDING: #SleazyDonald just attacked Scott Walker for NOT RAISING TAXES in WI! #LyinTrump\n#NeverTrump  #CruzCrew  https…
15    RT @trapgrampa: This is how I see #Trump every time he speaks. https://t.co/fYSiHNS0nT                                                       
16    RT @mitchellvii: So let me get this straight.  Any reporter can assault Mr Trump at any time and Corey can do nothing?  Michelle is clearly… 
17    Your an idiot she shouldn&#39;t have tried to grab trump after the fact she&#39;s an idiot https://t.co/lpASyeNVpG                                   
18    RT @paulbenedict7: How #Trump Sacks RINO Strongholds by Hitting Positions Held by Dems and GOP https://t.co/D7ulnAJhis   #tcot #PJNET https… 
19    RT @DRUDGE_REPORT: VIDEO:  Trump emotional moment with Former Miss Wisconsin who has terminal illness... https://t.co/qt06aG9inT             
Name: text, dtype: object
20    #HillYes #ImWithHer #RollHillary @HillaryClinton  https://t.co/OwYXKIalyn                                                                   
21    RT @ggreenwald: The media spent all day claiming @SusanSarandon said she might vote for Trump. A total fabrication, but whatever... https:/…
22    RT @DennisApgar: Thank God I seen Trump at first stop in Wisconsin media doesn&#39;t know how great he is, advice watch live streaming https://…
23    RT @paulbenedict7: How #Trump Sacks RINO Strongholds by Hitting Positions Held by Dems and GOP https://t.co/D7ulnAJhis   #tcot #PJNET https…
24    RT @DRUDGE_REPORT: VIDEO:  Trump emotional moment with Former Miss Wisconsin who has terminal illness... https://t.co/qt06aG9inT            
25    RT @DennisApgar: Thank God I seen Trump at first stop in Wisconsin media doesn&#39;t know how great he is, advice watch live streaming https://…
26    RT @mitchellvii: So let me get this straight.  Any reporter can assault Mr Trump at any time and Corey can do nothing?  Michelle is clearly…
27    Trump won&#39;t do a yes ma&#39;am for this.  https://t.co/r3WkGZDjPH                                                                               
28    RT @sciam: Trump&#39;s idiosyncratic patterns of speech are why people tend either to love or hate him https://t.co/QXwquVgs3c https://t.co/P9N…
29    #HillYes #ImWithHer #RollHillary @HillaryClinton  https://t.co/OwYXKIalyn                                                                   
Name: text, dtype: object
30    RT @Norsu2: Nightmare WI poll for Ted Cruz has Kasich surging: Trump 29, Kasich 27, Cruz 25. https://t.co/lJsgbLYY1P #NeverTrump                
31    RT @thehill: WATCH: Protester pepper-sprayed point blank at Trump rally https://t.co/B5f65Al9ld https://t.co/skAfByXuQc                         
32    RT @sciam: Trump&#39;s idiosyncratic patterns of speech are why people tend either to love or hate him https://t.co/QXwquVgs3c https://t.co/P9N…    
33    RT @ggreenwald: The media spent all day claiming @SusanSarandon said she might vote for Trump. A total fabrication, but whatever... https:/…    
34    Opinion: The big story is -- Sanders https://t.co/9Z9ZVnZ1Zi                                                                                    
35    GOP speechwriter: By November, Ivanka will be voting for Clinton | TheHill https://t.co/tUT7LpEHak                                              
36    This dude must have some serious issues  https://t.co/ojYaDpnSoe                                                                                
37    RT @DebbieStout5: Wow! Last I checked it was just 12 points &amp;amp;amp; that wasn&#39;t more than a day ago. Oh boy Trump ppl might want to rethink🤔 http…
38    RT @tyleroakley: i&#39;m a messy bitch, but at least i&#39;m not voting for trump                                                                       
39    RT @vandives: Trump supporters r tired of justice NOT being served. There&#39;s no justice anymore. Hardworking Americans get screwed. That&#39;s n…    
Name: text, dtype: object
40    Opinion: The big story is -- Sanders https://t.co/9Z9ZVnZ1Zi                                                                                  
41    RT @AP: BREAKING: Trump vows to stand by campaign manager charged with battery, says he does not discard people.                              
42    It Cometh from the Pit. And Hath a Knout https://t.co/iyF5HPDJNU\n#Trump\n#Election2016 https://t.co/W4ZXQfUHi8                               
43    RT @AP: BREAKING: Trump vows to stand by campaign manager charged with battery, says he does not discard people.                              
44    @footlooseracer @hautedamn @z0mgItsHutch So much sadness and pure stupidity from the people who support Trump. Very sad.                      
45    RT @urfavandtrump: RT for Jerrie (Little Mix)\nFav for Donald Trump https://t.co/nEVxElW6iG                                                   
46    RT @urfavandtrump: RT for Jerrie (Little Mix)\nFav for Donald Trump https://t.co/nEVxElW6iG                                                   
47    PSA: @piersmorgan is a asshole. https://t.co/2Gjp2NPo0w                                                                                       
48    RT @NoahCRothman: When Walker was fighting for reforms, Trump was defending unions and collective bargaining privileges https://t.co/e1UWNN…  
49    RT @RedheadAndRight: Report: Secret Service Says Michelle Fields Touched Trump https://t.co/c5c2sD8VO2\n\nThis is the only article you will n…
Name: text, dtype: object
50    Me listening to DONALD TRUMP saying that he has no small hands ( allegedly ) https://t.co/LhUYdi8Vgf https://t.co/IwD9Lg84HY                  
51    RT @AIIAmericanGirI: VIDEO=&amp;amp;gt; Anti-Trump Protester SLUGS Elderly Trump Supporter in the Face\nhttps://t.co/GeEryMDuDY                       
52    RT @NoahCRothman: When Walker was fighting for reforms, Trump was defending unions and collective bargaining privileges https://t.co/e1UWNN…  
53    PSA: @piersmorgan is a asshole. https://t.co/2Gjp2NPo0w                                                                                       
54    RT @JusticeRanger1: @realDonaldTrump @Pudingtane @DanScavino @GOP @infowars @EricTrump \nURGENT PUBLIC TRUMP ALERT:\nCOVERT KILL MEANS https:…
55    RT @AIIAmericanGirI: VIDEO=&amp;amp;gt; Anti-Trump Protester SLUGS Elderly Trump Supporter in the Face\nhttps://t.co/GeEryMDuDY                       
56    Susan Sarandon Shares Interesting Opinion on Donald Trump https://t.co/Gjzkpr5mrH                                                             
57    RT @RedheadAndRight: Report: Secret Service Says Michelle Fields Touched Trump https://t.co/c5c2sD8VO2\n\nThis is the only article you will n…
58    @jbrading dude you are annoying af. Deion sanders fucking hates you guys.                                                                     
59    RT @JusticeRanger1: @realDonaldTrump @Pudingtane @DanScavino @GOP @infowars @EricTrump \nURGENT PUBLIC TRUMP ALERT:\nCOVERT KILL MEANS https:…
Name: text, dtype: object
60    RT @Schneider_CM: Trump says nobody had ever heard of executive orders before Obama started signing them. Never heard of the Emancipation P…
61    RT @RonBasler1: @DavidWhitDennis @realDonaldTrump @tedcruz \n\nCRUZ SCREWS HOOKERS\n\nCRUZ / CLINTON                                        
62    Susan Sarandon Shares Interesting Opinion on Donald Trump https://t.co/Gjzkpr5mrH                                                           
63    @realDonaldTrump Its too bad Cruz doesn&#39;t have enough brains to realize he&#39;s being led down the primrose lane to be neutered by the Elites!!
64    RT @DonaldsAngel: Former Ms. WI just said that she is terminally ill but because of Trump pageant, her 7 yr. old son has his college educat…
65    Photo: #Donald #Trump #Protest in #Milwaukee ahead of CNN GOP #Town #Hall with #Trump, Ted #Cruz, ... https://t.co/8NOguZUSCK               
66    RT @Schneider_CM: Trump says nobody had ever heard of executive orders before Obama started signing them. Never heard of the Emancipation P…
67    @jbrading dude you are annoying af. Deion sanders fucking hates you guys.                                                                   
68    RT @DonaldsAngel: Former Ms. WI just said that she is terminally ill but because of Trump pageant, her 7 yr. old son has his college educat…
69    Photo: #Donald #Trump #Protest in #Milwaukee ahead of CNN GOP #Town #Hall with #Trump, Ted #Cruz, ... https://t.co/8NOguZUSCK               
Name: text, dtype: object
70    RT @Dodarey: @DR8801 @SykesCharlie Charlie, let&#39;s see you get a straight &amp;quot;yes&amp;quot; or &amp;quot;no&amp;quot; answer from Cruz a/b being unfaithful to his wife @T… 
71    RT @RonBasler1: @DavidWhitDennis @realDonaldTrump @tedcruz \n\nCRUZ SCREWS HOOKERS\n\nCRUZ / CLINTON                                         
72    RT @RockCliffOne: Remember when the idea of a diabolical moron holding the world hostage was an idea for a funny movie? #Trump #GOP https:/… 
73    RT @HillaryClinton: &amp;quot;Every day, another Republican bemoans the rise of Donald Trump... but [he] didn’t come out of nowhere.&amp;quot; —Hillary\nhttps…
74    @realDonaldTrump @MELANIATRUMP Get Them Good Mr.Trump ,Great Picture of You and The First Lady                                               
75    @realDonaldTrump Its too bad Cruz doesn&#39;t have enough brains to realize he&#39;s being led down the primrose lane to be neutered by the Elites!! 
76    I just saw this. I&#39;m speechless.  https://t.co/cmUYxtrX0Y                                                                                    
77    RT @Dodarey: @DR8801 @SykesCharlie Charlie, let&#39;s see you get a straight &amp;quot;yes&amp;quot; or &amp;quot;no&amp;quot; answer from Cruz a/b being unfaithful to his wife @T… 
78    I just saw this. I&#39;m speechless.  https://t.co/cmUYxtrX0Y                                                                                    
79    Trump campaign chief charged with battery https://t.co/SpIukqj3Rb                                                                            
Name: text, dtype: object
80    RT @HillaryClinton: &amp;quot;Every day, another Republican bemoans the rise of Donald Trump... but [he] didn’t come out of nowhere.&amp;quot; —Hillary\nhttps…
81    @realDonaldTrump @MELANIATRUMP Get Them Good Mr.Trump ,Great Picture of You and The First Lady                                               
82    RT @RockCliffOne: Remember when the idea of a diabolical moron holding the world hostage was an idea for a funny movie? #Trump #GOP https:/… 
83    RT @immigrant4trump: @immigrant4trump msm, cable news attacking trump all day, from 8am to 10pm today, then the reruns come on, repeating t… 
84    @ErinBurnett @Bakari_Sellers @benfergusonshow @BernieSanders Again @CNN allows Jeff Lord far too much time to spin wacky Trump.              
85    RT @immigrant4trump: @immigrant4trump msm, cable news attacking trump all day, from 8am to 10pm today, then the reruns come on, repeating t… 
86    @ErinBurnett @Bakari_Sellers @benfergusonshow @BernieSanders Again @CNN allows Jeff Lord far too much time to spin wacky Trump.              
87    @noreallyhowcome @TVineberg Learn about Bernie https://t.co/bhaUnQ4jrr Learn about Hillary https://t.co/eAbfWrAG4G https://t.co/W53JJCkDFv   
88    RT @GlendaJazzey: Donald Trump’s Campaign Financing Dodge, @rrotunda https://t.co/L8flI4lswG via @VerdictJustia                              
89    Trump who prides himself on the ability to spot a good deal missed out on a big one in Louisiana. C&#39;est la vie.  https://t.co/MZrvWwTWZV     
Name: text, dtype: object
90    Judicial Watch: Obama Administration Withholds Draft Whitewater Indictment of Hillary Clinton https://t.co/EuW9J1WVm1                       
91    I don&#39;t understand how anyone can support a hateful person like @realDonaldTrump  https://t.co/BbYMxRWadC                                   
92    RT @TUSK81: LOUDER FOR THE PEOPLE IN THE BACK https://t.co/hlPVyNLXzx                                                                       
93    RT @loopzoop: Well...put it back https://t.co/8Yb7BDT5VM                                                                                    
94    Donald Trump: Victim. https://t.co/qvK17ZnUTZ                                                                                               
95    RT @claytoncubitt: Stop asking Bernie supporters if they’ll vote for Hillary against Trump. We got a plan to beat Trump already. Called Ber…
96    Kasich is gonna fuck this up for Ted Cruz  https://t.co/JYYok5qx7R                                                                          
97    RT @akaMaude13: Seriously can&#39;t make this up. What a joke. #NeverTrump  https://t.co/JkTx6mdRgC                                             
98    Kasich is gonna fuck this up for Ted Cruz  https://t.co/JYYok5qx7R                                                                          
99    @marklevinshow try reporting this truth. https://t.co/z76fZzCRK3                                                                            
Name: text, dtype: object
{&#39;en&#39;: 97, &#39;et&#39;: 1, &#39;und&#39;: 2}


/Users/othmanerifki/Library/Python/3.7/lib/python/site-packages/ipykernel_launcher.py:4: FutureWarning: Passing a negative integer is deprecated in version 1.0 and will not be supported in future version. Instead, use None to not limit the column width.
  after removing the cwd from sys.path.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Loading a pickled file</title>
      <link>http://othrif.github.io/technical_note/python/basics/loadpickle/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/loadpickle/</guid>
      <description>&lt;h3 id=&#34;concept&#34;&gt;Concept&lt;/h3&gt;
&lt;p&gt;if you merely want to be able to import them into Python, you can serialize them. All this means is converting the object into a sequence of bytes, or a bytestream.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import pickle package
import pickle

# Open pickle file and load data: d
with open(&#39;data.pkl&#39;, &#39;rb&#39;) as file:
    d = pickle.load(file)

# Print d
print(d)

# Print datatype of d
print(type(d))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

FileNotFoundError                         Traceback (most recent call last)

&amp;lt;ipython-input-1-7b211b6854e7&amp;gt; in &amp;lt;module&amp;gt;
      3 
      4 # Open pickle file and load data: d
----&amp;gt; 5 with open(&#39;data.pkl&#39;, &#39;rb&#39;) as file:
      6     d = pickle.load(file)
      7 


FileNotFoundError: [Errno 2] No such file or directory: &#39;data.pkl&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Loading an excel file</title>
      <link>http://othrif.github.io/technical_note/python/basics/loadexcel/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/loadexcel/</guid>
      <description>&lt;h3 id=&#34;concept&#34;&gt;Concept&lt;/h3&gt;
&lt;p&gt;use pandas to import Excel spreadsheets and how to list the names of the sheets in any loaded .xlsx file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import pandas
import pandas as pd

# Assign spreadsheet filename: file
file = &#39;battledeath.xlsx&#39;

# Load spreadsheet: xls
xls = pd.ExcelFile(file)

# Print sheet names
print(xls.sheet_names)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;2002&#39;, &#39;2004&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Load a sheet into a DataFrame by name: df1
df1 = xls.parse(&#39;2004&#39;)
print(df1.head())

# Load a sheet into a DataFrame by index: df2
df2 = xls.parse(0)
print(df2.head())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  War(country)      2004
0  Afghanistan  9.451028
1      Albania  0.130354
2      Algeria  3.407277
3      Andorra  0.000000
4       Angola  2.597931
  War, age-adjusted mortality due to       2002
0                        Afghanistan  36.083990
1                            Albania   0.128908
2                            Algeria  18.314120
3                            Andorra   0.000000
4                             Angola  18.964560
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;customize-the-spreadsheet-import&#34;&gt;Customize the spreadsheet import&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Parse the first sheet and rename the columns: df1, skip first row and rename columns
df1 = xls.parse(0, skiprows=[0], names=[&#39;Country&#39;,&#39;AAM due to War (2002)&#39;])

# Print the head of the DataFrame df1
print(df1.head())

# Parse the first column of the second sheet and rename the column: df2
df2 = xls.parse(1, usecols=[0], skiprows=[0], names=[&#39;Country&#39;])

# Print the head of the DataFrame df2
print(df2.head())

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;               Country  AAM due to War (2002)
0              Albania               0.128908
1              Algeria              18.314120
2              Andorra               0.000000
3               Angola              18.964560
4  Antigua and Barbuda               0.000000
               Country
0              Albania
1              Algeria
2              Andorra
3               Angola
4  Antigua and Barbuda
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Manipulation, indexing, and slicing</title>
      <link>http://othrif.github.io/technical_note/python/basics/strings/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/strings/</guid>
      <description>&lt;h3 id=&#34;access-elements&#34;&gt;Access elements&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt = &#39;Hello world!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;H&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[4]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;o&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;substrings&#34;&gt;Substrings&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[0:5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Hello&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;backwards&#34;&gt;Backwards&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[-1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[-5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;o&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;skip-over&#34;&gt;Skip over&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[::2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Hlowrd&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;reverse&#34;&gt;Reverse&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[::-1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;!dlrow olleH&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;concatenation&#34;&gt;Concatenation&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;language = &#39;Python&#39;
language + &#39; is great!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Python is great!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;repetition&#34;&gt;Repetition&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;.&#39;*100
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;....................................................................................................&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;100*&#39;.&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;....................................................................................................&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;length&#34;&gt;Length&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(language)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;escape-characters&#34;&gt;Escape Characters&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;\N{GREEK CAPITAL LETTER DELTA}&#39;)
print(&#39;\u0394&#39;) # unicode 16-bit hex
print(&#39;\U00000394&#39;)# unicode 32-bit hex
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Δ
Δ
Δ
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt = &#39;Hello World&#39;
print(f&#39;Particular element: {txt[0]}&#39;)
print(f&#39;substring: {txt[0:5]}&#39;)
print(f&#39;substring: {txt[:5]}&#39;)
print(f&#39;substring: {txt[0:-6]}&#39;)
print(f&#39;substring: {txt[6:]}&#39;)
print(f&#39;skip 2: {txt[::2]}&#39;)
print(f&#39;skip 3: {txt[::3]}&#39;)
print(f&#39;Invert order: {txt[::-1]}&#39;)
print(f&#39;String length: {len(txt)}&#39;)
print(f&#39;Repetition: {&amp;quot;.&amp;quot;*10}&#39;)
print(f&#39;Concatenation: {txt+&amp;quot; from Hamburg!&amp;quot;}&#39;)
print(f&#39;Escape characters...&#39;)
print(f&#39;few examples in this line: \&#39;\&amp;quot;123\b \thorizontal&#39;)
print(f&#39;1234567 carriage return \rXXX&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Particular element: H
substring: Hello
substring: Hello
substring: Hello
substring: World
skip 2: HloWrd
skip 3: HlWl
Invert order: dlroW olleH
String length: 11
Repetition: ..........
Concatenation: Hello World from Hamburg!
Escape characters...
few examples in this line: &#39;&amp;quot;12 	horizontal
XXX4567 carriage return 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;strings-are-immutable&#34;&gt;Strings are immutable&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;language[9]=-1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-45-4d8be7846d5d&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 language[9]=-1


TypeError: &#39;str&#39; object does not support item assignment
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you cannot change the values inside of string&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;~1


&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;-2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Method belonging to a class object</title>
      <link>http://othrif.github.io/technical_note/python/basics/class_method/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/class_method/</guid>
      <description>&lt;h1 id=&#34;working-with-class-and-methods&#34;&gt;Working with Class and methods&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Vehicle:
  def __init__(self,color):
    self.color=color
  def start(self):
    print(&amp;quot;Starting engine&amp;quot;)
  def showcolor(self):
    print(f&amp;quot;I am {self.color}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;car=Vehicle(&#39;black&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;car.start()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Starting engine
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;car.showcolor()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;I am black
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyCounter:
    &amp;quot;&amp;quot;&amp;quot;Here is the doc string!&amp;quot;&amp;quot;&amp;quot;
    def __init__(self, n=10):
        self.count = n
        
    def set_count(self,n):
        print()

me = MyCounter()
me.set_count(10)
print(me.count)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;10
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Modifying variables outside local scope: global, nonlocal</title>
      <link>http://othrif.github.io/technical_note/python/basics/function_scope/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/function_scope/</guid>
      <description>&lt;h3 id=&#34;global&#34;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Sometimes your functions will need to modify a variable that is outside of the local scope of that function. While it&amp;rsquo;s generally not best practice to do so, it&amp;rsquo;s still good to know-how in case you need to do it. Update these functions so they can modify variables that would usually be outside of their scope.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;call_count = 0

def my_function():
  # Use a keyword that lets us update call_count 
  global call_count
  call_count += 1
  
  print(&amp;quot;You&#39;ve called my_function() {} times!&amp;quot;.format(
    call_count
  ))
  
for _ in range(20):
  my_function()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;You&#39;ve called my_function() 1 times!
You&#39;ve called my_function() 2 times!
You&#39;ve called my_function() 3 times!
You&#39;ve called my_function() 4 times!
You&#39;ve called my_function() 5 times!
You&#39;ve called my_function() 6 times!
You&#39;ve called my_function() 7 times!
You&#39;ve called my_function() 8 times!
You&#39;ve called my_function() 9 times!
You&#39;ve called my_function() 10 times!
You&#39;ve called my_function() 11 times!
You&#39;ve called my_function() 12 times!
You&#39;ve called my_function() 13 times!
You&#39;ve called my_function() 14 times!
You&#39;ve called my_function() 15 times!
You&#39;ve called my_function() 16 times!
You&#39;ve called my_function() 17 times!
You&#39;ve called my_function() 18 times!
You&#39;ve called my_function() 19 times!
You&#39;ve called my_function() 20 times!
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;nonlocal&#34;&gt;&lt;code&gt;nonlocal&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def read_files():
  file_contents = None
  
  def save_contents(filename):
    # Add a keyword that lets us modify file_contents
    nonlocal file_contents
    if file_contents is None:
      file_contents = []
    with open(filename) as fin:
      file_contents.append(fin.read())
      
  for filename in [&#39;1984.txt&#39;, &#39;MobyDick.txt&#39;, &#39;CatsEye.txt&#39;]:
    save_contents(filename)
    
  return file_contents
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Nested functions, keyword nonlocal</title>
      <link>http://othrif.github.io/technical_note/python/basics/nested/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/nested/</guid>
      <description>&lt;h3 id=&#34;nested-function&#34;&gt;Nested function&lt;/h3&gt;
&lt;p&gt;To avoid writing out the same computations within functions repeatedly.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def three_shouts(word1, word2, word3):
    &amp;quot;&amp;quot;&amp;quot;Returns a tuple of strings
    concatenated with &#39;!!!&#39;.&amp;quot;&amp;quot;&amp;quot;

    # Define inner
    def inner(word):
        &amp;quot;&amp;quot;&amp;quot;Returns a string concatenated with &#39;!!!&#39;.&amp;quot;&amp;quot;&amp;quot;
        return word + &#39;!!!&#39;

    # Return a tuple of strings
    return (inner(word1), inner(word2), inner(word3))

print(three_shouts(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(&#39;a!!!&#39;, &#39;b!!!&#39;, &#39;c!!!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;closure&#34;&gt;Closure&lt;/h3&gt;
&lt;p&gt;The nested or inner function remembers the state of its enclosing scope when called. Thus, anything defined locally in the enclosing scope is available to the inner function even when the outer function has finished execution.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def echo(n):
    &amp;quot;&amp;quot;&amp;quot;Return the inner_echo function.&amp;quot;&amp;quot;&amp;quot;

    def inner_echo(word1):
        &amp;quot;&amp;quot;&amp;quot;Concatenate n copies of word1.&amp;quot;&amp;quot;&amp;quot;
        echo_word = word1 * n
        return echo_word

    return inner_echo

# Call echo: twice
twice = echo(2)

# Call echo: thrice
thrice = echo(3)

# Call twice() and thrice() then print
print(twice(&#39;hello&#39;), thrice(&#39;hello&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;hellohello hellohellohello
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;keyword-nonlocal&#34;&gt;Keyword &lt;code&gt;nonlocal&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;nonlocal within a nested function alters the value of a variable defined in the enclosing scope&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Define echo_shout()
def echo_shout(word):
    &amp;quot;&amp;quot;&amp;quot;Change the value of a nonlocal variable&amp;quot;&amp;quot;&amp;quot;
    
    # Concatenate word with itself: echo_word
    echo_word = word+word
    
    # Print echo_word
    print(echo_word)
    
    # Define inner function shout()
    def shout():
        &amp;quot;&amp;quot;&amp;quot;Alter a variable in the enclosing scope&amp;quot;&amp;quot;&amp;quot;    
        # Use echo_word in nonlocal scope
        nonlocal echo_word
        
        # Change echo_word to echo_word concatenated with &#39;!!!&#39;
        echo_word = word
    
    # Call function shout()
    shout()
    
    # Print echo_word
    print(echo_word)

# Call function echo_shout() with argument &#39;hello&#39;
echo_shout(&#39;hello&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;hellohello
hello
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Operators</title>
      <link>http://othrif.github.io/technical_note/python/basics/operators/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/operators/</guid>
      <description>&lt;h3 id=&#34;bitwise-operation&#34;&gt;Bitwise operation&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x=3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(bin(x))
print(bin(~x))
~x # = -(x+1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b11
-0b100





-4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(bin(6))
print(bin(3))
print(bin(6 | 3))
6 | 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b110
0b11
0b111





7
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;bitwise-xor&#34;&gt;Bitwise XOR&lt;/h3&gt;
&lt;p&gt;each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(bin(6))
print(bin(3))
print(bin(6 ^ 3))
6 ^ 3

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b110
0b11
0b101





5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;use XOR as a short-cut to setting the value of a register to zero&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;6 ^ 6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;shift-operators&#34;&gt;Shift operators&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(bin(1))
print(bin(1 &amp;lt;&amp;lt; 5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b1
0b100000
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(bin(5))
print(bin(5 &amp;lt;&amp;lt; 1))
print(5 &amp;lt;&amp;lt; 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b101
0b1010
10
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(bin(2))
print(bin(2 &amp;lt;&amp;lt; 3))
print(2 &amp;lt;&amp;lt; 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b10
0b10000
16
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Overload comparison operators</title>
      <link>http://othrif.github.io/technical_note/python/basics/overload_eq/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/overload_eq/</guid>
      <description>&lt;h3 id=&#34;overloading-equality&#34;&gt;Overloading equality&lt;/h3&gt;
&lt;p&gt;When comparing two objects of a custom class using &lt;code&gt;==&lt;/code&gt;, Python by default compares just the object references, not the data contained in the objects. To override this behavior, the class can implement the special &lt;code&gt;__eq__()&lt;/code&gt; method, which accepts two arguments &amp;ndash; the objects to be compared &amp;ndash; and returns True or False. This method will be implicitly called when two objects are compared.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class BankAccount:
    def __init__(self, number, balance=0):
        self.balance = balance
        self.number = number
      
    def withdraw(self, amount):
        self.balance -= amount 
    
    # Define __eq__ that returns True if the number attributes are equal 
    def __eq__ (self, other):
        if type(self) == type(other):
            return (self.number == other.number)
        else:
            return False

# Create accounts and compare them       
acct1 = BankAccount(123, 1000)
acct2 = BankAccount(123, 1000)
acct3 = BankAccount(456, 1000)
print(acct1 == acct2)
print(acct1 == acct3)
    
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
False
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Overload comparison operators</title>
      <link>http://othrif.github.io/technical_note/python/basics/overload_repr/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/overload_repr/</guid>
      <description>&lt;h3 id=&#34;string-representation-of-objects&#34;&gt;String representation of objects&lt;/h3&gt;
&lt;p&gt;There are two special methods in Python that return a string representation of an object. &lt;code&gt;__str__()&lt;/code&gt; is called when you use print() or str() on an object, and &lt;code&gt;__repr__()&lt;/code&gt; is called when you use &lt;code&gt;repr()&lt;/code&gt; on an object, print the object in the console without calling print(), or instead of &lt;code&gt;__str__()&lt;/code&gt; if &lt;code&gt;__str__()&lt;/code&gt; is not defined.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__str__()&lt;/code&gt; is supposed to provide a &amp;ldquo;user-friendly&amp;rdquo; output describing an object, and &lt;code&gt;__repr__()&lt;/code&gt; should return the expression that, when evaluated, will return the same object, ensuring the reproducibility of your code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Employee:
    def __init__(self, name, salary=30000):
        self.name, self.salary = name, salary
      
    def __str__(self):
        s = &amp;quot;Employee name: {name}\nEmployee salary: {salary}&amp;quot;.format(name=self.name, salary=self.salary)      
        return s
      
    # Add the __repr__method  
    def __repr__(self):
        emp_repr = f&#39;Employee(&amp;quot;{self.name}&amp;quot;,{self.salary})&#39;
        return emp_repr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Employee name: Amar Howard
Employee salary: 30000
Employee(&amp;quot;Carolyn Ramirez&amp;quot;,35000)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;emp1 = Employee(&amp;quot;Amar Howard&amp;quot;, 30000)
print(emp1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Employee name: Amar Howard
Employee salary: 30000
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;emp2 = Employee(&amp;quot;Carolyn Ramirez&amp;quot;, 35000)
print(repr(emp2))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Employee(&amp;quot;Carolyn Ramirez&amp;quot;,35000)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Parsing command line options</title>
      <link>http://othrif.github.io/technical_note/python/basics/parse_commandline/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/parse_commandline/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import argparse

parser = argparse.ArgumentParser(description=&#39;Program to analyze something.&#39;)
parser.add_argument(dest=&#39;filenames&#39;, metavar=&#39;filename&#39;, nargs=&#39;*&#39;)
parser.add_argument(&#39;-i&#39;, &#39;--input&#39;, metavar=&#39;input_file&#39;, required=False, dest=&#39;input_file&#39;, action=&#39;store&#39;, default=&#39;./input/dummy.csv&#39;, help=&#39;Input csv file&#39;)
parser.add_argument(&#39;-o&#39;, &#39;--output&#39;, metavar=&#39;output_file&#39;, required=False, dest=&#39;output_file&#39;, action=&#39;store&#39;, default=&#39;./output/out_dummy.csv&#39;, help=&#39;Output csv file with results&#39;)
parser.add_argument(&#39;--choice&#39;, dest=&#39;mychoice&#39;, action=&#39;store&#39;, choices=&#39;{&#39;slow&#39;,&#39;fast&#39;}&#39;, default=&#39;slow&#39;, help=&#39;my speed choice&#39;)
parser.add_argument(&#39;-p&#39;, &#39;--pat&#39;, metavar=&#39;pattern&#39;, required=True, dest=&#39;mychoice&#39;, action=&#39;append&#39;, help=&#39;can append to the list of arguments here&#39;)
parser.add_argument(&#39;-v&#39;, &#39;--verbose&#39;, dest=&#39;verbose&#39;, action=&#39;store_true&#39;, help=&#39;Verbose mode&#39;)
args = parser.parse_args()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Pass arguments to decorators </title>
      <link>http://othrif.github.io/technical_note/python/basics/arguments_decorator/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/arguments_decorator/</guid>
      <description>&lt;h3 id=&#34;pass-argument-to-decorator&#34;&gt;Pass argument to decorator&lt;/h3&gt;
&lt;p&gt;You cannot pass arguments to decorator, since it is only supposed to take-in a function to be decorated as an argument. Instead, you created a function that returns a decorator. Then the &lt;code&gt;@&lt;/code&gt; is applied to the decorator returned by the function with an argument. See below for an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def run_n_times(n):
  &amp;quot;&amp;quot;&amp;quot;Define and return a decorator&amp;quot;&amp;quot;&amp;quot;
  def decorator(func):
    def wrapper(*args, **kwargs):
      for i in range(n):
        func(*args, **kwargs)
    return wrapper
  return decorator
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@run_n_times(5)
def multiply(a,b):
    print(a*b)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;multiply(2,4)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;8
8
8
8
8
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Polymorphysm methods</title>
      <link>http://othrif.github.io/technical_note/python/basics/polymorphism/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/polymorphism/</guid>
      <description>&lt;h3 id=&#34;polymorphism-and-instances&#34;&gt;Polymorphism and instances&lt;/h3&gt;
&lt;p&gt;Polymorphism ensures that the exact method called is determined dynamically based on the instance.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Parent:
    def talk(self):
        print(&amp;quot;Parent talking!&amp;quot;)     

class Child(Parent):
    def talk(self):
        print(&amp;quot;Child talking!&amp;quot;)


class TalkativeChild(Parent):
    def talk(self):
        print(&amp;quot;TalkativeChild talking!&amp;quot;)
        Parent.talk(self)


p, c, tc = Parent(), Child(), TalkativeChild()

for obj in (p, c, tc):
    obj.talk()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Parent talking!
Parent talking!
TalkativeChild talking!
Parent talking!
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;liskov-substitution-principal&#34;&gt;Liskov Substitution Principal&lt;/h3&gt;
&lt;p&gt;the substitution principle requires the substitution to preserve the oversall state of the program.&lt;/p&gt;
&lt;h4 id=&#34;violations-of-lsp-square-rectangle-problem&#34;&gt;Violations of LSP: Square-Rectangle problem&lt;/h4&gt;
&lt;p&gt;it seems like you should be able to define a class Rectangle, with attributes h and w (for height and width), and then define a class Square that inherits from the Rectangle. After all, a square &amp;ldquo;is-a&amp;rdquo; rectangle!&lt;/p&gt;
&lt;p&gt;Unfortunately, this intuition doesn&amp;rsquo;t apply to object-oriented design.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Define a Rectangle class
class Rectangle:
    def __init__(self, h, w):
      self.h, self.w = h, w

# Define a Square class
class Square(Rectangle):
    def __init__(self, w):
      self.h, self.w = w, w  

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Print statements</title>
      <link>http://othrif.github.io/technical_note/python/basics/print/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/print/</guid>
      <description>&lt;h3 id=&#34;simple-printing&#34;&gt;Simple printing&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;Printing example!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Printing example!
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;f-string-formatting&#34;&gt;f-string formatting:&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f &#39; &amp;lt;text&amp;gt; { &amp;lt;expression&amp;gt; &amp;lt;optional !s, !r, or !a&amp;gt; &amp;lt;optional : format specifier&amp;gt; } &amp;lt;text&amp;gt; ... &#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where &lt;code&gt;&amp;lt;optional !s, !r, or !a&amp;gt;&lt;/code&gt; mean &lt;code&gt;!s (str), !r (repr), and !a (ascii)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import datetime
name = &#39;Othmane&#39;
age = 30
anniversary = datetime.date(1989, 2, 6)
print(f&#39;My name is {name.lower()}, my age next year is {age+1}, my anniversary is {anniversary:%A, %B %d, %Y}.&#39;)
print(f&#39;He said his name is {name!r}.&#39;) # !r for repr
print(r&#39;Raw output: /Users/othmanerifki&#39;) # r for raw output
message = (
    f&#39;Hi {name}.&#39;
    f&#39;Your age is {age}.&#39;
)
print(message)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;In lower case:  othmane
My name is othmane, my age next year is 31, my anniversary is Monday, February 06, 1989.
He said his name is &#39;Othmane&#39;.
Raw output: /Users/othmanerifki
Hi Othmane.Your age is 30.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;quotation-braces&#34;&gt;Quotation, braces:&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;Using quotation {name}.&#39;)
print(f&#39;Using quotation &amp;quot;{name}&amp;quot;.&#39;)
print(f&#39;Using quotation \&#39;{name}\&#39;.&#39;)
print(f&#39;Without braces {74}&#39;)
print(f&#39;With braces {{74}}&#39;)
print(f&#39;to show more {{{{74}}}}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Using quotation Othmane.
Using quotation &amp;quot;Othmane&amp;quot;.
Using quotation &#39;Othmane&#39;.
Without braces 74
With braces {74}
to show more {{74}}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;number-formatting&#34;&gt;Number formatting&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;python f&#39;{value:{width}.{precision}&amp;lt;type&amp;gt;}&#39;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;type&amp;gt;&lt;/code&gt;: s(string), f(float), d(decimal), x(hex), X(HEX), e(exponent scientific notation), E(same as e with &amp;lsquo;E&amp;rsquo;), g(general, it rounds and format to scientific or fixed decimals), G(same as g but E), %(x100 and percent sign)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;weight = 83.1
print(f&#39;With float is {weight:.2f}kg&#39;)
print(f&#39;With percentage is {20/100:.2%}&#39;)
print(f&#39;With scientific notation is {10**-6:.2E}&#39;)
print(f&#39;With general notation is {10**-6:g}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;With float is 83.10kg
With percentage is 20.00%
With scientific notation is 1.00E-06
With general notation is 1e-06
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;formatting-columns-with-text&#34;&gt;Formatting columns with text&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;some_number=23
some_other_number = 2.23432
print(f&#39;{&amp;quot;d1=0:&amp;quot;:&amp;lt;20} limit = {some_number:.3f} \timpact = {some_other_number:.3%}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;d1=0:                limit = 23.000 	impact = 223.432%
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;casting&#34;&gt;Casting&lt;/h3&gt;
&lt;p&gt;Same as above, not related to printing but gives a good illustration&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x=&amp;quot;10&amp;quot;
y=&amp;quot;7.1&amp;quot;
print(f&#39;Test with x+y where x={x}, y={y}&#39;)
print(f&#39;No casting: x+y={x+y}&#39;)
print(f&#39;Casting to float: x+y={float(x)+float(y)}&#39;)
print(f&#39;Casting to int: x+y={int(x)+int(float(y))}&#39;) # int(7.1) give error
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Test with x+y where x=10, y=7.1
No casting: x+y=107.1
Casting to float: x+y=17.1
Casting to int: x+y=17
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python 3 in MacOS</title>
      <link>http://othrif.github.io/technical_note/python/basics/macos_env/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/macos_env/</guid>
      <description>&lt;h3 id=&#34;change-python-to-point-to-python3-by-default&#34;&gt;Change python to point to python3 by default&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls -l /usr/local/bin/python*
ln -s -f /usr/local/bin/python3.7 /usr/local/bin/python
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;which-python-version&#34;&gt;Which Python version&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -V
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;install-package&#34;&gt;Install package&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install SomePackage --upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;upgrade-package&#34;&gt;Upgrade package&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install SomePackage --upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;main-packages-used&#34;&gt;Main packages used&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install numpy
pip install scipy
pip install scikit-learn
pip install matplotlib
pip install pandas
pip install jupyter notebook
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python classes</title>
      <link>http://othrif.github.io/technical_note/python/basics/classes/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/classes/</guid>
      <description>&lt;h3 id=&#34;self-in-python-class&#34;&gt;Self in Python class&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class car(): 
      
    # init method or constructor 
    def __init__(self, model, color): 
        self.model = model 
        self.color = color 
          
    def show(self): 
        print(&amp;quot;Model is&amp;quot;, self.model ) 
        print(&amp;quot;color is&amp;quot;, self.color ) 
          
# both objects have different self which  
# contain their attributes 
audi = car(&amp;quot;audi a4&amp;quot;, &amp;quot;blue&amp;quot;) 
ferrari = car(&amp;quot;ferrari 488&amp;quot;, &amp;quot;green&amp;quot;) 
  
audi.show()     # same output as car.show(audi) 
ferrari.show()  # same output as car.show(ferrari) 
  
# Behind the scene, in every instance method  
# call, python sends the instances also with 
# that method call like car.show(audi)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Model is audi a4
color is blue
Model is ferrari 488
color is green
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python conventions</title>
      <link>http://othrif.github.io/technical_note/python/basics/conventions/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/conventions/</guid>
      <description>&lt;h3 id=&#34;import-packages-and-modules&#34;&gt;Import packages and modules&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Read and write a file</title>
      <link>http://othrif.github.io/technical_note/python/basics/read_write_file/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/read_write_file/</guid>
      <description>&lt;h3 id=&#34;read-a-file&#34;&gt;Read a file&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Open &amp;quot;alice.txt&amp;quot; and assign the file to &amp;quot;file&amp;quot;
with open(&#39;alice.txt&#39;) as file:
  text = file.read()

print(text)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;this is alice.txt counting how many CATS i have. yes i said cAts . Not just one cat , but many catS !
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Same line commands</title>
      <link>http://othrif.github.io/technical_note/python/basics/samelinecommand/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/samelinecommand/</guid>
      <description>&lt;h3 id=&#34;print-in-same-line-with-&#34;&gt;Print in same line with &lt;code&gt;;&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Same line
command1; command2

# Separate lines
command1
command2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;hello&#39;); print(&#39;again&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;hello
again
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Splitting strings</title>
      <link>http://othrif.github.io/technical_note/python/basics/splitting/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/splitting/</guid>
      <description>&lt;h3 id=&#34;basic-splitting&#34;&gt;Basic splitting&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str = &amp;quot;I am playing with;##9Strings () while testing \n how these randome ## chE@sracters worK;\nhere\\right ## there&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;splitseperatormaxsplitpositions&#34;&gt;split(seperator,maxsplit=positions)&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.split()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I&#39;,
 &#39;am&#39;,
 &#39;playing&#39;,
 &#39;with;##9Strings&#39;,
 &#39;()&#39;,
 &#39;while&#39;,
 &#39;testing&#39;,
 &#39;how&#39;,
 &#39;these&#39;,
 &#39;randome&#39;,
 &#39;##&#39;,
 &#39;chE@sracters&#39;,
 &#39;worK;here\\right&#39;,
 &#39;##&#39;,
 &#39;there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.split(&#39;##&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;&#39;,
 &#39;9Strings () while testing \n how these randome &#39;,
 &#39; chE@sracters worK;here\\right &#39;,
 &#39; there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.split(&#39;##&#39;,2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;&#39;,
 &#39;9Strings () while testing \n how these randome &#39;,
 &#39; chE@sracters worK;here\\right ## there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.split(&#39;##&#39;,maxsplit=2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;&#39;,
 &#39;9Strings () while testing \n how these randome &#39;,
 &#39; chE@sracters worK;here\\right ## there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;rsplitseperatormaxsplitpositions&#34;&gt;rsplit(seperator,maxsplit=positions)&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.rsplit(&#39;##&#39;,maxsplit=2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;##9Strings () while testing \n how these randome &#39;,
 &#39; chE@sracters worK;here\\right &#39;,
 &#39; there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;consecutive-delimiters&#34;&gt;Consecutive delimiters&lt;/h4&gt;
&lt;p&gt;Consecutive delimiters give empty strings&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.rsplit(&#39;#&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;&#39;,
 &#39;&#39;,
 &#39;9Strings () while testing \n how these randome &#39;,
 &#39;&#39;,
 &#39; chE@sracters worK;here\\right &#39;,
 &#39;&#39;,
 &#39; there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;helo  ljdk lksd   klsd&#39;.rsplit()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;helo&#39;, &#39;ljdk&#39;, &#39;lksd&#39;, &#39;klsd&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;helo  ljdk lksd   klsd&#39;.rsplit(&#39; &#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;helo&#39;, &#39;&#39;, &#39;ljdk&#39;, &#39;lksd&#39;, &#39;&#39;, &#39;&#39;, &#39;klsd&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;disasembling-strings-to-lines&#34;&gt;Disasembling strings to lines&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.splitlines()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;##9Strings () while testing &#39;,
 &#39; how these randome ## chE@sracters worK;&#39;,
 &#39;here\\right ## there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Keep end of lines by passing &lt;code&gt;True&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.splitlines(True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;##9Strings () while testing \n&#39;,
 &#39; how these randome ## chE@sracters worK;\n&#39;,
 &#39;here\\right ## there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;partition&#34;&gt;Partition&lt;/h3&gt;
&lt;p&gt;Split string at the first occurence of seperator, and return 3 tuple: (before sep, sep, after sep)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;first;second;third&#39;.partition(&#39;;&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(&#39;first&#39;, &#39;;&#39;, &#39;second;third&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;compare with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;first;second;third&#39;.split(&#39;;&#39;,1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;first&#39;, &#39;second;third&#39;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Template</title>
      <link>http://othrif.github.io/technical_note/python/basics/template/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/template/</guid>
      <description>&lt;h3 id=&#34;title&#34;&gt;Title&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Timeout decorator for a function that runs longer than expected</title>
      <link>http://othrif.github.io/technical_note/python/basics/timeout_decorator/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/timeout_decorator/</guid>
      <description>&lt;h3 id=&#34;pass-argument-to-decorator&#34;&gt;Pass argument to decorator&lt;/h3&gt;
&lt;p&gt;Timeout decorator for a function that runs longer than expected&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import signal

def raise_timeout(*args, **kwargs):
    raise TimeoutError(&#39;This function has timed out!!!!!&#39;)

# When an &amp;quot;alarm&amp;quot; signal goes off, call raise_timeout()
signal.signal(signalnum=signal.SIGALRM, handler=raise_timeout)
# Set off an alarm in 5 seconds
signal.alarm(5)
# Cancel the alarm
signal.alarm(0)
raise_timeout()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TimeoutError                              Traceback (most recent call last)

&amp;lt;ipython-input-47-a751c17ccd28&amp;gt; in &amp;lt;module&amp;gt;
     10 # Cancel the alarm
     11 signal.alarm(0)
---&amp;gt; 12 raise_timeout()


&amp;lt;ipython-input-47-a751c17ccd28&amp;gt; in raise_timeout(*args, **kwargs)
      2 
      3 def raise_timeout(*args, **kwargs):
----&amp;gt; 4     raise TimeoutError(&#39;This function has timed out!!!!!&#39;)
      5 
      6 # When an &amp;quot;alarm&amp;quot; signal goes off, call raise_timeout()


TimeoutError: This function has timed out!!!!!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import wraps
import time 
def timeout(n_seconds):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            # Set an alarm for n seconds
            signal.alarm(n_seconds)
            try:
                # Call the decorated func
                return func(*args,**kwargs)
            finally:
                # Cancel alarm
                signal.alarm(0)
        return wrapper
    return decorator
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@timeout(5)
def foo():
    time.sleep(10)
    print(&#39;foo!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;foo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TimeoutError                              Traceback (most recent call last)

&amp;lt;ipython-input-50-c19b6d9633cf&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 foo()


&amp;lt;ipython-input-48-d1ae5af212c1&amp;gt; in wrapper(*args, **kwargs)
      9             try:
     10                 # Call the decorated func
---&amp;gt; 11                 return func(*args,**kwargs)
     12             finally:
     13                 # Cancel alarm


&amp;lt;ipython-input-49-b4a5c0804cd2&amp;gt; in foo()
      1 @timeout(5)
      2 def foo():
----&amp;gt; 3     time.sleep(10)
      4     print(&#39;foo!&#39;)


&amp;lt;ipython-input-47-a751c17ccd28&amp;gt; in raise_timeout(*args, **kwargs)
      2 
      3 def raise_timeout(*args, **kwargs):
----&amp;gt; 4     raise TimeoutError(&#39;This function has timed out!!!!!&#39;)
      5 
      6 # When an &amp;quot;alarm&amp;quot; signal goes off, call raise_timeout()


TimeoutError: This function has timed out!!!!!
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Timer decorator for how long a function took to run</title>
      <link>http://othrif.github.io/technical_note/python/basics/timer_decorator/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/timer_decorator/</guid>
      <description>&lt;h3 id=&#34;timer-decorator&#34;&gt;Timer decorator&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import time 

def timer(func):
    &amp;quot;&amp;quot;&amp;quot; A decorator that prints how long a function took to run&amp;quot;&amp;quot;&amp;quot;
    # define the wrapper function to return 
    def wrapper(*args, **kwargs):
        # When wrapper() is called, get current time
        t_start = time.time()
        # Call the decorated function and store the result
        result = func(*args, **kwargs)
        # Get the total time it took to run, and print it
        t_total = time.time() - t_start
        print(f&#39;{func.__name__} took {t_total}s&#39;)
        return result
    
    return wrapper
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@timer
def multiply(a,b):
    return a*b
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;multiply(1,2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;multiply took 1.1920928955078125e-06s





2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@timer
def sleep_n_seconds(n):
    time.sleep(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sleep_n_seconds(5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;sleep_n_seconds took 5.004380941390991s
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sleep_n_seconds(10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;sleep_n_seconds took 10.002737045288086s
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Useful decorators: Memoizing, timer, type check</title>
      <link>http://othrif.github.io/technical_note/python/basics/memoize_decorator/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/memoize_decorator/</guid>
      <description>&lt;h3 id=&#34;timer-decorator&#34;&gt;Timer decorator&lt;/h3&gt;
&lt;p&gt;Time your functions!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import wraps
import time
def timer(func):
    &amp;quot;&amp;quot;&amp;quot; A decorator that prints how long a function took to run&amp;quot;&amp;quot;&amp;quot;
    # define the wrapper function to return 
    @wraps(func)
    def wrapper(*args, **kwargs):
        # When wrapper() is called, get current time
        t_start = time.time()
        # Call the decorated function and store the result
        result = func(*args, **kwargs)
        # Get the total time it took to run, and print it
        t_total = time.time() - t_start
        print(f&#39;{func.__name__} took {t_total}s&#39;)
        return result
    
    return wrapper
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;memoize&#34;&gt;Memoize&lt;/h3&gt;
&lt;p&gt;Store results of functions for fast lookup so that the function runs faster the second time a function is called with the same arguments.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import wraps
def memoize(func):
    &amp;quot;&amp;quot;&amp;quot;Store the results of the decorated function for fast lookup&amp;quot;&amp;quot;&amp;quot;
    # Store results in a dict that maps arguments to results
    cache = {}
    # Define the wrapper function to return.
    @wraps(func)
    def wrapper(*args,**kwargs):
        # If these arguments haven&#39;t been seen before,
        key = str(args) + str(kwargs)
        if key not in cache:
            # Call func() and store the result.
            cache[key] = func(*args,**kwargs)
        return cache[key]
    return wrapper
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@timer
@memoize
def multiply_slow(a,b):
    time.sleep(5)
    return a*b
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# here the call runs slowly
multiply_slow(1,2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;wrapper took 5.003448247909546s





2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# here the calls runs much faster
multiply_slow(1,2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;wrapper took 5.7220458984375e-06s





2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;check-type&#34;&gt;Check type&lt;/h3&gt;
&lt;p&gt;Examine the results of your functions at runtime by checking the type returned.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import wraps
def print_return_type(func):# Define wrapper(), the decorated function
  @wraps(func)
  def wrapper(*args, **kwargs):
    # Call the function being decorated
    result = func(*args, **kwargs)
    print(&#39;{}() returned type {}&#39;.format(
      func.__name__, type(result)
    ))
    return result
  # Return the decorated function
  return wrapper
  
@print_return_type
def foo(value):
  return value
  
print(foo(42))
print(foo([1, 2, 3]))
print(foo({&#39;a&#39;: 42}))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;foo() returned type &amp;lt;class &#39;int&#39;&amp;gt;
42
foo() returned type &amp;lt;class &#39;list&#39;&amp;gt;
[1, 2, 3]
foo() returned type &amp;lt;class &#39;dict&#39;&amp;gt;
{&#39;a&#39;: 42}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;counter&#34;&gt;Counter&lt;/h3&gt;
&lt;p&gt;decorator that adds a counter to each function that you decorate. decorate a bunch of functions with the counter() decorator, let your program run for a while, and then print out how many times each function was called.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import wraps
def counter(func):
  @wraps(func)
  def wrapper(*args, **kwargs):
    wrapper.count += 1
    # Call the function being decorated and return the result
    return func(*args, **kwargs)
  wrapper.count = 0
  # Return the new decorated function
  return wrapper

# Decorate foo() with the counter() decorator
@counter
def foo():
  print(&#39;calling foo()&#39;)
  
foo()
foo()

print(&#39;foo() was called {} times.&#39;.format(foo.count))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;calling foo()
calling foo()
foo() was called 2 times.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;measuring-decorator-overhead&#34;&gt;Measuring decorator overhead&lt;/h3&gt;
&lt;p&gt;Access the original function using wraps attribute &lt;code&gt;__wrapped__&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import time
from functools import wraps

def check_everything(func):
  @wraps(func)
  def wrapper(*args, **kwargs):
    time.sleep(2)
    result = func(*args, **kwargs)
    return result
  return wrapper

@check_everything
def duplicate(my_list):
  &amp;quot;&amp;quot;&amp;quot;Return a new list that repeats the input twice&amp;quot;&amp;quot;&amp;quot;
  return my_list + my_list

t_start = time.time()
duplicated_list = duplicate(list(range(50)))
t_end = time.time()
decorated_time = t_end - t_start

t_start = time.time()
# Call the original function instead of the decorated one
duplicated_list = duplicate.__wrapped__(list(range(50)))
t_end = time.time()
undecorated_time = t_end - t_start

print(&#39;Decorated time: {:.5f}s&#39;.format(decorated_time))
print(&#39;Undecorated time: {:.5f}s&#39;.format(undecorated_time))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Decorated time: 2.00555s
Undecorated time: 0.00025s
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
