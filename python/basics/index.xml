<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python - Othmane Rifki</title>
    <link>https://othrif.github.io/python/basics/index.xml</link>
    <description></description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Apr 2020 14:41:32 +0200</lastBuildDate>
    
        <atom:link href="https://othrif.github.io/python/basics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Config file using click</title>
      <link>https://othrif.github.io/python/basics/config_file.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/config_file.html</guid>
      <description>Using click with config file Using the module click_config_file we can load the parameter file similar to this:
import click import click_config_file @click.command() @click.option(&amp;#39;--name&amp;#39;, default=&amp;#39;World&amp;#39;, help=&amp;#39;Who to greet.&amp;#39;) @click_config_file.configuration_option() def hello(name): click.echo(&amp;#39;Hello {}!&amp;#39;.format(name)) hello() the parameter file should read:
name=&amp;#39;Othmane&amp;#39; The command to use the config file is:
python main.py --config myconfig.txt </description>
    </item>
    
    <item>
      <title>Functools:reduce()</title>
      <link>https://othrif.github.io/python/basics/functools.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/functools.html</guid>
      <description>reduce() Function call: functools.reduce(function, iterable[, initializer])
You’re doing a fold or reduction when you reduce a list of items to a single cumulative value: 1-Apply a function (or callable) to the first two items in an iterable and generate a partial result.
2-Use that partial result, together with the third item in the iterable, to generate another partial result.
3-Repeat the process until the iterable is exhausted and then return a single cumulative value.</description>
    </item>
    
    <item>
      <title>id() of an object</title>
      <link>https://othrif.github.io/python/basics/id_object.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/id_object.html</guid>
      <description>Everything in python is an object. id(object) function returns the identity of the object. This is an integer that is unique for the given object and remains constant during its lifetime.
print(&amp;#39;id of 5 =&amp;#39;,id(5)) a = 5 print(&amp;#39;id of a =&amp;#39;,id(a)) b = a print(&amp;#39;id of b =&amp;#39;,id(b)) c = 5.0 print(&amp;#39;id of c =&amp;#39;,id(c)) id of 5 = 4483840576 id of a = 4483840576 id of b = 4483840576 id of c = 4518905328  </description>
    </item>
    
    <item>
      <title>Itertools:groupby()</title>
      <link>https://othrif.github.io/python/basics/itertools.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/itertools.html</guid>
      <description>groupby() Function call: functools.groupby(iterable[, key])
Make an iterator that returns consecutive keys and groups from the iterable. Similar to the uniq filter in Unix.
Count number of occurences import itertools for key, group in itertools.groupby(&amp;#39;1122111100&amp;#39;): print(key, &amp;#39;count:&amp;#39;, len(list(group))) 1 count: 2 2 count: 2 1 count: 4 0 count: 2  Use a cutom key function import itertools l = [(&amp;#34;a&amp;#34;, 1), (&amp;#34;a&amp;#34;, 2), (&amp;#34;b&amp;#34;, 3), (&amp;#34;b&amp;#34;, 4)] key_f = lambda x: x[0] for key, group in itertools.</description>
    </item>
    
    <item>
      <title>Manipulate maps</title>
      <link>https://othrif.github.io/python/basics/map_manip.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/map_manip.html</guid>
      <description>Loop over map elements prices = {&amp;#39;apple&amp;#39;: 0.40, &amp;#39;orange&amp;#39;: 0.35, &amp;#39;banana&amp;#39;: 0.25} for k, v in prices.items(): prices[k] = round(v * 0.9, 2) prices {&#39;apple&#39;: 0.36, &#39;orange&#39;: 0.32, &#39;banana&#39;: 0.23}  </description>
    </item>
    
    <item>
      <title>Manipulation of directories and files</title>
      <link>https://othrif.github.io/python/basics/dir_manip.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/dir_manip.html</guid>
      <description>Create dir if it does not exist import os path=&amp;#39;/tmp/test&amp;#39; if not os.path.exists(path): os.mkdir(path) Do something if dir exists (alternative) import pathlib data_dir = pathlib.Path(&amp;#39;data/&amp;#39;) if not data_dir.exists(): print(&amp;#39;do something&amp;#39;) do something  Change directory os.chdir(path) print(f&amp;#39;New location is: {os.getcwd()!r}&amp;#39;) New location is: &#39;/private/tmp/test&#39;  Create file in directory and list Options available: os.O_RDONLY, os.O_WRONLY, os.O_RDWR, os.O_CREAT, os.O_APPEND
fd = os.open(&amp;#39;mytext.txt&amp;#39;, os.O_RDONLY | os.O_CREAT) # open file print(f&amp;#39;Intial file: {os.listdir(path)}&amp;#39;) # list content of directory os.</description>
    </item>
    
    <item>
      <title>Print statements</title>
      <link>https://othrif.github.io/python/basics/print.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/print.html</guid>
      <description>f-string formatting: f &amp;#39; &amp;lt;text&amp;gt; { &amp;lt;expression&amp;gt; &amp;lt;optional !s, !r, or !a&amp;gt; &amp;lt;optional : format specifier&amp;gt; } &amp;lt;text&amp;gt; ... &amp;#39; where &amp;lt;optional !s, !r, or !a&amp;gt; mean !s (str), !r (repr), and !a (ascii)
import datetime name = &amp;#39;Othmane&amp;#39; age = 30 anniversary = datetime.date(1989, 2, 6) print(f&amp;#39;My name is {name.lower()}, my age next year is {age+1}, my anniversary is {anniversary:%A, %B %d, %Y}.&amp;#39;) print(f&amp;#39;He said his name is {name!r}.&amp;#39;) # !</description>
    </item>
    
    <item>
      <title>Remove everything after a character in a string</title>
      <link>https://othrif.github.io/python/basics/remove_after_string.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/remove_after_string.html</guid>
      <description>Using str.split(sep, maxsplit) # maxsplit=1 to split at first occurence a_string = &amp;#34;ab-cd&amp;#34; split_string = a_string.split(&amp;#34;-&amp;#34;, 1) substring = split_string[0] print(substring) ab  </description>
    </item>
    
    <item>
      <title>Substring key match in a dictionary</title>
      <link>https://othrif.github.io/python/basics/substring_key_match.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/substring_key_match.html</guid>
      <description>Using items() + list comprehension test_dict = {&amp;#39;All&amp;#39; : 1, &amp;#39;have&amp;#39; : 2, &amp;#39;good&amp;#39; : 3, &amp;#39;food&amp;#39; : 4} search_key = &amp;#39;ood&amp;#39; res = [val for key, val in test_dict.items() if search_key in key] res [3, 4]  </description>
    </item>
    
    <item>
      <title>tqdm cool progress meter</title>
      <link>https://othrif.github.io/python/basics/tqdm.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/tqdm.html</guid>
      <description>In shell # Number of bytes per second !seq 9999999 | tqdm --bytes | wc -l 109MB [00:02, 47.8MB/s] 9999999  # Number of lines per second !seq 9999999 | tqdm | wc -l 9999999it [00:03, 2633163.40it/s] 9999999  # Number of lines per second !seq 9999999 | tqdm --bytes --total 99999999 | wc -l  59%|██████████████████████▍ | 56.3M/95.4M [00:01&amp;lt;00:00, 46.9MB/s]^C 66%|████████████████████████▉ | 62.6M/95.4M [00:01&amp;lt;00:00, 45.7MB/s] Traceback (most recent call last): File &amp;quot;/Users/othrif/.</description>
    </item>
    
    <item>
      <title>Using pipenv and saving python environment</title>
      <link>https://othrif.github.io/python/basics/pipenv.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/pipenv.html</guid>
      <description>Pipenv workflow If the Pipfile exists, run
pipenv install To run,
pipenv run &amp;lt;command&amp;gt; To enter a shell within the environment
pipenv shell To add a package to your new project
pipenv install &amp;lt;package&amp;gt; or edit the Pipfile directly, here added package requests
[[source]] url = &amp;#34;https://pypi.python.org/simple&amp;#34; verify_ssl = true name = &amp;#34;pypi&amp;#34; [packages] requests = &amp;#34;*&amp;#34; [dev-packages] Save python environment pipenv install &amp;lt;all packages i need&amp;gt; pipenv lock --requirements &amp;gt; requirements.</description>
    </item>
    
  </channel>
</rss>