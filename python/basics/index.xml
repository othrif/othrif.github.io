<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python - Othmane Rifki</title>
    <link>https://othrif.github.io/python/basics/index.xml</link>
    <description></description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Apr 2020 14:41:32 +0200</lastBuildDate>
    
        <atom:link href="https://othrif.github.io/python/basics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CLI arguments and config with click</title>
      <link>https://othrif.github.io/python/basics/config_file.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/config_file.html</guid>
      <description>Basic usage of click Command line arguments get passed to a function that you then call later on.
import click @click.command() @click.option(&amp;#39;-f&amp;#39;, &amp;#39;--first&amp;#39;, default=&amp;#39;first&amp;#39;) @click.option(&amp;#39;-s&amp;#39;, &amp;#39;--second&amp;#39;, default=10) def test(first, second): print(&amp;#39;First&amp;#39;, first) print(&amp;#39;Second&amp;#39;, second) test() Using click with config file Using the module click_config_file we can load the parameter file similar to this:
import click import click_config_file @click.command() @click.option(&amp;#39;--name&amp;#39;, default=&amp;#39;World&amp;#39;, help=&amp;#39;Who to greet.&amp;#39;) @click_config_file.configuration_option() def hello(name): click.echo(&amp;#39;Hello {}!&amp;#39;.format(name)) hello() the parameter file should read:</description>
    </item>
    
    <item>
      <title>Everything python</title>
      <link>https://othrif.github.io/python/basics/pyenv.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/pyenv.html</guid>
      <description>Update pyenv To pick up the latest python versions for example to get 3.9.2
cd /home/`whoami`/.pyenv/plugins/python-build/../.. &amp;amp;&amp;amp; git pull &amp;amp;&amp;amp; cd - pyenv install 3.9.2 </description>
    </item>
    
    <item>
      <title>Functools:reduce()</title>
      <link>https://othrif.github.io/python/basics/functools.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/functools.html</guid>
      <description>reduce() Function call: functools.reduce(function, iterable[, initializer])
You’re doing a fold or reduction when you reduce a list of items to a single cumulative value: 1-Apply a function (or callable) to the first two items in an iterable and generate a partial result.
2-Use that partial result, together with the third item in the iterable, to generate another partial result.
3-Repeat the process until the iterable is exhausted and then return a single cumulative value.</description>
    </item>
    
    <item>
      <title>Hashing strings</title>
      <link>https://othrif.github.io/python/basics/hashing.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/hashing.html</guid>
      <description>Hashing strings A hash function is a function that takes input of a variable length sequence of bytes and converts it to a fixed length sequence.
You will need to pass byte encoding or encode string.
Used to encode unique filenames import hashlib import uuid for _ in range(3): filename = hashlib.sha1(&amp;#39;myfile&amp;#39;.encode(&amp;#39;utf-8&amp;#39;)).hexdigest()[:8]+&amp;#39;_&amp;#39;+str(uuid.uuid4().hex) print(filename) b3580ab4_2aa33c2df5bc4f569d83d6924d04541c b3580ab4_7c170be56bd0466cac020e18189b842d b3580ab4_8e518d7fdffb4eb0bde3cfc0d7cec3dc  Available algorithms import hashlib print(hashlib.algorithms_available) # lists all the algorithms available in the system, print(hashlib.</description>
    </item>
    
    <item>
      <title>id() of an object</title>
      <link>https://othrif.github.io/python/basics/id_object.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/id_object.html</guid>
      <description>Everything in python is an object. id(object) function returns the identity of the object. This is an integer that is unique for the given object and remains constant during its lifetime.
print(&amp;#39;id of 5 =&amp;#39;,id(5)) a = 5 print(&amp;#39;id of a =&amp;#39;,id(a)) b = a print(&amp;#39;id of b =&amp;#39;,id(b)) c = 5.0 print(&amp;#39;id of c =&amp;#39;,id(c)) id of 5 = 4483840576 id of a = 4483840576 id of b = 4483840576 id of c = 4518905328  </description>
    </item>
    
    <item>
      <title>Itertools:groupby()</title>
      <link>https://othrif.github.io/python/basics/itertools.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/itertools.html</guid>
      <description>groupby() Function call: functools.groupby(iterable[, key])
Make an iterator that returns consecutive keys and groups from the iterable. Similar to the uniq filter in Unix.
Count number of occurences import itertools for key, group in itertools.groupby(&amp;#39;1122111100&amp;#39;): print(key, &amp;#39;count:&amp;#39;, len(list(group))) 1 count: 2 2 count: 2 1 count: 4 0 count: 2  Use a cutom key function import itertools l = [(&amp;#34;a&amp;#34;, 1), (&amp;#34;a&amp;#34;, 2), (&amp;#34;b&amp;#34;, 3), (&amp;#34;b&amp;#34;, 4)] key_f = lambda x: x[0] for key, group in itertools.</description>
    </item>
    
    <item>
      <title>Manipulate maps</title>
      <link>https://othrif.github.io/python/basics/map_manip.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/map_manip.html</guid>
      <description>Loop over map elements prices = {&amp;#39;apple&amp;#39;: 0.40, &amp;#39;orange&amp;#39;: 0.35, &amp;#39;banana&amp;#39;: 0.25} for k, v in prices.items(): prices[k] = round(v * 0.9, 2) prices {&#39;apple&#39;: 0.36, &#39;orange&#39;: 0.32, &#39;banana&#39;: 0.23}  </description>
    </item>
    
    <item>
      <title>Manipulation of directories and files</title>
      <link>https://othrif.github.io/python/basics/dir_manip.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/dir_manip.html</guid>
      <description>Create dir if it does not exist import os path=&amp;#39;/tmp/test&amp;#39; if not os.path.exists(path): os.mkdir(path) Do something if dir exists (alternative) import pathlib data_dir = pathlib.Path(&amp;#39;data/&amp;#39;) if not data_dir.exists(): print(&amp;#39;do something&amp;#39;) do something  Change directory os.chdir(path) print(f&amp;#39;New location is: {os.getcwd()!r}&amp;#39;) New location is: &#39;/private/tmp/test&#39;  Create file in directory and list Options available: os.O_RDONLY, os.O_WRONLY, os.O_RDWR, os.O_CREAT, os.O_APPEND
fd = os.open(&amp;#39;mytext.txt&amp;#39;, os.O_RDONLY | os.O_CREAT) # open file print(f&amp;#39;Intial file: {os.listdir(path)}&amp;#39;) # list content of directory os.</description>
    </item>
    
    <item>
      <title>Membership test</title>
      <link>https://othrif.github.io/python/basics/membership.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/membership.html</guid>
      <description>Pythonic way of checking def contains(haystack, needle): if needle not in haystack: raise ValueError(&amp;#39;Needle not found&amp;#39;) contains([23, 42, 0xbadc0ffee], &amp;#39;needle&amp;#39;) --------------------------------------------------------------------------- ValueError Traceback (most recent call last) &amp;lt;ipython-input-4-c0a79d64f7a4&amp;gt; in &amp;lt;module&amp;gt; 3 raise ValueError(&#39;Needle not found&#39;) 4 ----&amp;gt; 5 contains([23, 42, 0xbadc0ffee], &#39;needle&#39;) &amp;lt;ipython-input-4-c0a79d64f7a4&amp;gt; in contains(haystack, needle) 1 def contains(haystack, needle): 2 if needle not in haystack: ----&amp;gt; 3 raise ValueError(&#39;Needle not found&#39;) 4 5 contains([23, 42, 0xbadc0ffee], &#39;needle&#39;) ValueError: Needle not found  With a loop def contains(haystack, needle): for item in haystack: if item == needle: return raise ValueError(&amp;#39;Needle not found&amp;#39;) contains([23, 42, 0xbadc0ffee], &amp;#39;needle&amp;#39;) --------------------------------------------------------------------------- ValueError Traceback (most recent call last) &amp;lt;ipython-input-6-c605d648b237&amp;gt; in &amp;lt;module&amp;gt; 4 return 5 raise ValueError(&#39;Needle not found&#39;) ----&amp;gt; 6 contains([23, 42, 0xbadc0ffee], &#39;needle&#39;) &amp;lt;ipython-input-6-c605d648b237&amp;gt; in contains(haystack, needle) 3 if item == needle: 4 return ----&amp;gt; 5 raise ValueError(&#39;Needle not found&#39;) 6 contains([23, 42, 0xbadc0ffee], &#39;needle&#39;) ValueError: Needle not found  Use for loop with else branch Little bit confusing though, so avoid</description>
    </item>
    
    <item>
      <title>Print statements</title>
      <link>https://othrif.github.io/python/basics/print.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/print.html</guid>
      <description>f-string formatting: f &amp;#39; &amp;lt;text&amp;gt; { &amp;lt;expression&amp;gt; &amp;lt;optional !s, !r, or !a&amp;gt; &amp;lt;optional : format specifier&amp;gt; } &amp;lt;text&amp;gt; ... &amp;#39; where &amp;lt;optional !s, !r, or !a&amp;gt; mean !s (str), !r (repr), and !a (ascii)
import datetime name = &amp;#39;Othmane&amp;#39; age = 30 anniversary = datetime.date(1989, 2, 6) print(f&amp;#39;My name is {name.lower()}, my age next year is {age+1}, my anniversary is {anniversary:%A, %B %d, %Y}.&amp;#39;) print(f&amp;#39;He said his name is {name!r}.&amp;#39;) # !</description>
    </item>
    
    <item>
      <title>Python built-in keywords</title>
      <link>https://othrif.github.io/python/basics/keywords.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/keywords.html</guid>
      <description>Check keywords import keyword print(keyword.kwlist) [&#39;False&#39;, &#39;None&#39;, &#39;True&#39;, &#39;and&#39;, &#39;as&#39;, &#39;assert&#39;, &#39;async&#39;, &#39;await&#39;, &#39;break&#39;, &#39;class&#39;, &#39;continue&#39;, &#39;def&#39;, &#39;del&#39;, &#39;elif&#39;, &#39;else&#39;, &#39;except&#39;, &#39;finally&#39;, &#39;for&#39;, &#39;from&#39;, &#39;global&#39;, &#39;if&#39;, &#39;import&#39;, &#39;in&#39;, &#39;is&#39;, &#39;lambda&#39;, &#39;nonlocal&#39;, &#39;not&#39;, &#39;or&#39;, &#39;pass&#39;, &#39;raise&#39;, &#39;return&#39;, &#39;try&#39;, &#39;while&#39;, &#39;with&#39;, &#39;yield&#39;]  Use keywords as variable Add a trailing underscore
global var global_ = 2 </description>
    </item>
    
    <item>
      <title>Remove everything after a character in a string</title>
      <link>https://othrif.github.io/python/basics/remove_after_string.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/remove_after_string.html</guid>
      <description>Using str.split(sep, maxsplit) # maxsplit=1 to split at first occurence a_string = &amp;#34;ab-cd&amp;#34; split_string = a_string.split(&amp;#34;-&amp;#34;, 1) substring = split_string[0] print(substring) ab  </description>
    </item>
    
    <item>
      <title>Substring key match in a dictionary</title>
      <link>https://othrif.github.io/python/basics/substring_key_match.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/substring_key_match.html</guid>
      <description>Using items() + list comprehension test_dict = {&amp;#39;All&amp;#39; : 1, &amp;#39;have&amp;#39; : 2, &amp;#39;good&amp;#39; : 3, &amp;#39;food&amp;#39; : 4} search_key = &amp;#39;ood&amp;#39; res = [val for key, val in test_dict.items() if search_key in key] res [3, 4]  </description>
    </item>
    
    <item>
      <title>tqdm cool progress meter</title>
      <link>https://othrif.github.io/python/basics/tqdm.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/tqdm.html</guid>
      <description>In shell # Number of bytes per second !seq 9999999 | tqdm --bytes | wc -l 109MB [00:02, 47.8MB/s] 9999999  # Number of lines per second !seq 9999999 | tqdm | wc -l 9999999it [00:03, 2633163.40it/s] 9999999  # Number of lines per second !seq 9999999 | tqdm --bytes --total 99999999 | wc -l  59%|██████████████████████▍ | 56.3M/95.4M [00:01&amp;lt;00:00, 46.9MB/s]^C 66%|████████████████████████▉ | 62.6M/95.4M [00:01&amp;lt;00:00, 45.7MB/s] Traceback (most recent call last): File &amp;quot;/Users/othrif/.</description>
    </item>
    
    <item>
      <title>Tuple and namedtuple</title>
      <link>https://othrif.github.io/python/basics/namedtuple.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/namedtuple.html</guid>
      <description>Tuple The standard tuple uses numerical indexes to access its members.
bob = (&amp;#39;Bob&amp;#39;, 30, &amp;#39;male&amp;#39;) print(f&amp;#39;Representation:{bob}&amp;#39;) jane = (&amp;#39;Jane&amp;#39;, 29, &amp;#39;female&amp;#39;) print(f&amp;#39;\nField by index: {jane[0]}&amp;#39;) print(&amp;#39;\nFields by index:&amp;#39;) for p in [ bob, jane ]: print(&amp;#39;%sis a %dyear old %s&amp;#39; % p) Representation:(&#39;Bob&#39;, 30, &#39;male&#39;) Field by index: Jane Fields by index: Bob is a 30 year old male Jane is a 29 year old female  Namedtuple remembering which index should be used for each value can lead to errors.</description>
    </item>
    
    <item>
      <title>Using pipenv and saving python environment</title>
      <link>https://othrif.github.io/python/basics/pipenv.html</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      
      <guid>https://othrif.github.io/python/basics/pipenv.html</guid>
      <description>Pipenv workflow If the Pipfile exists, run
pipenv install To run,
pipenv run &amp;lt;command&amp;gt; To enter a shell within the environment
pipenv shell To add a package to your new project
pipenv install &amp;lt;package&amp;gt; or edit the Pipfile directly, here added package requests
[[source]] url = &amp;#34;https://pypi.python.org/simple&amp;#34; verify_ssl = true name = &amp;#34;pypi&amp;#34; [packages] requests = &amp;#34;*&amp;#34; [dev-packages] Save python environment pipenv install &amp;lt;all packages i need&amp;gt; pipenv lock --requirements &amp;gt; requirements.</description>
    </item>
    
  </channel>
</rss>