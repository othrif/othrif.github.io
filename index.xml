<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Othmane Rifki</title>
    <link>http://othrif.github.io/</link>
      <atom:link href="http://othrif.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Othmane Rifki</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Wed, 08 Apr 2020 22:44:12 +0200</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Othmane Rifki</title>
      <link>http://othrif.github.io/</link>
    </image>
    
    <item>
      <title>*args, **kwargs</title>
      <link>http://othrif.github.io/technical_note/python/basics/argskwargs/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/argskwargs/</guid>
      <description>&lt;h3 id=&#34;functions-with-variable-arguments-args&#34;&gt;Functions with variable arguments (*args)&lt;/h3&gt;
&lt;p&gt;It allows you to pass a variable number of arguments to functions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def gibberish(*args):
    &amp;quot;&amp;quot;&amp;quot;Concatenate strings in *args together.&amp;quot;&amp;quot;&amp;quot;

    hodgepodge = &#39;&#39;

    for word in args:
        hodgepodge += word

    return hodgepodge

# Call gibberish() with one string: one_word
one_word = gibberish(&#39;luke&#39;)

# Call gibberish() with five strings: many_words
many_words = gibberish(&amp;quot;luke&amp;quot;, &amp;quot;leia&amp;quot;, &amp;quot;han&amp;quot;, &amp;quot;obi&amp;quot;, &amp;quot;darth&amp;quot;)

# Print one_word and many_words
print(one_word)
print(many_words)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;luke
lukeleiahanobidarth
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;functions-with-variable-length-keyword-arguments-kwargs&#34;&gt;Functions with variable-length keyword arguments (**kwargs)&lt;/h3&gt;
&lt;p&gt;It allows you to pass a variable number of keyword arguments to functions. Wthin the function definition, kwargs is a dictionary.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def report_status(**kwargs):
    &amp;quot;&amp;quot;&amp;quot;Print out the status of a movie character.&amp;quot;&amp;quot;&amp;quot;

    print(&amp;quot;\nBEGIN: REPORT\n&amp;quot;)
    for key, val in kwargs.items():
        print(key + &amp;quot;: &amp;quot; + val)
    print(&amp;quot;\nEND REPORT&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;report_status(name=&amp;quot;luke&amp;quot;, affiliation=&amp;quot;jedi&amp;quot;, status=&amp;quot;missing&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;BEGIN: REPORT

name: luke
affiliation: jedi
status: missing

END REPORT
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;report_status(name=&amp;quot;anakin&amp;quot;, affiliation=&amp;quot;sith lord&amp;quot;, status=&amp;quot;deceased&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;BEGIN: REPORT

name: anakin
affiliation: sith lord
status: deceased

END REPORT
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>&#43;&#43;*ptr vs. *ptr&#43;&#43;</title>
      <link>http://othrif.github.io/technical_note/cpp/basics/ptr_deref/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/cpp/basics/ptr_deref/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;rules&#34;&gt;Rules&lt;/h3&gt;
&lt;p&gt;Prefix operator &lt;code&gt;++&lt;/code&gt; has the same precedence as dereference: &lt;code&gt;++*ptr&lt;/code&gt; = &lt;code&gt;++(*ptr)&lt;/code&gt;. &lt;code&gt;++ptr&lt;/code&gt; evaluates to the &lt;em&gt;incremented&lt;/em&gt; value of &lt;code&gt;ptr&lt;/code&gt;&lt;br&gt;
Postfix operator &lt;code&gt;++&lt;/code&gt; has a higher precedence than dereference: So &lt;code&gt;*ptr++&lt;/code&gt; gets evaluated as &lt;code&gt;*(ptr++)&lt;/code&gt;. &lt;code&gt;ptr++&lt;/code&gt; evaluates to the current value of &lt;code&gt;ptr&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{int x = 19;
int *ptr = &amp;amp;x;
cout &amp;lt;&amp;lt; *ptr &amp;lt;&amp;lt; endl;
cout &amp;lt;&amp;lt; ++(*ptr) &amp;lt;&amp;lt; endl;
cout &amp;lt;&amp;lt; *ptr &amp;lt;&amp;lt; endl;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;19
20
20
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{int x = 19;
int *ptr = &amp;amp;x;
cout &amp;lt;&amp;lt; *ptr &amp;lt;&amp;lt; endl;
cout &amp;lt;&amp;lt; (*ptr)++ &amp;lt;&amp;lt; endl; // *ptr++ means *(ptr++) and will give garbage
cout &amp;lt;&amp;lt; *ptr &amp;lt;&amp;lt; endl;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;19
19
20
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2D Numpy arrays</title>
      <link>http://othrif.github.io/technical_note/python/matplotlib/2dnumpy/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlib/2dnumpy/</guid>
      <description>&lt;h3 id=&#34;subset-numpy-arrays&#34;&gt;Subset numpy arrays&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;baseball = [[180, 78.4],
            [215, 102.7],
            [210, 98.5],
            [188, 75.2]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np_baseball = np.array(baseball)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(baseball_np)
print(type(np_baseball))
print(np_baseball.shape)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[180.   78.4]
 [215.  102.7]
 [210.   98.5]
 [188.   75.2]]
&amp;lt;class &#39;numpy.ndarray&#39;&amp;gt;
(4, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np_baseball[2][1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;98.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np_baseball[2,1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;98.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np_baseball[:,1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 78.4, 102.7,  98.5,  75.2])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2d-arithmetic&#34;&gt;2D Arithmetic&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np_mat = np.array([[1, 2],
                   [3, 4],
                   [5, 6]])
np_mat * 2

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 2,  4],
       [ 6,  8],
       [10, 12]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np_mat + np.array([10, 10])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[11, 12],
       [13, 14],
       [15, 16]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np_mat + np_mat
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 2,  4],
       [ 6,  8],
       [10, 12]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2D Numpy arrays</title>
      <link>http://othrif.github.io/technical_note/python/numpy/2dnumpy/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/numpy/2dnumpy/</guid>
      <description>&lt;h3 id=&#34;subset-numpy-arrays&#34;&gt;Subset numpy arrays&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;baseball = [[180, 78.4],
            [215, 102.7],
            [210, 98.5],
            [188, 75.2]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np_baseball = np.array(baseball)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(baseball_np)
print(type(np_baseball))
print(np_baseball.shape)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[180.   78.4]
 [215.  102.7]
 [210.   98.5]
 [188.   75.2]]
&amp;lt;class &#39;numpy.ndarray&#39;&amp;gt;
(4, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np_baseball[2][1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;98.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np_baseball[2,1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;98.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np_baseball[:,1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 78.4, 102.7,  98.5,  75.2])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2d-arithmetic&#34;&gt;2D Arithmetic&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np_mat = np.array([[1, 2],
                   [3, 4],
                   [5, 6]])
np_mat * 2

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 2,  4],
       [ 6,  8],
       [10, 12]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np_mat + np.array([10, 10])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[11, 12],
       [13, 14],
       [15, 16]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np_mat + np_mat
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 2,  4],
       [ 6,  8],
       [10, 12]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>A tf-idf word-frequency array and mining Wikipedia</title>
      <link>http://othrif.github.io/technical_note/python/sklearn/tf-idf/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/sklearn/tf-idf/</guid>
      <description>&lt;p&gt;tf–idf or TFIDF, short for term frequency–inverse document frequency, is a numerical statistic that is intended to reflect how important a word is to a document in a collection or corpus.&lt;/p&gt;
&lt;h3 id=&#34;tfidfvectorizer&#34;&gt;TfidfVectorizer&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;TfidfVectorizer&lt;/code&gt; from sklearn. It transforms a list of documents into a word frequency array, which it outputs as a csr_matrix. It has fit() and transform() methods like other sklearn objects.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;documents = [&#39;cats say meow&#39;, &#39;dogs say woof&#39;, &#39;dogs chase cats&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import TfidfVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer

# Create a TfidfVectorizer: tfidf
tfidf = TfidfVectorizer() 

# Apply fit_transform to document: csr_mat
csr_mat = tfidf.fit_transform(documents)

# Print result of toarray() method
print(csr_mat.toarray())

# Get the words: words
words = tfidf.get_feature_names()

# Print words
print(words)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[0.51785612 0.         0.         0.68091856 0.51785612 0.        ]
 [0.         0.         0.51785612 0.         0.51785612 0.68091856]
 [0.51785612 0.68091856 0.51785612 0.         0.         0.        ]]
[&#39;cats&#39;, &#39;chase&#39;, &#39;dogs&#39;, &#39;meow&#39;, &#39;say&#39;, &#39;woof&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;mining-wikipedia&#34;&gt;Mining Wikipedia&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
from scipy.sparse import csr_matrix

df = pd.read_csv(&#39;wikipedia/wikipedia-vectors.csv&#39;, index_col=0)
articles = csr_matrix(df.transpose())
titles = list(df.columns)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Perform the necessary imports
from sklearn.decomposition import TruncatedSVD
from sklearn.cluster import KMeans
from sklearn.pipeline import make_pipeline

# Create a TruncatedSVD instance: svd
svd = TruncatedSVD(n_components=50)

# Create a KMeans instance: kmeans
kmeans = KMeans(n_clusters=6)

# Create a pipeline: pipeline
pipeline = make_pipeline(svd, kmeans)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import pandas
import pandas as pd

# Fit the pipeline to articles
pipeline.fit(articles)

# Calculate the cluster labels: labels
labels = pipeline.predict(articles)

# Create a DataFrame aligning labels and titles: df
df = pd.DataFrame({&#39;label&#39;: labels, &#39;article&#39;: titles})

# Display df sorted by cluster label
print(df.sort_values(&#39;label&#39;))

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    label                                        article
59      0                                    Adam Levine
50      0                                   Chad Kroeger
51      0                                     Nate Ruess
52      0                                     The Wanted
53      0                                   Stevie Nicks
58      0                                         Sepsis
55      0                                  Black Sabbath
56      0                                       Skrillex
57      0                          Red Hot Chili Peppers
54      0                                 Arctic Monkeys
21      1                             Michael Fassbender
28      1                                  Anne Hathaway
27      1                                 Dakota Fanning
26      1                                     Mila Kunis
25      1                                  Russell Crowe
24      1                                   Jessica Biel
23      1                           Catherine Zeta-Jones
22      1                              Denzel Washington
20      1                                 Angelina Jolie
29      1                               Jennifer Aniston
0       2                                       HTTP 404
1       2                                 Alexa Internet
2       2                              Internet Explorer
3       2                                    HTTP cookie
4       2                                  Google Search
5       2                                         Tumblr
6       2                    Hypertext Transfer Protocol
7       2                                  Social search
8       2                                        Firefox
9       2                                       LinkedIn
38      3                                         Neymar
37      3                                       Football
36      3              2014 FIFA World Cup qualification
35      3                Colombia national football team
39      3                                  Franck Ribéry
33      3                                 Radamel Falcao
32      3                                   Arsenal F.C.
31      3                              Cristiano Ronaldo
30      3                  France national football team
34      3                             Zlatan Ibrahimović
49      4                                       Lymphoma
48      4                                     Gabapentin
46      4                                     Prednisone
45      4                                    Hepatitis C
47      4                                          Fever
43      4                                       Leukemia
42      4                                    Doxycycline
41      4                                    Hepatitis B
40      4                                    Tonsillitis
44      4                                           Gout
19      5  2007 United Nations Climate Change Conference
10      5                                 Global warming
11      5       Nationally Appropriate Mitigation Action
12      5                                   Nigel Lawson
13      5                               Connie Hedegaard
14      5                                 Climate change
15      5                                 Kyoto Protocol
16      5                                        350.org
17      5  Greenhouse gas emissions by the United States
18      5  2010 United Nations Climate Change Conference
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Agglomerative Hiearchial clustering with scipy</title>
      <link>http://othrif.github.io/technical_note/python/sklearn/clustering_hierarchy/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/sklearn/clustering_hierarchy/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Begin with a seperate cluster, at each step merge the the two closest clusters&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import numpy as np
df = pd.read_csv(&#39;Grains/seeds.csv&#39;, header=None)
df = df.sample(n=50)
samples = df.iloc[:,:-1].to_numpy()
labels = df.iloc[:,-1].to_numpy()-1
label_names = np.array([&#39;Kama wheat&#39;, &#39;Rosa wheat&#39;, &#39;Canadian wheat&#39;])
varieties = label_names[labels]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Perform the necessary imports
from scipy.cluster.hierarchy import linkage, dendrogram
import matplotlib.pyplot as plt

# Calculate the linkage: mergings
mergings = linkage(samples, method=&#39;complete&#39;)

# Plot the dendrogram, using varieties as labels
fig, ax = plt.subplots(figsize=(20,5))
dendrogram(mergings,
           labels=varieties,
           leaf_rotation=90,
           leaf_font_size=12,
)
fig
plt.show()

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;clustering_hierarchy_3_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;hierarchical-clustering&#34;&gt;Hierarchical clustering&lt;/h3&gt;
&lt;p&gt;Several methods of clustering:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;complete&lt;/code&gt;: farthest elements of each cluster&lt;/li&gt;
&lt;li&gt;&lt;code&gt;single&lt;/code&gt;: closest elements of each cluster&lt;/li&gt;
&lt;li&gt;Note height of dendrogram is the distance between clusters, the merging point is the distance between them&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Perform the necessary imports
import pandas as pd
from scipy.cluster.hierarchy import fcluster

# Use fcluster to extract labels: labels
labels = fcluster(mergings, 7, criterion=&#39;distance&#39;)

# Create a DataFrame with labels and varieties as columns: df
df = pd.DataFrame({&#39;labels&#39;: labels, &#39;varieties&#39;: varieties})

# Create crosstab: ct
ct = pd.crosstab(df[&#39;labels&#39;], df[&#39;varieties&#39;])

# Display ct
print(ct)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[2 1 3 3 1 2 3 3 3 3 1 3 3 3 3 2 2 2 2 1 3 3 3 3 1 2 3 1 3 3 1 3 1 3 3 2 3
 3 3 3 3 1 2 2 3 2 2 1 3 3]
[&#39;Canadian wheat&#39; &#39;Rosa wheat&#39; &#39;Kama wheat&#39; &#39;Kama wheat&#39; &#39;Rosa wheat&#39;
 &#39;Canadian wheat&#39; &#39;Rosa wheat&#39; &#39;Kama wheat&#39; &#39;Canadian wheat&#39;
 &#39;Canadian wheat&#39; &#39;Rosa wheat&#39; &#39;Kama wheat&#39; &#39;Kama wheat&#39; &#39;Kama wheat&#39;
 &#39;Kama wheat&#39; &#39;Canadian wheat&#39; &#39;Canadian wheat&#39; &#39;Canadian wheat&#39;
 &#39;Canadian wheat&#39; &#39;Rosa wheat&#39; &#39;Kama wheat&#39; &#39;Kama wheat&#39; &#39;Kama wheat&#39;
 &#39;Kama wheat&#39; &#39;Rosa wheat&#39; &#39;Canadian wheat&#39; &#39;Kama wheat&#39; &#39;Rosa wheat&#39;
 &#39;Kama wheat&#39; &#39;Kama wheat&#39; &#39;Rosa wheat&#39; &#39;Kama wheat&#39; &#39;Rosa wheat&#39;
 &#39;Kama wheat&#39; &#39;Kama wheat&#39; &#39;Canadian wheat&#39; &#39;Kama wheat&#39; &#39;Kama wheat&#39;
 &#39;Kama wheat&#39; &#39;Kama wheat&#39; &#39;Rosa wheat&#39; &#39;Rosa wheat&#39; &#39;Canadian wheat&#39;
 &#39;Canadian wheat&#39; &#39;Kama wheat&#39; &#39;Canadian wheat&#39; &#39;Canadian wheat&#39;
 &#39;Rosa wheat&#39; &#39;Kama wheat&#39; &#39;Canadian wheat&#39;]
varieties  Canadian wheat  Kama wheat  Rosa wheat
labels                                           
1                       0           0          10
2                      12           0           0
3                       3          23           2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Alter variable defined in global scope</title>
      <link>http://othrif.github.io/technical_note/python/basics/global/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/global/</guid>
      <description>&lt;p&gt;the keyword global within a function to alter the value of a variable defined in the global scope.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;team = &amp;quot;teen titans&amp;quot;

def change_team():
    &amp;quot;&amp;quot;&amp;quot;Change the value of the global variable team.&amp;quot;&amp;quot;&amp;quot;
    global team
    team = &#39;justice league&#39;
    

print(team)
change_team()
print(team)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;teen titans
justice league
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Appending pandas Series</title>
      <link>http://othrif.github.io/technical_note/python/pandas/appendseries/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/appendseries/</guid>
      <description>&lt;h3 id=&#34;basics&#34;&gt;Basics&lt;/h3&gt;
&lt;p&gt;Load sales data from the months January, February, and March into DataFrames. Then, extract Series with the &amp;lsquo;Units&amp;rsquo; column from each and append them together with method chaining using .append().&lt;/p&gt;
&lt;p&gt;To check that the stacking worked, you&amp;rsquo;ll print slices from these Series, and finally, you&amp;rsquo;ll add the result to figure out the total units sold in the first quarter.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import pandas
import pandas as pd

# Load &#39;sales-jan-2015.csv&#39; into a DataFrame: jan
jan = pd.read_csv(&#39;Sales/sales-jan-2015.csv&#39;, parse_dates=True,index_col=&#39;Date&#39;)

# Load &#39;sales-feb-2015.csv&#39; into a DataFrame: feb
feb = pd.read_csv(&#39;Sales/sales-feb-2015.csv&#39;, parse_dates=True,index_col=&#39;Date&#39;)

# Load &#39;sales-mar-2015.csv&#39; into a DataFrame: mar
mar = pd.read_csv(&#39;Sales/sales-mar-2015.csv&#39;, parse_dates=True,index_col=&#39;Date&#39;)

# Extract the &#39;Units&#39; column from jan: jan_units
jan_units = jan[&#39;Units&#39;]

# Extract the &#39;Units&#39; column from feb: feb_units
feb_units = feb[&#39;Units&#39;]

# Extract the &#39;Units&#39; column from mar: mar_units
mar_units = mar[&#39;Units&#39;]

# Append feb_units and then mar_units to jan_units: quarter1
quarter1 = jan_units.append(feb_units).append(mar_units)

# Print the first slice from quarter1
print(quarter1.loc[&#39;jan 27, 2015&#39;:&#39;feb 2, 2015&#39;])

# Print the second slice from quarter1
print(quarter1.loc[&#39;feb 26, 2015&#39;:&#39;mar 7, 2015&#39;])

# Compute &amp;amp; print total sales in quarter1
print(quarter1.sum())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Date
2015-01-27 07:11:55    18
2015-02-02 08:33:01     3
2015-02-02 20:54:49     9
Name: Units, dtype: int64
Date
2015-02-26 08:57:45     4
2015-02-26 08:58:51     1
2015-03-06 10:11:45    17
2015-03-06 02:03:56    17
Name: Units, dtype: int64
642
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;concatenating-pandas-series-along-row-axis&#34;&gt;Concatenating pandas Series along row axis&lt;/h3&gt;
&lt;p&gt;achieve the same result as above by concatenating Series instead&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Initialize empty list: units
units = []

# Build the list of Series
for month in [jan, feb, mar]:
    units.append(month[&#39;Units&#39;])

# Concatenate the list: quarter1
quarter1 = pd.concat(units, axis=&#39;rows&#39;)

# Print slices from quarter1
print(quarter1.loc[&#39;jan 27, 2015&#39;:&#39;feb 2, 2015&#39;])
print(quarter1.loc[&#39;feb 26, 2015&#39;:&#39;mar 7, 2015&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Date
2015-01-27 07:11:55    18
2015-02-02 08:33:01     3
2015-02-02 20:54:49     9
Name: Units, dtype: int64
Date
2015-02-26 08:57:45     4
2015-02-26 08:58:51     1
2015-03-06 10:11:45    17
2015-03-06 02:03:56    17
Name: Units, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;heading&#34;&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Arithmetic with Series &amp; DataFrames</title>
      <link>http://othrif.github.io/technical_note/python/pandas/arithmeticwithpandas/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/arithmeticwithpandas/</guid>
      <description>&lt;h3 id=&#34;broadcasting-in-arithmetic-formulas&#34;&gt;Broadcasting in arithmetic formulas&lt;/h3&gt;
&lt;p&gt;In only three lines of code, you converted the units of 365 data points (over three columns) from degrees Fahrenheit to degrees Celsius.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
weather = pd.read_csv(&#39;pittsburgh2013.csv&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;weather.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(365, 23)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Extract selected columns from weather as new DataFrame: temps_f
temps_f = weather.loc[:,[&#39;Min TemperatureF&#39;,&#39;Mean TemperatureF&#39;, &#39;Max TemperatureF&#39;]]

# Convert temps_f to celsius: temps_c
temps_c = (temps_f-32) * 5/9

# Rename &#39;F&#39; in column names with &#39;C&#39;: temps_c.columns
temps_c.columns = temps_c.columns.str.replace(&#39;F&#39;,&#39;C&#39;)

# Print first 5 rows of temps_c
print(temps_c.head())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   Min TemperatureC  Mean TemperatureC  Max TemperatureC
0         -6.111111          -2.222222          0.000000
1         -8.333333          -6.111111         -3.888889
2         -8.888889          -4.444444          0.000000
3         -2.777778          -2.222222         -1.111111
4         -3.888889          -1.111111          1.111111
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;computing-percentage-growth-of-gdp&#34;&gt;Computing percentage growth of GDP&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

# Read &#39;GDP.csv&#39; into a DataFrame: gdp
gdp = pd.read_csv(&#39;GDP/gdp_usa.csv&#39;, index_col=&#39;DATE&#39;, parse_dates=True)

# Slice all the gdp data from 2008 onward: post2008
post2008 = gdp.loc[&#39;2008-01-01&#39;:,:]

# Print the last 8 rows of post2008
print(post2008.tail(8))
print(post2008.head(8))

# Resample post2008 by year, keeping last(): yearly
# using the alias &#39;A&#39; for annual frequency
# use the aggregation method .last() to select the last element when resampling.
yearly = post2008.resample(&#39;A&#39;).last() 

# Print yearly
print(yearly)

# Compute percentage growth of yearly: yearly[&#39;growth&#39;]
yearly[&#39;growth&#39;] = yearly.pct_change()*100

# Print yearly again
print(yearly)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;              VALUE
DATE               
2014-07-01  17569.4
2014-10-01  17692.2
2015-01-01  17783.6
2015-04-01  17998.3
2015-07-01  18141.9
2015-10-01  18222.8
2016-01-01  18281.6
2016-04-01  18436.5
              VALUE
DATE               
2008-01-01  14668.4
2008-04-01  14813.0
2008-07-01  14843.0
2008-10-01  14549.9
2009-01-01  14383.9
2009-04-01  14340.4
2009-07-01  14384.1
2009-10-01  14566.5
              VALUE
DATE               
2008-12-31  14549.9
2009-12-31  14566.5
2010-12-31  15230.2
2011-12-31  15785.3
2012-12-31  16297.3
2013-12-31  16999.9
2014-12-31  17692.2
2015-12-31  18222.8
2016-12-31  18436.5
              VALUE    growth
DATE                         
2008-12-31  14549.9       NaN
2009-12-31  14566.5  0.114090
2010-12-31  15230.2  4.556345
2011-12-31  15785.3  3.644732
2012-12-31  16297.3  3.243524
2013-12-31  16999.9  4.311144
2014-12-31  17692.2  4.072377
2015-12-31  18222.8  2.999062
2016-12-31  18436.5  1.172707
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;converting-currency-of-stocks&#34;&gt;Converting currency of stocks&lt;/h3&gt;
&lt;p&gt;Stock prices in US Dollars for the S&amp;amp;P 500 in 2015 have been obtained from Yahoo Finance. The files &lt;code&gt;sp500.csv&lt;/code&gt; for sp500 and &lt;code&gt;exchange.csv&lt;/code&gt; for the exchange rates are both provided.&lt;/p&gt;
&lt;p&gt;Using the daily exchange rate to Pounds Sterling, your task is to convert both the Open and Close column prices.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import pandas
import pandas as pd

# Read &#39;sp500.csv&#39; into a DataFrame: sp500
sp500 = pd.read_csv(&#39;sp500.csv&#39;, parse_dates=True, index_col=&#39;Date&#39;)

# Read &#39;exchange.csv&#39; into a DataFrame: exchange
exchange = pd.read_csv(&#39;exchange.csv&#39;, parse_dates=True, index_col=&#39;Date&#39;)

# Subset &#39;Open&#39; &amp;amp; &#39;Close&#39; columns from sp500: dollars
dollars = sp500.loc[:,[&#39;Open&#39;,&#39;Close&#39;]]

# Print the head of dollars
print(dollars.head())

# Convert dollars to pounds: pounds
pounds = dollars.multiply(exchange[&#39;GBP/USD&#39;], axis=&#39;rows&#39;)

# Print the head of pounds
print(pounds.head())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                   Open        Close
Date                                
2015-01-02  2058.899902  2058.199951
2015-01-05  2054.439941  2020.579956
2015-01-06  2022.150024  2002.609985
2015-01-07  2005.550049  2025.900024
2015-01-08  2030.609985  2062.139893
                   Open        Close
Date                                
2015-01-02  1340.364425  1339.908750
2015-01-05  1348.616555  1326.389506
2015-01-06  1332.515980  1319.639876
2015-01-07  1330.562125  1344.063112
2015-01-08  1343.268811  1364.126161
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Array construction routines</title>
      <link>http://othrif.github.io/technical_note/python/matplotlib/array/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlib/array/</guid>
      <description>&lt;h3 id=&#34;routines&#34;&gt;Routines&lt;/h3&gt;
&lt;p&gt;Several exist here: &lt;a href=&#34;https://numpy.org/doc/stable/reference/routines.array-creation.html?highlight=array%20creation%20routines&#34;&gt;https://numpy.org/doc/stable/reference/routines.array-creation.html?highlight=array%20creation%20routines&lt;/a&gt; &lt;br&gt;
Focus on the most used&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ones-zeros-eye-diag&#34;&gt;&lt;code&gt;ones&lt;/code&gt;, &lt;code&gt;zeros&lt;/code&gt;, &lt;code&gt;eye&lt;/code&gt;, &lt;code&gt;diag&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.ones((3, 3))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.zeros((3, 3))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.eye(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.diag((1,2,3))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 0, 0],
       [0, 2, 0],
       [0, 0, 3]])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;numbers-in-range&#34;&gt;Numbers in range&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.arange(3,13)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 3,  4,  5,  6,  7,  8,  9, 10, 11, 12])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.arange(5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([0, 1, 2, 3, 4])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.arange(1,10,2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1, 3, 5, 7, 9])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.linspace(0, 5, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([0.  , 1.25, 2.5 , 3.75, 5.  ])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;work-with-generators-fromiter&#34;&gt;Work with generators &lt;code&gt;fromiter&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;generator_expression = (i for i in range(10) if i % 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(generator_expression)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;generator
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.fromiter(generator_expression, dtype=int)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1, 3, 5, 7, 9])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;subset-numpy-arrays&#34;&gt;Subset numpy arrays&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = [4 , 9 , 6, 3, 1]
y = np.array(x)
y[1]
high = y &amp;gt; 5
y[high]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([9, 6])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(y[high])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[9 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Array construction routines</title>
      <link>http://othrif.github.io/technical_note/python/numpy/array/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/numpy/array/</guid>
      <description>&lt;h3 id=&#34;routines&#34;&gt;Routines&lt;/h3&gt;
&lt;p&gt;Several exist here: &lt;a href=&#34;https://numpy.org/doc/stable/reference/routines.array-creation.html?highlight=array%20creation%20routines&#34;&gt;https://numpy.org/doc/stable/reference/routines.array-creation.html?highlight=array%20creation%20routines&lt;/a&gt; &lt;br&gt;
Focus on the most used&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ones-zeros-eye-diag&#34;&gt;&lt;code&gt;ones&lt;/code&gt;, &lt;code&gt;zeros&lt;/code&gt;, &lt;code&gt;eye&lt;/code&gt;, &lt;code&gt;diag&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.ones((3, 3))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.zeros((3, 3))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.eye(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.diag((1,2,3))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 0, 0],
       [0, 2, 0],
       [0, 0, 3]])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;numbers-in-range&#34;&gt;Numbers in range&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.arange(3,13)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 3,  4,  5,  6,  7,  8,  9, 10, 11, 12])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.arange(5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([0, 1, 2, 3, 4])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.arange(1,10,2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1, 3, 5, 7, 9])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.linspace(0, 5, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([0.  , 1.25, 2.5 , 3.75, 5.  ])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;work-with-generators-fromiter&#34;&gt;Work with generators &lt;code&gt;fromiter&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;generator_expression = (i for i in range(10) if i % 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(generator_expression)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;generator
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.fromiter(generator_expression, dtype=int)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1, 3, 5, 7, 9])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;subset-numpy-arrays&#34;&gt;Subset numpy arrays&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = [4 , 9 , 6, 3, 1]
y = np.array(x)
y[1]
high = y &amp;gt; 5
y[high]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([9, 6])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(y[high])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[9 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Array indexing</title>
      <link>http://othrif.github.io/technical_note/python/matplotlib/indexing/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlib/indexing/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;basics&#34;&gt;Basics&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary = np.array([1,2,3,4,5])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary[:3] # equivalent to ary[0:3]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2d = np.array([[1,2,3,3],[4,5,6,1],[2,52,36,1]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2d
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 1,  2,  3,  3],
       [ 4,  5,  6,  1],
       [ 2, 52, 36,  1]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2d[1,2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2d[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([4, 5, 6])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2d[0] # entire first row
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2d[:,0] # entire first column
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1, 4])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2d[1:3,2:4] # bottom 2x2 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 6,  1],
       [36,  1]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2d[:,:2] # first two columns
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 1,  2],
       [ 4,  5],
       [ 2, 52]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Array indexing</title>
      <link>http://othrif.github.io/technical_note/python/numpy/indexing/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/numpy/indexing/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;basics&#34;&gt;Basics&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary = np.array([1,2,3,4,5])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary[:3] # equivalent to ary[0:3]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2d = np.array([[1,2,3,3],[4,5,6,1],[2,52,36,1]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2d
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 1,  2,  3,  3],
       [ 4,  5,  6,  1],
       [ 2, 52, 36,  1]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2d[1,2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2d[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([4, 5, 6])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2d[0] # entire first row
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2d[:,0] # entire first column
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1, 4])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2d[1:3,2:4] # bottom 2x2 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 6,  1],
       [36,  1]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2d[:,:2] # first two columns
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 1,  2],
       [ 4,  5],
       [ 2, 52]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Array math and universal functions</title>
      <link>http://othrif.github.io/technical_note/python/matplotlib/array_math/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlib/array_math/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;universal-functions&#34;&gt;Universal functions&lt;/h3&gt;
&lt;p&gt;NumPy provides vectorized wrappers for performing element-wise operations implicitly via &lt;code&gt;ufuncs&lt;/code&gt; – short for universal functions&lt;br&gt;
&lt;code&gt;ufuncs&lt;/code&gt; are implemented in compiled C code and very fast and efficient compared to vanilla Python &lt;br&gt;
Checkout more details here: &lt;a href=&#34;https://numpy.org/doc/stable/reference/ufuncs.html?highlight=ufuncs&#34;&gt;https://numpy.org/doc/stable/reference/ufuncs.html?highlight=ufuncs&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;binary-ufuncs&#34;&gt;Binary ufuncs&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;add&lt;/code&gt;, &lt;code&gt;subtract&lt;/code&gt;, &lt;code&gt;divide&lt;/code&gt;, &lt;code&gt;multiply&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Using list comprehension:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lst = [[1,2,3],[4,5,6],[7,8,9]]
[[cell+1 for cell in row] for row in lst] 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[2, 3, 4], [5, 6, 7], [8, 9, 10]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using Numpy &lt;code&gt;add&lt;/code&gt; ufunc&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lst = [[1,2,3],[4,5,6],[7,8,9]]
ary = np.array(lst)
ary = np.add(ary,1)
print(ary)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[ 2  3  4]
 [ 5  6  7]
 [ 8  9 10]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also uses operator overloading with math symbols: &lt;code&gt;+,-,/,*,**&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary = np.array(lst)
ary+1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 2,  3,  4],
       [ 5,  6,  7],
       [ 8,  9, 10]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(ary+1)**2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[  4,   9,  16],
       [ 25,  36,  49],
       [ 64,  81, 100]])
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;unary-ufuncs&#34;&gt;Unary ufuncs&lt;/h4&gt;
&lt;p&gt;Unary ufuncs: &lt;code&gt;log&lt;/code&gt;, &lt;code&gt;log10&lt;/code&gt;, &lt;code&gt;exp&lt;/code&gt;, &lt;code&gt;sqrt&lt;/code&gt;&lt;br&gt;
&lt;code&gt;reduce&lt;/code&gt;: compute the sum or product of array element along a given axis. By default, axis=0 for rows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.add.reduce(ary) # sum along rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([12, 15, 18])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.add.reduce(ary,axis=1) # sum along columns
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 6, 15, 24])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;shorthands:  &lt;code&gt;add.reduce&lt;/code&gt; = &lt;code&gt;sum&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary.sum(axis=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 6, 15, 24])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sum(ary, axis=1) # equivalent to ary.sum(...)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 6, 15, 24])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary.sum() # sum over all elements of the array
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;45
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;other-unary-ufuncs&#34;&gt;Other unary ufuncs&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mean&lt;/code&gt;: computes the mean&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std&lt;/code&gt;: computes the standard deviation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var&lt;/code&gt;: computes variance&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.sort&lt;/code&gt;: sorts an array 
&lt;a href=&#34;https://docs.scipy.org/doc/numpy/reference/generated/numpy.sort.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.argsort&lt;/code&gt;: returns indices that would sort an array&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.min&lt;/code&gt;: returns the minimum value of an array&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.max&lt;/code&gt;: returns the maximum value of an array&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.argmin&lt;/code&gt;: returns the index of the minimum value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.argmax&lt;/code&gt;: returns the index of the maximum value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.array_equal&lt;/code&gt;: returns if the two arrays have the same shape and elements&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary.mean(axis=0) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([4., 5., 6.])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary_std = ary.std(axis=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary_var = ary.var(axis=1) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.array_equal(ary_std**2,ary_var)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary=np.array([[3,11,8],[10,9,209]])
ary
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[  3,  11,   8],
       [ 10,   9, 209]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sort(ary) # sort along the last axis, i.e. columns
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 1,  3,  8],
       [ 2,  9, 10]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sort(ary,axis=1) # sort along the columns
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 1,  3,  8],
       [ 2,  9, 10]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sort(ary,axis=0) # sort along the rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 3,  1,  2],
       [10,  9,  8]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sort(ary,axis=None) # sort along flatened array 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 1,  2,  3,  8,  9, 10])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.argsort(ary,axis=0) # sort along the rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[0, 0, 1],
       [1, 1, 0]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
np.min(ary,axis=1) # find min along columns
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([3, 9])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.max(ary,axis=0) # find max along rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 10,  11, 209])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.argmax(ary, axis=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1, 0, 1])
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Array math and universal functions</title>
      <link>http://othrif.github.io/technical_note/python/numpy/array_math/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/numpy/array_math/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;universal-functions&#34;&gt;Universal functions&lt;/h3&gt;
&lt;p&gt;NumPy provides vectorized wrappers for performing element-wise operations implicitly via &lt;code&gt;ufuncs&lt;/code&gt; – short for universal functions&lt;br&gt;
&lt;code&gt;ufuncs&lt;/code&gt; are implemented in compiled C code and very fast and efficient compared to vanilla Python &lt;br&gt;
Checkout more details here: &lt;a href=&#34;https://numpy.org/doc/stable/reference/ufuncs.html?highlight=ufuncs&#34;&gt;https://numpy.org/doc/stable/reference/ufuncs.html?highlight=ufuncs&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;binary-ufuncs&#34;&gt;Binary ufuncs&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;add&lt;/code&gt;, &lt;code&gt;subtract&lt;/code&gt;, &lt;code&gt;divide&lt;/code&gt;, &lt;code&gt;multiply&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Using list comprehension:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lst = [[1,2,3],[4,5,6],[7,8,9]]
[[cell+1 for cell in row] for row in lst] 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[2, 3, 4], [5, 6, 7], [8, 9, 10]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using Numpy &lt;code&gt;add&lt;/code&gt; ufunc&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lst = [[1,2,3],[4,5,6],[7,8,9]]
ary = np.array(lst)
ary = np.add(ary,1)
print(ary)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[ 2  3  4]
 [ 5  6  7]
 [ 8  9 10]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also uses operator overloading with math symbols: &lt;code&gt;+,-,/,*,**&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary = np.array(lst)
ary+1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 2,  3,  4],
       [ 5,  6,  7],
       [ 8,  9, 10]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(ary+1)**2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[  4,   9,  16],
       [ 25,  36,  49],
       [ 64,  81, 100]])
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;unary-ufuncs&#34;&gt;Unary ufuncs&lt;/h4&gt;
&lt;p&gt;Unary ufuncs: &lt;code&gt;log&lt;/code&gt;, &lt;code&gt;log10&lt;/code&gt;, &lt;code&gt;exp&lt;/code&gt;, &lt;code&gt;sqrt&lt;/code&gt;&lt;br&gt;
&lt;code&gt;reduce&lt;/code&gt;: compute the sum or product of array element along a given axis. By default, axis=0 for rows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.add.reduce(ary) # sum along rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([12, 15, 18])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.add.reduce(ary,axis=1) # sum along columns
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 6, 15, 24])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;shorthands:  &lt;code&gt;add.reduce&lt;/code&gt; = &lt;code&gt;sum&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary.sum(axis=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 6, 15, 24])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sum(ary, axis=1) # equivalent to ary.sum(...)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 6, 15, 24])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary.sum() # sum over all elements of the array
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;45
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;other-unary-ufuncs&#34;&gt;Other unary ufuncs&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mean&lt;/code&gt;: computes the mean&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std&lt;/code&gt;: computes the standard deviation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var&lt;/code&gt;: computes variance&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.sort&lt;/code&gt;: sorts an array 
&lt;a href=&#34;https://docs.scipy.org/doc/numpy/reference/generated/numpy.sort.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.argsort&lt;/code&gt;: returns indices that would sort an array&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.min&lt;/code&gt;: returns the minimum value of an array&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.max&lt;/code&gt;: returns the maximum value of an array&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.argmin&lt;/code&gt;: returns the index of the minimum value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.argmax&lt;/code&gt;: returns the index of the maximum value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.array_equal&lt;/code&gt;: returns if the two arrays have the same shape and elements&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary.mean(axis=0) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([4., 5., 6.])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary_std = ary.std(axis=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary_var = ary.var(axis=1) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.array_equal(ary_std**2,ary_var)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary=np.array([[3,11,8],[10,9,209]])
ary
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[  3,  11,   8],
       [ 10,   9, 209]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sort(ary) # sort along the last axis, i.e. columns
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 1,  3,  8],
       [ 2,  9, 10]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sort(ary,axis=1) # sort along the columns
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 1,  3,  8],
       [ 2,  9, 10]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sort(ary,axis=0) # sort along the rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 3,  1,  2],
       [10,  9,  8]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sort(ary,axis=None) # sort along flatened array 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 1,  2,  3,  8,  9, 10])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.argsort(ary,axis=0) # sort along the rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[0, 0, 1],
       [1, 1, 0]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
np.min(ary,axis=1) # find min along columns
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([3, 9])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.max(ary,axis=0) # find max along rows
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 10,  11, 209])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.argmax(ary, axis=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1, 0, 1])
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ASCII vs Unicode</title>
      <link>http://othrif.github.io/technical_note/linux/basics/ascii_unicode/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/linux/basics/ascii_unicode/</guid>
      <description>&lt;p&gt;1 byte = 8-bit&lt;/p&gt;
&lt;h3 id=&#34;ascii&#34;&gt;ASCII&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;extended ASCII&lt;/code&gt; or &lt;code&gt;8-bit ASCII&lt;/code&gt; has $2^8 = 256$ characters maximum&lt;/li&gt;
&lt;li&gt;Complete table for &lt;code&gt;8-bit ASCII&lt;/code&gt; here: &lt;a href=&#34;https://theasciicode.com.ar/&#34;&gt;https://theasciicode.com.ar/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Original ASCII has $2^7 = 128$, with 8th bit as a parity bit&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;unicode&#34;&gt;Unicode&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Unicode is a superset of ASCII&lt;/li&gt;
&lt;li&gt;UTF-8: minimum 8 bits.&lt;/li&gt;
&lt;li&gt;UTF-16: minimum 16 bits.&lt;/li&gt;
&lt;li&gt;UTF-32: minimum and maximum 32 bits&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Attaching nonlocal variables to nested functions</title>
      <link>http://othrif.github.io/technical_note/python/basics/function_closure/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/function_closure/</guid>
      <description>&lt;h3 id=&#34;nested-function&#34;&gt;Nested function&lt;/h3&gt;
&lt;p&gt;A function dened inside another function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# outer function
def parent():
    # nested function
    def child():
        pass
    return child
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;nonlocal-variables&#34;&gt;Nonlocal variables&lt;/h3&gt;
&lt;p&gt;Variables dened in the parent function that are used by the child function&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def parent(arg_1, arg_2):
    # From child()&#39;s point of view,
    # `value` and `my_dict` are nonlocal variables,
    # as are `arg_1` and `arg_2`.
    value = 22
    my_dict = {&#39;chocolate&#39;: &#39;yummy&#39;}
    def child():
        print(2 * value)
        print(my_dict[&#39;chocolate&#39;])
        print(arg_1 + arg_2)
    return child
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_func = parent([1], [2,3,4])
print(my_func)
my_func()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;function parent.&amp;lt;locals&amp;gt;.child at 0x10c0cb048&amp;gt;
44
yummy
[1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;closure&#34;&gt;Closure&lt;/h3&gt;
&lt;p&gt;Nonlocal variables attached to a returned function&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;new_function = parent(3, 4)
print([cell.cell_contents for cell in new_function.__closure__])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[3, 4, {&#39;chocolate&#39;: &#39;yummy&#39;}, 22]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;checking-for-closure&#34;&gt;Checking for closure&lt;/h3&gt;
&lt;p&gt;Values passed to &lt;code&gt;return_a_func()&lt;/code&gt; are still accessible to the new function returned, even after the program has left the scope of &lt;code&gt;return_a_func()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Values get added to a function&amp;rsquo;s closure in the order they are defined in the enclosing function (in this case, &lt;code&gt;arg1&lt;/code&gt; and then &lt;code&gt;arg2&lt;/code&gt;), but only if they are used in the nested function. That is, if &lt;code&gt;return_a_func()&lt;/code&gt; took a third argument (e.g., &lt;code&gt;arg3&lt;/code&gt;) that wasn&amp;rsquo;t used by &lt;code&gt;new_func()&lt;/code&gt;, then it would not be captured in &lt;code&gt;new_func()&lt;/code&gt;&#39;s closure.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def return_a_func(arg1, arg2, arg3):
  def new_func():
    print(&#39;arg1 was {}&#39;.format(arg1))
    print(&#39;arg2 was {}&#39;.format(arg2))
  return new_func
    
my_func = return_a_func(2, 17, &#39;hello&#39;)

print(my_func.__closure__ is not None)
print(len(my_func.__closure__))

# Get the values of the variables in the closure
closure_values = [
  my_func.__closure__[i].cell_contents for i in range(2)
]
print(closure_values)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
2
[2, 17]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;closure-keep-your-values-safe&#34;&gt;Closure keep your values safe&lt;/h3&gt;
&lt;p&gt;no matter what you do to &lt;code&gt;my_special_function()&lt;/code&gt; after passing it to &lt;code&gt;get_new_func()&lt;/code&gt;, the new function still mimics the behavior of the original &lt;code&gt;my_special_function()&lt;/code&gt; because it is in the new function&amp;rsquo;s closure.
even if you delete &lt;code&gt;my_special_function()&lt;/code&gt;, you can still call &lt;code&gt;new_func()&lt;/code&gt; without any problems.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def my_special_function():
  print(&#39;You are running my_special_function()&#39;)
  
def get_new_func(func):
  def call_func():
    func()
  return call_func

new_func = get_new_func(my_special_function)

# Delete my_special_function()
del(my_special_function)

new_func()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;You are running my_special_function()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;be-aware&#34;&gt;Be aware!!!&lt;/h3&gt;
&lt;p&gt;you could run into memory issues if you wound up adding a very large array or object to the closure, and has resolved to keep her eye out for that sort of problem.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Attribute naming conventions</title>
      <link>http://othrif.github.io/technical_note/python/basics/naming_conventions/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/naming_conventions/</guid>
      <description>&lt;h3 id=&#34;_name&#34;&gt;&lt;code&gt;_name&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;A convention for internal details of implementation.
A helper method that checks the validity of an attribute&amp;rsquo;s value but isn&amp;rsquo;t considered a part of class&amp;rsquo;s public interface.&lt;/p&gt;
&lt;p&gt;if you see an attribute name with one leading underscore in someone&amp;rsquo;s class - don&amp;rsquo;t use it! The class developer trusts you with this responsibility.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# MODIFY to add class attributes for max number of days and months
class BetterDate:
  
    _MAX_DAYS = 30
    _MAX_MONTH = 12
    
    def __init__(self, year, month, day):
      self.year, self.month, self.day = year, month, day
      
    @classmethod
    def from_str(cls, datestr):
        year, month, day = map(int, datestr.split(&amp;quot;-&amp;quot;))
        return cls(year, month, day)
    
    # Add _is_valid() checking day and month values
    def _is_valid(self):
        if self.day &amp;lt;= BetterDate._MAX_DAYS and self.month &amp;lt;= BetterDate._MAX_MONTH:
            return True
        else:
            return False
         
bd1 = BetterDate(2020, 4, 30)
print(bd1._is_valid())

bd2 = BetterDate(2020, 6, 45)
print(bd2._is_valid())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
False
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;__name&#34;&gt;&lt;code&gt;__name&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Used for attributes that should not be inherited to aviod name clashes in child classes.
A version attribute that stores the current version of the class and shoulnd&amp;rsquo;t be passed to child classes, who will have their own versions.&lt;/p&gt;
&lt;h3 id=&#34;__name__&#34;&gt;&lt;code&gt;__name__&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Reserved for built-in methods. A method that is run whenever the object is printed, constructor called, etc&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Automate visuzliation with unique()</title>
      <link>http://othrif.github.io/technical_note/python/matplotlibtmp/automateplot/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlibtmp/automateplot/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
import pandas as pd

summer_2016_medals = pd.read_csv(&#39;summer2016.csv&#39;, index_col=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;unique-values-of-a-column&#34;&gt;Unique values of a column&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Extract the &amp;quot;Sport&amp;quot; column
sports_column = summer_2016_medals[&#39;Sport&#39;]

# Find the unique values of the &amp;quot;Sport&amp;quot; column
sports = sports_column.unique()

# Print out the unique sports values
print(sports)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Rowing&#39; &#39;Taekwondo&#39; &#39;Handball&#39; &#39;Wrestling&#39; &#39;Gymnastics&#39; &#39;Swimming&#39;
 &#39;Basketball&#39; &#39;Boxing&#39; &#39;Volleyball&#39; &#39;Athletics&#39; &#39;Rugby Sevens&#39; &#39;Judo&#39;
 &#39;Rhythmic Gymnastics&#39; &#39;Weightlifting&#39; &#39;Equestrianism&#39; &#39;Badminton&#39;
 &#39;Water Polo&#39; &#39;Football&#39; &#39;Fencing&#39; &#39;Shooting&#39; &#39;Sailing&#39; &#39;Beach Volleyball&#39;
 &#39;Canoeing&#39; &#39;Hockey&#39; &#39;Cycling&#39; &#39;Tennis&#39; &#39;Diving&#39; &#39;Table Tennis&#39;
 &#39;Triathlon&#39; &#39;Archery&#39; &#39;Synchronized Swimming&#39; &#39;Modern Pentathlon&#39;
 &#39;Trampolining&#39; &#39;Golf&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;automate-plotting&#34;&gt;Automate plotting&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots()

# Loop over the different sports branches
for sport in sports:
  # Extract the rows only for this sport
  sport_df = summer_2016_medals[summer_2016_medals[&#39;Sport&#39;] == sport]
  # Add a bar for the &amp;quot;Weight&amp;quot; mean with std y error bar
  ax.bar(sport, sport_df[&#39;Weight&#39;].mean(), yerr=sport_df[&#39;Weight&#39;].std())

ax.set_ylabel(&amp;quot;Weight&amp;quot;)
ax.set_xticklabels(sports, rotation=90)

# Save the figure to file
fig.savefig(&#39;sports_weights.png&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;automateplot_5_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic plotting</title>
      <link>http://othrif.github.io/technical_note/python/matplotlibtmp/basicplot/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlibtmp/basicplot/</guid>
      <description>&lt;h3 id=&#34;useful-links&#34;&gt;Useful links:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Gallery of example plots: &lt;a href=&#34;https://matplotlib.org/3.1.1/gallery/index.html&#34;&gt;https://matplotlib.org/3.1.1/gallery/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;visualizing images: &lt;a href=&#34;https://matplotlib.org/3.1.1/tutorials/introductory/images.html&#34;&gt;https://matplotlib.org/3.1.1/tutorials/introductory/images.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Animations: &lt;a href=&#34;https://matplotlib.org/3.1.1/api/animation_api.html&#34;&gt;https://matplotlib.org/3.1.1/api/animation_api.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Geospatial data: &lt;a href=&#34;https://scitools.org.uk/cartopy/docs/v0.15/matplotlib/intro.html&#34;&gt;https://scitools.org.uk/cartopy/docs/v0.15/matplotlib/intro.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Statistical visualization (Pandas + Matplotlib): &lt;a href=&#34;https://seaborn.pydata.org/examples/index.html&#34;&gt;https://seaborn.pydata.org/examples/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import matplotlib.pyplot as plt
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;line-plot&#34;&gt;Line plot&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = [1, 2, 3, 4,10]
y = [10, 15, 17, 20,30]
plt.plot(x,y)

plt.xlabel(&#39;x-label&#39;)
plt.ylabel(&#39;y-label&#39;)
plt.title(&#39;My Title&#39;)
plt.yticks([0,5,10,15,20,25,30,40],
          [&#39;zero&#39;, &#39;five&#39;, &#39;ten&#39;, &#39;fifteen&#39;, &#39;twenty&#39;, &#39;twenty five&#39;, &#39;thirty&#39;, &#39;fourty&#39;])

plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;basicplot_4_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Basics of plotting</title>
      <link>http://othrif.github.io/technical_note/python/matplotlibtmp/basicsplot/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlibtmp/basicsplot/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;line-plot&#34;&gt;Line plot&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = [1, 2, 3, 4,10]
y = [10, 15, 17, 20,30]
plt.plot(x,y)

plt.xlabel(&#39;x-label&#39;)
plt.ylabel(&#39;y-label&#39;)
plt.title(&#39;My Title&#39;)
plt.yticks([0,5,10,15,20,25,30,40],
          [&#39;zero&#39;, &#39;five&#39;, &#39;ten&#39;, &#39;fifteen&#39;, &#39;twenty&#39;, &#39;twenty five&#39;, &#39;thirty&#39;, &#39;fourty&#39;])

plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&amp;lt;ipython-input-2-cb2c01bc2d6f&amp;gt; in &amp;lt;module&amp;gt;
      1 x = [1, 2, 3, 4,10]
      2 y = [10, 15, 17, 20,30]
----&amp;gt; 3 plt.plot(x,y)
      4 
      5 plt.xlabel(&#39;x-label&#39;)


NameError: name &#39;plt&#39; is not defined
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;scatter-plot&#34;&gt;Scatter plot&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.clf()
plt.scatter(x,y)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;basicsplot_5_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;change-size-of-bullets&#34;&gt;Change size of bullets&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.clf()
size = [100,30,2000,50,1000]
plt.scatter(x,y,s=size)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.collections.PathCollection at 0x111e8f160&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;basicsplot_7_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;add-colours&#34;&gt;Add colours&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.clf()
col = [&#39;yellow&#39;, &#39;orange&#39;, &#39;red&#39;, &#39;blue&#39;, &#39;violet&#39;]
plt.scatter(x,y,s=size,c=col)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.collections.PathCollection at 0x1120e2128&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;basicsplot_9_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;make-transparent&#34;&gt;make transparent&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.clf()
col = [&#39;yellow&#39;, &#39;orange&#39;, &#39;red&#39;, &#39;blue&#39;, &#39;violet&#39;]
plt.scatter(x,y,s=size,c=col, alpha=0.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.collections.PathCollection at 0x11944c588&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;basicsplot_11_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;add-text-and-grid&#34;&gt;Add text and grid&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.clf()
col = [&#39;yellow&#39;, &#39;orange&#39;, &#39;red&#39;, &#39;blue&#39;, &#39;violet&#39;]
plt.scatter(x,y,s=size,c=col, alpha=0.5)

# Additional customizations
plt.text(2, 10, &#39;India&#39;)
plt.text(6, 25, &#39;China&#39;)

# Add grid() call
plt.grid(True)

plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;basicsplot_13_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;histogram&#34;&gt;Histogram&lt;/h3&gt;
&lt;p&gt;type &lt;code&gt;help(plt.hist)&lt;/code&gt; for help&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;life_exp = [43.828, 76.423, 72.301, 42.731, 75.32, 81.235, 79.829, 75.635, 64.062, 79.441, 56.728, 65.554, 74.852, 50.728, 72.39, 73.005, 52.295, 49.58, 59.723, 50.43, 80.653, 44.74100000000001, 50.651, 78.553, 72.961, 72.889, 65.152, 46.462, 55.322, 78.782, 48.328, 75.748, 78.273, 76.486, 78.332, 54.791, 72.235, 74.994, 71.33800000000002, 71.878, 51.57899999999999, 58.04, 52.947, 79.313, 80.657, 56.735, 59.448, 79.406, 60.022, 79.483, 70.259, 56.007, 46.38800000000001, 60.916, 70.19800000000001, 82.208, 73.33800000000002, 81.757, 64.69800000000001, 70.65, 70.964, 59.545, 78.885, 80.745, 80.546, 72.567, 82.603, 72.535, 54.11, 67.297, 78.623, 77.58800000000002, 71.993, 42.592, 45.678, 73.952, 59.44300000000001, 48.303, 74.241, 54.467, 64.164, 72.801, 76.195, 66.803, 74.543, 71.164, 42.082, 62.069, 52.90600000000001, 63.785, 79.762, 80.204, 72.899, 56.867, 46.859, 80.196, 75.64, 65.483, 75.53699999999998, 71.752, 71.421, 71.688, 75.563, 78.098, 78.74600000000002, 76.442, 72.476, 46.242, 65.528, 72.777, 63.062, 74.002, 42.56800000000001, 79.972, 74.663, 77.926, 48.159, 49.339, 80.941, 72.396, 58.556, 39.613, 80.884, 81.70100000000002, 74.143, 78.4, 52.517, 70.616, 58.42, 69.819, 73.923, 71.777, 51.542, 79.425, 78.242, 76.384, 73.747, 74.249, 73.422, 62.698, 42.38399999999999, 43.487]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.hist(life_exp, 10)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;basicsplot_16_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.clf() # Clear the current figure.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Figure size 432x288 with 0 Axes&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.hist(life_exp, bins=20)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;basicsplot_18_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Binary Tree</title>
      <link>http://othrif.github.io/technical_note/python/interview/binarytree/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/interview/binarytree/</guid>
      <description>&lt;h1 id=&#34;implement-a-binary-tree-data-structure&#34;&gt;Implement a binary tree data structure&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Node:
    
    def __init__(self, content=10):
        self.content = content
        self.right = None
        self.left = None 
        
    def sum_nodes(self):
        &amp;quot;&amp;quot;&amp;quot; Return the sum of contents in all nodes&amp;quot;&amp;quot;&amp;quot;
        sum = self.content
        if self.right != None or self.left != None:
            #do something
            sum += self.right.sum_nodes() + self.left.sum_nodes()
        #else:
            #do something
        return sum
        
    
node = Node(10) 
print(node.content)

node_right = Node(11)
node_left = Node(12)

node.right = node_right
node.left = node_left 

print(node.sum_nodes())

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;10
33
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Binary, Octal, and Hexadecimal Integers</title>
      <link>http://othrif.github.io/technical_note/python/basics/bin_dec_hex/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/bin_dec_hex/</guid>
      <description>&lt;h1 id=&#34;summary-table&#34;&gt;Summary table&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;{&amp;quot;Decimal&amp;quot;:&amp;lt;10} {&amp;quot;Binary&amp;quot;:&amp;lt;15} {&amp;quot;Hexadecimal&amp;quot;:&amp;lt;10}&#39;)
for i in range(32):
    i_bin = bin(i)
    i_oct = oct(i)
    i_hex = hex(i)
    print(f&#39;{i:10} {i_bin:15} {i_hex:10}&#39;)
for i in range(5,10):
    i = 2**i
    i_bin = bin(i)
    i_oct = oct(i)
    i_hex = hex(i)
    print(f&#39;{i:10} {i_bin:15} {i_hex:10}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Decimal    Binary          Hexadecimal
         0 0b0             0x0       
         1 0b1             0x1       
         2 0b10            0x2       
         3 0b11            0x3       
         4 0b100           0x4       
         5 0b101           0x5       
         6 0b110           0x6       
         7 0b111           0x7       
         8 0b1000          0x8       
         9 0b1001          0x9       
        10 0b1010          0xa       
        11 0b1011          0xb       
        12 0b1100          0xc       
        13 0b1101          0xd       
        14 0b1110          0xe       
        15 0b1111          0xf       
        16 0b10000         0x10      
        17 0b10001         0x11      
        18 0b10010         0x12      
        19 0b10011         0x13      
        20 0b10100         0x14      
        21 0b10101         0x15      
        22 0b10110         0x16      
        23 0b10111         0x17      
        24 0b11000         0x18      
        25 0b11001         0x19      
        26 0b11010         0x1a      
        27 0b11011         0x1b      
        28 0b11100         0x1c      
        29 0b11101         0x1d      
        30 0b11110         0x1e      
        31 0b11111         0x1f      
        32 0b100000        0x20      
        64 0b1000000       0x40      
       128 0b10000000      0x80      
       256 0b100000000     0x100     
       512 0b1000000000    0x200     
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;convert-to-binary&#34;&gt;Convert to Binary&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 79
# Base 2(binary)
bin_a = bin(a)
print(bin_a)
print(int(bin_a, 2)) #Base 2(binary)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b1001111
79
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;convert-to-octal&#34;&gt;Convert to Octal&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 79
# Base 8(octal)
oct_a = oct(a)
print(oct_a)
print(int(oct_a, 8))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0o117
79
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;convert-to-hexadecimal&#34;&gt;Convert to Hexadecimal&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 79
# Base 16(hexadecimal)
hex_a = hex(a)
print(hex_a)
print(int(hex_a, 16))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0x4f
79
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Bitwise Operations</title>
      <link>http://othrif.github.io/technical_note/cpp/basics/strings/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/cpp/basics/strings/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
using namespace std;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;string-size&#34;&gt;String size&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{
string str = &amp;quot;hello&amp;quot;;
cout &amp;lt;&amp;lt; &amp;quot;String size is &amp;quot; &amp;lt;&amp;lt; str.length() &amp;lt;&amp;lt; endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;String size is 5
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;string-append&#34;&gt;String append&lt;/h3&gt;
&lt;p&gt;For one character, use &lt;code&gt;pash_back()&lt;/code&gt; otherwise &lt;code&gt;append()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{
string inStr = &amp;quot;123&amp;quot;; 
string outStr = &amp;quot;&amp;quot;; 
outStr.append(&amp;quot;4&amp;quot;); 
outStr.append(inStr);
char x = &#39;X&#39;;
outStr.push_back(x); // Valid when appending 1 char
cout &amp;lt;&amp;lt; outStr &amp;lt;&amp;lt; endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;4123X
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;string-check-space&#34;&gt;String check space&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{string str = &amp;quot; HEY &amp;quot;;
 
 for(size_t i = 0; i&amp;lt;str.length(); i++){
     if( isspace(str[i]) )
         cout &amp;lt;&amp;lt; &amp;quot;Found space!&amp;quot; &amp;lt;&amp;lt; endl;
     else
         cout &amp;lt;&amp;lt; &amp;quot;Space Not found!&amp;quot; &amp;lt;&amp;lt; endl;
 }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Found space!
Space Not found!
Space Not found!
Space Not found!
Found space!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{string str = &amp;quot; &amp;quot;;
if(str == &amp;quot; &amp;quot;)
    cout &amp;lt;&amp;lt; &amp;quot;Found!&amp;quot; &amp;lt;&amp;lt; endl;
 else
     cout &amp;lt;&amp;lt; &amp;quot;Not found!&amp;quot; &amp;lt;&amp;lt; endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Found!
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;erase-a-string&#34;&gt;Erase a string&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{
    string str (&amp;quot;This is an example sentence.&amp;quot;);
    str.erase (str.begin()+5, str.end()-9);
    cout &amp;lt;&amp;lt; str &amp;lt;&amp;lt; endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;This sentence.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;copy-string-to-char-array&#34;&gt;Copy string to char array&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;cstring&amp;gt;
using namespace std;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{std::string s = &amp;quot;Hello World!&amp;quot;;

char cstr[s.size() + 1]; // +1 for /0 character
strcpy(cstr, s.c_str()); // or pass &amp;amp;s[0]

std::cout &amp;lt;&amp;lt; cstr &amp;lt;&amp;lt; &#39;\n&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Hello World!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;alternatively, if you will not remember &lt;code&gt;strcpy&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{
    std::string s = &amp;quot;Hello World!&amp;quot;;
    char cstr[s.size() + 1]; // +1 for /0 character
    for (int i=0; i&amp;lt;s.size(); i++)
        cstr[i] = s[i];
    std::cout &amp;lt;&amp;lt; cstr &amp;lt;&amp;lt; &#39;\n&#39;;
    
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Hello World!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Boolean operators with Numpy</title>
      <link>http://othrif.github.io/technical_note/python/matplotlib/boolean_manip/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlib/boolean_manip/</guid>
      <description>&lt;p&gt;The operational operators like &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;=&lt;/code&gt; worked with Numpy arrays out of the box. Unfortunately, this is not true for the boolean operators and, or, and not&lt;br&gt;
To use these operators with Numpy, you will need &lt;code&gt;np.logical_and()&lt;/code&gt;, &lt;code&gt;np.logical_or()&lt;/code&gt; and &lt;code&gt;np.logical_not()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
my_house = np.array([18.0, 20.0, 10.75, 9.50])
your_house = np.array([14.0, 24.0, 14.25, 9.0])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.logical_or(my_house&amp;gt;18.5,my_house&amp;lt;10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(np.logical_or(my_house&amp;lt;11,your_house&amp;lt;11))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[False False  True  True]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Boolean operators with Numpy</title>
      <link>http://othrif.github.io/technical_note/python/numpy/boolean_manip/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/numpy/boolean_manip/</guid>
      <description>&lt;p&gt;The operational operators like &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;=&lt;/code&gt; worked with Numpy arrays out of the box. Unfortunately, this is not true for the boolean operators and, or, and not&lt;br&gt;
To use these operators with Numpy, you will need &lt;code&gt;np.logical_and()&lt;/code&gt;, &lt;code&gt;np.logical_or()&lt;/code&gt; and &lt;code&gt;np.logical_not()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
my_house = np.array([18.0, 20.0, 10.75, 9.50])
your_house = np.array([14.0, 24.0, 14.25, 9.0])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.logical_or(my_house&amp;gt;18.5,my_house&amp;lt;10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(np.logical_or(my_house&amp;lt;11,your_house&amp;lt;11))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[False False  True  True]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Boolean operators with Pandas</title>
      <link>http://othrif.github.io/technical_note/python/pandas/boolean_manip/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/boolean_manip/</guid>
      <description>&lt;h3 id=&#34;generate-some-data&#34;&gt;Generate some data&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

# Build cars DataFrame
names = [&#39;United States&#39;, &#39;Australia&#39;, &#39;Japan&#39;, &#39;India&#39;, &#39;Russia&#39;, &#39;Morocco&#39;, &#39;Egypt&#39;]
dr =  [True, False, False, False, True, True, True]
cpc = [809, 731, 588, 18, 200, 70, 45]
row_labels = [&#39;US&#39;, &#39;AUS&#39;, &#39;JPN&#39;, &#39;IN&#39;, &#39;RU&#39;, &#39;MOR&#39;, &#39;EG&#39;]
cars_dict = {&#39;country&#39;:names, &#39;drives_right&#39;:dr, &#39;cars_per_cap&#39;:cpc }
cars = pd.DataFrame(cars_dict)
cars.index = row_labels
print(cars)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;           country  drives_right  cars_per_cap
US   United States          True           809
AUS      Australia         False           731
JPN          Japan         False           588
IN           India         False            18
RU          Russia          True           200
MOR        Morocco          True            70
EG           Egypt          True            45
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars[cars[&#39;drives_right&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;country&lt;/th&gt;
      &lt;th&gt;drives_right&lt;/th&gt;
      &lt;th&gt;cars_per_cap&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;US&lt;/th&gt;
      &lt;td&gt;United States&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;809&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;RU&lt;/th&gt;
      &lt;td&gt;Russia&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;200&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MOR&lt;/th&gt;
      &lt;td&gt;Morocco&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;EG&lt;/th&gt;
      &lt;td&gt;Egypt&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;45&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
cpc = cars[&#39;cars_per_cap&#39;]
between = np.logical_and(cpc&amp;gt;100,cpc&amp;lt;500)
medium = cars[between]
print(medium)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   country  drives_right  cars_per_cap
RU  Russia          True           200
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Broadcasting</title>
      <link>http://othrif.github.io/technical_note/python/matplotlib/broadcasting/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlib/broadcasting/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;broadcasting&#34;&gt;Broadcasting&lt;/h3&gt;
&lt;p&gt;Broadcasting allows us to perform vectorized operations between two arrays even if their dimensions do not match by creating implicit multidimensional grids&lt;/p&gt;
&lt;p&gt;different dimensions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.array([1,2,3])+1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([2, 3, 4])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;same dimensions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary1 = np.array([1,2,3])
ary2 = np.array([2,4,1])
ary1+ary2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([3, 6, 4])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;different shapes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary3 = np.array([[2,4,1],[1,2,3]])
ary1+ary3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[3, 6, 4],
       [2, 4, 6]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;number of elements along the explicit axes and the implicit grid have to match:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
    print(ary1 + np.array([2,3]))
except ValueError as e:
    print(&#39;ValueError:&#39;, e)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ValueError: operands could not be broadcast together with shapes (3,) (2,) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the 2-element array must have two elements along its first axis as well&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary3 + np.array([[2], [3]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[4, 6, 3],
       [4, 5, 6]])
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Broadcasting</title>
      <link>http://othrif.github.io/technical_note/python/numpy/broadcasting/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/numpy/broadcasting/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;broadcasting&#34;&gt;Broadcasting&lt;/h3&gt;
&lt;p&gt;Broadcasting allows us to perform vectorized operations between two arrays even if their dimensions do not match by creating implicit multidimensional grids&lt;/p&gt;
&lt;p&gt;different dimensions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.array([1,2,3])+1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([2, 3, 4])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;same dimensions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary1 = np.array([1,2,3])
ary2 = np.array([2,4,1])
ary1+ary2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([3, 6, 4])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;different shapes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary3 = np.array([[2,4,1],[1,2,3]])
ary1+ary3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[3, 6, 4],
       [2, 4, 6]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;number of elements along the explicit axes and the implicit grid have to match:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
    print(ary1 + np.array([2,3]))
except ValueError as e:
    print(&#39;ValueError:&#39;, e)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ValueError: operands could not be broadcast together with shapes (3,) (2,) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the 2-element array must have two elements along its first axis as well&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary3 + np.array([[2], [3]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[4, 6, 3],
       [4, 5, 6]])
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Build a generator</title>
      <link>http://othrif.github.io/technical_note/python/pandas/generator/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/generator/</guid>
      <description>&lt;h3 id=&#34;generator-vs-list&#34;&gt;Generator vs. List&lt;/h3&gt;
&lt;p&gt;List comprehensions and generator expressions look very similar in their syntax, except for the use of parentheses () in generator expressions and brackets [] in list comprehensions.A list comprehension produces a list as output, a generator produces a generator object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fellowship = [&#39;frodo&#39;, &#39;samwise&#39;, &#39;merry&#39;, &#39;aragorn&#39;, &#39;legolas&#39;, &#39;boromir&#39;, &#39;gimli&#39;]

# List comprehension
fellow1 = [member for member in fellowship if len(member) &amp;gt;= 7]

# Generator expression
fellow2 = (member for member in fellowship if len(member) &amp;gt;= 7)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;generate-with-range-and-next&#34;&gt;Generate with &lt;code&gt;range()&lt;/code&gt; and &lt;code&gt;next()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Note that the for-loop start printing where the last call of &lt;code&gt;next()&lt;/code&gt; got to.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create generator object: result
result = (i for i in range(31))

# Print the first 5 values
print(next(result))
print(next(result))
print(next(result))
print(next(result))
print(next(result))

# Print the rest of the values
for value in result:
    print(value)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;generator-function&#34;&gt;Generator function&lt;/h3&gt;
&lt;p&gt;Generator functions are functions that, like generator expressions, yield a series of values, instead of returning a single value. A generator function is defined as you do a regular function, but whenever it generates a value, it uses the keyword &lt;code&gt;yield&lt;/code&gt; instead of &lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create a list of strings
lannister = [&#39;cersei&#39;, &#39;jaime&#39;, &#39;tywin&#39;, &#39;tyrion&#39;, &#39;joffrey&#39;]

# Define generator function get_lengths
def get_lengths(input_list):
    &amp;quot;&amp;quot;&amp;quot;Generator function that yields the
    length of the strings in input_list.&amp;quot;&amp;quot;&amp;quot;

    # Yield the length of a string
    for person in input_list:
        yield len(person)

# Print the values generated by get_lengths()
for value in get_lengths(lannister):
    print(value)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;6
5
5
6
7
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Built-in functions</title>
      <link>http://othrif.github.io/technical_note/python/basics/builtin_functions/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/builtin_functions/</guid>
      <description>&lt;h3 id=&#34;list-of-most-widely-used-python-built-in-functions&#34;&gt;List of most widely used python built-in functions&lt;/h3&gt;
&lt;h4 id=&#34;help-or-module&#34;&gt;&lt;code&gt;help&lt;/code&gt; or &lt;code&gt;?&amp;lt;module&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;get help on any &lt;code&gt;__builtin__&lt;/code&gt; module&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;?help
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[0;31mSignature:[0m   [0mhelp[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwds[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;31mType:[0m        _Helper
[0;31mString form:[0m Type help() for interactive help, or help(object) for help about object.
[0;31mNamespace:[0m   Python builtin
[0;31mFile:[0m        /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/_sitebuiltins.py
[0;31mDocstring:[0m  
Define the builtin &#39;help&#39;.

This is a wrapper around pydoc.help that provides a helpful message
when &#39;help&#39; is typed at the Python interactive prompt.

Calling help() at the Python prompt starts an interactive help session.
Calling help(thing) prints help for the python object &#39;thing&#39;.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(help)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Help on _Helper in module _sitebuiltins object:

class _Helper(builtins.object)
 |  Define the builtin &#39;help&#39;.
 |  
 |  This is a wrapper around pydoc.help that provides a helpful message
 |  when &#39;help&#39; is typed at the Python interactive prompt.
 |  
 |  Calling help() at the Python prompt starts an interactive help session.
 |  Calling help(thing) prints help for the python object &#39;thing&#39;.
 |  
 |  Methods defined here:
 |  
 |  __call__(self, *args, **kwds)
 |      Call self as a function.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;round&#34;&gt;&lt;code&gt;round()&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&#34;max&#34;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&#34;other&#34;&gt;Other&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def demofunc(a,b):
  &amp;quot;&amp;quot;&amp;quot;
//This function is to demonstrate a few built-in functions in Python
  &amp;quot;&amp;quot;&amp;quot;
  print(&amp;quot;Begin&amp;quot;)
  print(max(a,b))
  print(abs(a),abs(b))
  print(float(a),b)
  print(callable(a))
  print(hash(a),hash(b))
  print(len(&#39;ab&#39;))
  print(type(a))
  for i in range(2,4): print(i)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;demofunc(3,4)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Begin
4
3 4
3.0 4
False
3 4
2
&amp;lt;class &#39;int&#39;&amp;gt;
2
3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Built-in object methods</title>
      <link>http://othrif.github.io/technical_note/python/basics/builtin_methods/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/builtin_methods/</guid>
      <description>&lt;h1 id=&#34;list-of-most-widely-used-methods-per-object-type&#34;&gt;List of most widely used methods per object type&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Everything = object&lt;/li&gt;
&lt;li&gt;Objects have methods associated depending on type&lt;/li&gt;
&lt;li&gt;Unlike functions, methods are only called on an object (list, str, etc.)&lt;/li&gt;
&lt;li&gt;Methods can alter the object&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;list-methods&#34;&gt;list methods&lt;/h2&gt;
&lt;p&gt;See all methods by typing &lt;code&gt;help(list)&lt;/code&gt; and scroll down after &lt;code&gt;__...__&lt;/code&gt;, you start seeing the methods&lt;/p&gt;
&lt;h4 id=&#34;index&#34;&gt;&lt;code&gt;index()&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mylist = [1,2,&#39;hello&#39;,&#39;othmane&#39;,2,3,4,&#39;hello&#39;]
mylist.index(&#39;othmane&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;count&#34;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mylist.count(&#39;hello&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;append&#34;&gt;&lt;code&gt;append()&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mylist.append(&#39;really&#39;)
mylist
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 2, &#39;hello&#39;, &#39;othmane&#39;, 2, 3, 4, &#39;hello&#39;, &#39;really&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;reverse&#34;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create list areas
areas = [11.25, 18.0, 20.0, 10.75, 9.50]

# Use append twice to add poolhouse and garage size
areas.append(24.5)
areas.append(15.45)

# Print out areas
print(areas)

# Reverse the orders of the elements in areas
areas.reverse()

# Print out areas
print(areas)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[11.25, 18.0, 20.0, 10.75, 9.5, 24.5, 15.45]
[15.45, 24.5, 9.5, 10.75, 20.0, 18.0, 11.25]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;str-methods&#34;&gt;str methods&lt;/h2&gt;
&lt;h4 id=&#34;capitalize&#34;&gt;&lt;code&gt;capitalize()&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mystr = &#39;othmane&#39;
mystr.capitalize()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Othmane&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;replace&#34;&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mystr.replace(&#39;h&#39;,&#39;H&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;otHmane&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;index-1&#34;&gt;&lt;code&gt;index()&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mystr.index(&#39;h&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Builtins</title>
      <link>http://othrif.github.io/technical_note/python/basics/builtins/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/builtins/</guid>
      <description>&lt;p&gt;To query builtins, you&amp;rsquo;ll need to import builtins because the name builtins is not itself built in&amp;hellip;No, I’m serious!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import builtins
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;module &#39;builtins&#39; (built-in)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;print a list of all the names in the module &lt;code&gt;builtins&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dir(builtins)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;ArithmeticError&#39;,
 &#39;AssertionError&#39;,
 &#39;AttributeError&#39;,
 &#39;BaseException&#39;,
 &#39;BlockingIOError&#39;,
 &#39;BrokenPipeError&#39;,
 &#39;BufferError&#39;,
 &#39;BytesWarning&#39;,
 &#39;ChildProcessError&#39;,
 &#39;ConnectionAbortedError&#39;,
 &#39;ConnectionError&#39;,
 &#39;ConnectionRefusedError&#39;,
 &#39;ConnectionResetError&#39;,
 &#39;DeprecationWarning&#39;,
 &#39;EOFError&#39;,
 &#39;Ellipsis&#39;,
 &#39;EnvironmentError&#39;,
 &#39;Exception&#39;,
 &#39;False&#39;,
 &#39;FileExistsError&#39;,
 &#39;FileNotFoundError&#39;,
 &#39;FloatingPointError&#39;,
 &#39;FutureWarning&#39;,
 &#39;GeneratorExit&#39;,
 &#39;IOError&#39;,
 &#39;ImportError&#39;,
 &#39;ImportWarning&#39;,
 &#39;IndentationError&#39;,
 &#39;IndexError&#39;,
 &#39;InterruptedError&#39;,
 &#39;IsADirectoryError&#39;,
 &#39;KeyError&#39;,
 &#39;KeyboardInterrupt&#39;,
 &#39;LookupError&#39;,
 &#39;MemoryError&#39;,
 &#39;ModuleNotFoundError&#39;,
 &#39;NameError&#39;,
 &#39;None&#39;,
 &#39;NotADirectoryError&#39;,
 &#39;NotImplemented&#39;,
 &#39;NotImplementedError&#39;,
 &#39;OSError&#39;,
 &#39;OverflowError&#39;,
 &#39;PendingDeprecationWarning&#39;,
 &#39;PermissionError&#39;,
 &#39;ProcessLookupError&#39;,
 &#39;RecursionError&#39;,
 &#39;ReferenceError&#39;,
 &#39;ResourceWarning&#39;,
 &#39;RuntimeError&#39;,
 &#39;RuntimeWarning&#39;,
 &#39;StopAsyncIteration&#39;,
 &#39;StopIteration&#39;,
 &#39;SyntaxError&#39;,
 &#39;SyntaxWarning&#39;,
 &#39;SystemError&#39;,
 &#39;SystemExit&#39;,
 &#39;TabError&#39;,
 &#39;TimeoutError&#39;,
 &#39;True&#39;,
 &#39;TypeError&#39;,
 &#39;UnboundLocalError&#39;,
 &#39;UnicodeDecodeError&#39;,
 &#39;UnicodeEncodeError&#39;,
 &#39;UnicodeError&#39;,
 &#39;UnicodeTranslateError&#39;,
 &#39;UnicodeWarning&#39;,
 &#39;UserWarning&#39;,
 &#39;ValueError&#39;,
 &#39;Warning&#39;,
 &#39;ZeroDivisionError&#39;,
 &#39;__IPYTHON__&#39;,
 &#39;__build_class__&#39;,
 &#39;__debug__&#39;,
 &#39;__doc__&#39;,
 &#39;__import__&#39;,
 &#39;__loader__&#39;,
 &#39;__name__&#39;,
 &#39;__package__&#39;,
 &#39;__spec__&#39;,
 &#39;abs&#39;,
 &#39;all&#39;,
 &#39;any&#39;,
 &#39;ascii&#39;,
 &#39;bin&#39;,
 &#39;bool&#39;,
 &#39;breakpoint&#39;,
 &#39;bytearray&#39;,
 &#39;bytes&#39;,
 &#39;callable&#39;,
 &#39;chr&#39;,
 &#39;classmethod&#39;,
 &#39;compile&#39;,
 &#39;complex&#39;,
 &#39;copyright&#39;,
 &#39;credits&#39;,
 &#39;delattr&#39;,
 &#39;dict&#39;,
 &#39;dir&#39;,
 &#39;display&#39;,
 &#39;divmod&#39;,
 &#39;enumerate&#39;,
 &#39;eval&#39;,
 &#39;exec&#39;,
 &#39;filter&#39;,
 &#39;float&#39;,
 &#39;format&#39;,
 &#39;frozenset&#39;,
 &#39;get_ipython&#39;,
 &#39;getattr&#39;,
 &#39;globals&#39;,
 &#39;hasattr&#39;,
 &#39;hash&#39;,
 &#39;help&#39;,
 &#39;hex&#39;,
 &#39;id&#39;,
 &#39;input&#39;,
 &#39;int&#39;,
 &#39;isinstance&#39;,
 &#39;issubclass&#39;,
 &#39;iter&#39;,
 &#39;len&#39;,
 &#39;license&#39;,
 &#39;list&#39;,
 &#39;locals&#39;,
 &#39;map&#39;,
 &#39;max&#39;,
 &#39;memoryview&#39;,
 &#39;min&#39;,
 &#39;next&#39;,
 &#39;object&#39;,
 &#39;oct&#39;,
 &#39;open&#39;,
 &#39;ord&#39;,
 &#39;pow&#39;,
 &#39;print&#39;,
 &#39;property&#39;,
 &#39;range&#39;,
 &#39;repr&#39;,
 &#39;reversed&#39;,
 &#39;round&#39;,
 &#39;set&#39;,
 &#39;setattr&#39;,
 &#39;slice&#39;,
 &#39;sorted&#39;,
 &#39;staticmethod&#39;,
 &#39;str&#39;,
 &#39;sum&#39;,
 &#39;super&#39;,
 &#39;tuple&#39;,
 &#39;type&#39;,
 &#39;vars&#39;,
 &#39;zip&#39;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Centrality, variability, modality</title>
      <link>http://othrif.github.io/technical_note/math/stats/descriptive/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/math/stats/descriptive/</guid>
      <description>&lt;h3 id=&#34;centrality&#34;&gt;Centrality&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mean&lt;/li&gt;
&lt;li&gt;Median&lt;/li&gt;
&lt;li&gt;Mode&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;variability&#34;&gt;Variability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Variance ($\sigma^2$): Measurement of the spread between numbers in a data set&lt;/li&gt;
&lt;li&gt;Standard deviation ($\sigma$): square root of the variance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;True population variance: $ \sigma^2 = \frac{\sum{\left(x-\mu\right)^2}}{N} $ &lt;br&gt;
Unbiased sample variance: $ \sigma^2 = \frac{\sum{\left(x-\bar{x}\right)^2}}{n-1} $ &lt;br&gt;
Biased sample variance: $ \sigma^2 = \frac{\sum{\left(x-\bar{x}\right)^2}}{n} $&lt;/p&gt;
&lt;p&gt;We typically want the unbiased sample variance&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def calc_mean(x, n):
    return sum(x)/n

def calc_var(x, n):
    &#39;&#39;&#39;
    Calculate variance using numpy array x
    &#39;&#39;&#39;
    mean = calc_mean(x,n)
    return sum(np.power(x-mean,2))/n

def calc_var_list(x, n):
    &#39;&#39;&#39;
    Calculate variance using list x
    &#39;&#39;&#39;
    mean = sum(x)/n
    return sum( pow(el - mean,2) for el in x )/n
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nums = [1, 2, 3, 4, 5]
nums_arr = np.array(nums)
print(f&#39;Variance calculated using a numpy array: {calc_var(nums_arr, len(nums_arr))}&#39;)
print(f&#39;Variance calculated using a list : {calc_var_list(nums, len(nums))}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Variance calculated using a numpy array: 2.0
Variance calculated using a list : 2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
from matplotlib import pyplot as plt

N = 100000 # population size
population =  np.random.randint(1, 101, N)
true_mean = calc_mean(population, N)
true_var  = calc_var(population, N)
plt.title(&#39;Uniform distribution&#39;)
plt.hist(population)
plt.show()
print(f&#39;Popluation true mean: {population.mean():.2f}, calculated: {true_mean:.2f}&#39;)
print(f&#39;Popluation true variance: {population.var():.2f}, calculated: {true_var:.2f}&#39;)

cum_mean_var = {&#39;mean&#39;: [], &#39;var&#39;: [], &#39;var_unb&#39;: []}

for i in range(100):
    pop = np.random.choice(population, int((i+1)/100 * N))
    cum_mean_var[&#39;mean&#39;].append(calc_mean(pop, len(pop)))
    cum_mean_var[&#39;var&#39;].append(calc_var(pop, len(pop)))
    cum_mean_var[&#39;var_unb&#39;].append(calc_var(pop, len(pop)-1))
plt.plot(cum_mean_var[&#39;mean&#39;])
plt.title(&#39;Cumulative sample mean&#39;)
plt.hlines(true_mean, 0,100, colors=&#39;r&#39;)
plt.show()
plt.title(&#39;Cumulative sample biased variance&#39;)
plt.plot(cum_mean_var[&#39;var&#39;])
plt.hlines(true_var, 0,100, colors=&#39;r&#39;)
plt.show()
plt.title(&#39;Cumulative sample unbiased variance&#39;)
plt.plot(cum_mean_var[&#39;var_unb&#39;])
plt.hlines(true_var, 0,100, colors=&#39;r&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;descriptive_5_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Popluation true mean: 50.47, calculated: 50.47
Popluation true variance: 833.32, calculated: 833.32
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;descriptive_5_2.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;descriptive_5_3.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;descriptive_5_4.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t see a clear distinction between biased (/n) and unbiased (/(n-1))sample variance.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Check if 2 strings are anagrams</title>
      <link>http://othrif.github.io/technical_note/codingproblems/anagram/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/codingproblems/anagram/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution():
    
    def __init__(self,s1,s2):
        self.s1=s1
        self.s2=s2
        
    def anagram(self):
        c1={}
        c2={}
        return self.countchar(self.s1)==self.countchar(self.s2)
    
    def countchar(self,s):
        h={}
        for c in s:
            if c in h:
                h[c]+=1
            else:
                h[c]=1
        return h
        
    
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;word = Solution(&#39;word&#39;, &#39;wodr&#39;)
word.anagram()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;word = Solution(&#39;dog&#39;, &#39;dogg&#39;)
word.anagram()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Choosing a style</title>
      <link>http://othrif.github.io/technical_note/python/matplotlibtmp/plotstyle/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlibtmp/plotstyle/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Available styles: &lt;a href=&#34;https://matplotlib.org/gallery/style_sheets/style_sheets_reference.html&#34;&gt;https://matplotlib.org/gallery/style_sheets/style_sheets_reference.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
import pandas as pd

seattle_weather = pd.read_csv(&#39;seattle_weather.csv&#39;).loc[:11]
austin_weather = pd.read_csv(&#39;austin_weather.csv&#39;)
seattle_weather[&#39;MONTH&#39;] = pd.to_datetime(seattle_weather[&#39;DATE&#39;], format=&#39;%m&#39;).dt.month_name().str.slice(stop=3)
austin_weather[&#39;MONTH&#39;] = pd.to_datetime(austin_weather[&#39;DATE&#39;], format=&#39;%m&#39;).dt.month_name().str.slice(stop=3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def plot_style(style=&#39;default&#39;):
    plt.style.use(style)
    fig, ax = plt.subplots()

    # Add Seattle temperature data in each month with error bars
    ax.errorbar(seattle_weather[&#39;MONTH&#39;], seattle_weather[&#39;MLY-TAVG-NORMAL&#39;], yerr=seattle_weather[&#39;MLY-TAVG-STDDEV&#39;])

    # Add Austin temperature data in each month with error bars
    ax.errorbar(austin_weather[&#39;MONTH&#39;], austin_weather[&#39;MLY-TAVG-NORMAL&#39;], yerr=austin_weather[&#39;MLY-TAVG-STDDEV&#39;]) 
    
    # Set the y-axis label
    ax.set_ylabel(&#39;Temperature (Fahrenheit)&#39;)

    plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;default&#34;&gt;default&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plot_style(&#39;default&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;plotstyle_5_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;ggplot-r-style&#34;&gt;ggplot R style&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plot_style(&#39;ggplot&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;plotstyle_7_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;style-bmh&#34;&gt;style: bmh&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plot_style(&#39;bmh&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;plotstyle_9_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;seaborn-colorblind&#34;&gt;seaborn colorblind&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plot_style(&#39;seaborn-colorblind&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;plotstyle_11_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;tableau-colorblind&#34;&gt;tableau colorblind&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plot_style(&#39;tableau-colorblind10&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;plotstyle_13_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;black-and-white&#34;&gt;black and white&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plot_style(&#39;grayscale&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;plotstyle_15_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class inheritance</title>
      <link>http://othrif.github.io/technical_note/python/basics/class_inheritance/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/class_inheritance/</guid>
      <description>&lt;h3 id=&#34;class-inheritance&#34;&gt;Class inheritance&lt;/h3&gt;
&lt;p&gt;Allows us to reuse and customize code without rewriting existing code. By calling methods of the parent class within the child class, we reuse all the code in those methods, making our code concise and manageable.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Manager&lt;/code&gt; employee &amp;ldquo;is-a&amp;rdquo; &lt;code&gt;Employee&lt;/code&gt; = &amp;lsquo;is-a&amp;rsquo; Relationship.
Example of customizing functionality via inheritance&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Employee:
  MIN_SALARY = 30000    

  def __init__(self, name, salary=MIN_SALARY):
      self.name = name
      if salary &amp;gt;= Employee.MIN_SALARY:
        self.salary = salary
      else:
        self.salary = Employee.MIN_SALARY
  def give_raise(self, amount):
    self.salary += amount      
        
# Manager class inherits from Employee class and add a display method
class Manager(Employee):
    def display(self):
      print(&amp;quot;Manager &amp;quot;+self.name)

    def __init__(self, name, salary=50000, project=None):
        Employee.__init__(self, name, salary)
        self.project = project

    def give_raise(self,amount,bonus=1.05):
        Employee.give_raise(self, amount*bonus)

mng = Manager(&amp;quot;Debbie Lashko&amp;quot;, 86500)
print(mng.name)

# Call mng.display()
mng.display()

mngr = Manager(&amp;quot;Ashta Dunbar&amp;quot;, 78500)
mngr.give_raise(1000)
print(mngr.salary)
mngr.give_raise(2000)
print(mngr.salary)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Debbie Lashko
Manager Debbie Lashko
79550.0
81650.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;inheritance-of-class-attributes&#34;&gt;Inheritance of class attributes&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Boss(Employee):
    MIN_SALARY = 300000
 

e = Employee(&#39;employee&#39;)
b = Boss(&#39;boss&#39;)

print(&amp;quot;e.MIN_SALARY = &amp;quot;, e.MIN_SALARY)
print(&amp;quot;b.MIN_SALARY = &amp;quot;, b.MIN_SALARY)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;e.MIN_SALARY =  30000
b.MIN_SALARY =  300000
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Class vs Object vs Instance</title>
      <link>http://othrif.github.io/technical_note/python/basics/class_object_instance/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/class_object_instance/</guid>
      <description>&lt;p&gt;An &lt;strong&gt;object&lt;/strong&gt; is a software bundle of related &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;behavior&lt;/code&gt;. A &lt;strong&gt;class&lt;/strong&gt; is a blueprint or prototype from which &lt;code&gt;objects&lt;/code&gt; are created. An &lt;strong&gt;instance&lt;/strong&gt; is a single and unique unit of a class.&lt;/p&gt;
&lt;p&gt;Example, we have a blueprint (class) represents student (object) with fields like name, age, course (class member). And we have 2 students here, Foo and Bob. So, Foo and Bob is 2 different instances of the class (Student class) that represent object (Student people).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Class-level attributes, alternative constructors, and inheritance of class methods</title>
      <link>http://othrif.github.io/technical_note/python/basics/class_att/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/class_att/</guid>
      <description>&lt;p&gt;Class level attributes store data that is shared among all the class instances. They are assigned values in the class body and are refered to using the &lt;code&gt;ClassName&lt;/code&gt; rather than &lt;code&gt;self&lt;/code&gt; syntax&lt;/p&gt;
&lt;h3 id=&#34;class-level-data&#34;&gt;Class-level data&lt;/h3&gt;
&lt;p&gt;use &lt;code&gt;ClassName.ATTR_NAME&lt;/code&gt; to accessthe class attribute value&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Player:
    MAX_POSITION = 10
    MAX_SPEED = 3
    
    def __init__(self):
        self.position = 0

    # Add a move() method with steps parameter
    def move(self, steps):
        self.position += steps
        if self.position &amp;gt;= Player.MAX_POSITION:
            self.position = Player.MAX_POSITION
       
    # This method provides a rudimentary visualization in the console    
    def draw(self):
        drawing = &amp;quot;-&amp;quot; * self.position + &amp;quot;|&amp;quot; +&amp;quot;-&amp;quot;*(Player.MAX_POSITION - self.position)
        print(drawing)

p = Player(); p.draw()
p.move(4); p.draw()
p.move(5); p.draw()
p.move(3); p.draw()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;|----------
----|------
---------|-
----------|
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;p1, p2 = Player(), Player()

print(&amp;quot;MAX_SPEED of p1 and p2 before assignment:&amp;quot;)
print(p1.MAX_SPEED)
print(p2.MAX_SPEED)

# Modify class attribute
Player.MAX_SPEED = 7

print(&amp;quot;MAX_SPEED of p1 and p2 after assignment of class attribute:&amp;quot;)
print(p1.MAX_SPEED)
print(p2.MAX_SPEED)
print(&amp;quot;MAX_SPEED of Player:&amp;quot;)
print(Player.MAX_SPEED)

# Modify instance attribute
p1.MAX_SPEED = 0

print(&amp;quot;MAX_SPEED of p1 and p2 after assignment of instance attribute:&amp;quot;)
print(p1.MAX_SPEED)
print(p2.MAX_SPEED)
print(&amp;quot;MAX_SPEED of Player:&amp;quot;)
print(Player.MAX_SPEED)


&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;MAX_SPEED of p1 and p2 before assignment:
7
7
MAX_SPEED of p1 and p2 after assignment of class attribute:
7
7
MAX_SPEED of Player:
7
MAX_SPEED of p1 and p2 after assignment of instance attribute:
0
7
MAX_SPEED of Player:
7
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;alternative-constructors&#34;&gt;Alternative constructors&lt;/h3&gt;
&lt;p&gt;Define class methods as well, using the &lt;code&gt;@classmethod&lt;/code&gt; decorator and a special first argument cls. The main use of class methods is defining methods that return an instance of the class, but aren&amp;rsquo;t using the same code as &lt;code&gt;__init__()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# import datetime from datetime
from datetime import datetime

class BetterDate:
    def __init__(self, year, month, day):
      self.year, self.month, self.day = year, month, day
      
    @classmethod
    def from_str(cls, datestr):
        year, month, day = map(int, datestr.split(&amp;quot;-&amp;quot;))
        return cls(year, month, day)
        
    # Define a class method from_datetime accepting a datetime object
    @classmethod
    def from_datetime(cls, datetime):
        return cls(datetime.year, datetime.month, datetime.day)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bd_def = BetterDate(2020,7,3)   
print(bd_def.year)
print(bd_def.month)
print(bd_def.day)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2020
7
3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bd_str = BetterDate.from_str(&amp;quot;2020-7-3&amp;quot;)   
print(bd_str.year)
print(bd_str.month)
print(bd_str.day)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2020
7
3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;today = datetime.today()     
bd = BetterDate.from_datetime(today)   
print(bd.year)
print(bd.month)
print(bd.day)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2020
7
3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;inheritance-of-class-methods&#34;&gt;Inheritance of class methods&lt;/h3&gt;
&lt;p&gt;To customize the parent&amp;rsquo;s class method in a child class, start with a &lt;code&gt;@classmethod&lt;/code&gt; decorator, and define a method with the same name in the child&amp;rsquo;s class, just like you did with regular methods.&lt;/p&gt;
&lt;p&gt;The only difference is that to call the parent&amp;rsquo;s class method within the child&amp;rsquo;s method, you can use &lt;code&gt;ClassName.method_name(args...)&lt;/code&gt; without passing &lt;code&gt;self&lt;/code&gt; or &lt;code&gt;cls&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Define an EvenBetterDate class and customize from_str
class EvenBetterDate(BetterDate):
    @classmethod
    def from_str(self, datestr, format=&#39;YYYY-MM-DD&#39;):
        if format==&#39;YYYY-MM-DD&#39;:
            return BetterDate.from_str(datestr)
        elif format == &#39;DD-MM-YYYY&#39;:
            day,month,year = datestr.split(&#39;-&#39;)
            return BetterDate.from_str((&#39;-&#39;).join([year, month, day]))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ebd_str = EvenBetterDate.from_str(&#39;02-12-2019&#39;, format=&#39;DD-MM-YYYY&#39;)
print(ebd_str.year)
ebd_dt = EvenBetterDate.from_datetime(datetime.today())
print(ebd_dt.year)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2019
2020
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Class-level attributes, alternative constructors, and inheritance of class methods</title>
      <link>http://othrif.github.io/technical_note/python/basics/class_dataframe/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/class_dataframe/</guid>
      <description>&lt;h3 id=&#34;customize-the-constructor-of-the-dataframe&#34;&gt;Customize the constructor of the DataFrame&lt;/h3&gt;
&lt;p&gt;implement a small LoggedDF class that inherits from a regular pandas DataFrame but has a created_at attribute storing the timestamp.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import pandas as pd
import pandas as pd

# Define LoggedDF inherited from pd.DataFrame and add the constructor
class LoggedDF(pd.DataFrame):
  
  def __init__(self, *args, **kwargs):
    pd.DataFrame.__init__(self, *args, **kwargs)
    self.created_at = datetime.today()
    
    
ldf = LoggedDF({&amp;quot;col1&amp;quot;: [1,2], &amp;quot;col2&amp;quot;: [3,4]})
print(ldf.values)
print(ldf.created_at)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[1 3]
 [2 4]]
2020-07-03 14:14:13.578281
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;customize-a-method-of-the-dataframe&#34;&gt;Customize a method of the DataFrame&lt;/h3&gt;
&lt;p&gt;Using &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; allows you to not worry about keeping the signature of your customized method compatible. Notice how in the very last line, you called the parent method and passed an object to it that isn&amp;rsquo;t self. When you call parent methods in the class, they should accept some object as the first argument, and that object is usually &lt;code&gt;self&lt;/code&gt;, but it doesn&amp;rsquo;t have to be!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import pandas as pd
import pandas as pd

# Define LoggedDF inherited from pd.DataFrame and add the constructor
class LoggedDF(pd.DataFrame):
  
  def __init__(self, *args, **kwargs):
    pd.DataFrame.__init__(self, *args, **kwargs)
    self.created_at = datetime.today()
    
  def to_csv(self, *args, **kwargs):
    # Copy self to a temporary DataFrame
    temp = self.copy()
    
    # Create a new column filled with self.created at
    temp[&amp;quot;created_at&amp;quot;] = self.created_at
    
    # Call pd.DataFrame.to_csv on temp with *args and **kwargs
    pd.DataFrame.to_csv(temp, *args, **kwargs)
    
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ldf = LoggedDF({&amp;quot;col1&amp;quot;: [1,2], &amp;quot;col2&amp;quot;: [3,4]})
print(ldf.values)
print(ldf.created_at)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[1 3]
 [2 4]]
2020-07-03 14:14:14.769906
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Classification in Scikit-Learn with Iris</title>
      <link>http://othrif.github.io/technical_note/python/sklearn/classification_sklearn/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/sklearn/classification_sklearn/</guid>
      <description>&lt;h3 id=&#34;exploratory-data-analysis-eda&#34;&gt;Exploratory data analysis (EDA)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn import datasets
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
plt.style.use(&#39;ggplot&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;iris = datasets.load_iris()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;iris.keys()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dict_keys([&#39;data&#39;, &#39;target&#39;, &#39;target_names&#39;, &#39;DESCR&#39;, &#39;feature_names&#39;, &#39;filename&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(iris.data), type(iris.target)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(numpy.ndarray, numpy.ndarray)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;iris.data.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(150, 4)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;iris.target_names
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([&#39;setosa&#39;, &#39;versicolor&#39;, &#39;virginica&#39;], dtype=&#39;&amp;lt;U10&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;iris.feature_names
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;sepal length (cm)&#39;,
 &#39;sepal width (cm)&#39;,
 &#39;petal length (cm)&#39;,
 &#39;petal width (cm)&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;X = iris.data
y = iris.target
df = pd.DataFrame(X, columns=iris.feature_names)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;sepal length (cm)&lt;/th&gt;
      &lt;th&gt;sepal width (cm)&lt;/th&gt;
      &lt;th&gt;petal length (cm)&lt;/th&gt;
      &lt;th&gt;petal width (cm)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;5.1&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;1.4&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;4.9&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;1.4&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;4.7&lt;/td&gt;
      &lt;td&gt;3.2&lt;/td&gt;
      &lt;td&gt;1.3&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4.6&lt;/td&gt;
      &lt;td&gt;3.1&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;3.6&lt;/td&gt;
      &lt;td&gt;1.4&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;_ = pd.plotting.scatter_matrix(df, c = y, figsize = [8,8], s = 150, marker = &#39;D&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;classification_sklearn_11_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Clustering with k-means</title>
      <link>http://othrif.github.io/technical_note/python/sklearn/clustering_kmeans/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/sklearn/clustering_kmeans/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn import datasets
iris = datasets.load_iris()
data = iris[&#39;data&#39;]
features = iris[&#39;feature_names&#39;]
target = iris[&#39;target&#39;]
target_names = iris[&#39;target_names&#39;]

# map target labels to species names =&amp;gt; Ground Truth
species = target_names[target]
print(species)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import KMeans
from sklearn.cluster import KMeans

# Create a KMeans instance with 3 clusters: model
model = KMeans(n_clusters=3)

# Fit model to points
model.fit(data)

# Determine the cluster labels of iris data: labels =&amp;gt; Prediction
labels = model.predict(data)

# can also use: labels = model.fit_predict(data)

# Calculate inertia: Measures how spread out the clusters are (lower is be!er) 
print(model.inertia_)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;78.85144142614601
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import pyplot
import matplotlib.pyplot as plt

# Assign the columns of new_points: xs and ys
xs = data[:,0]
ys = data[:,2]

fig, ax = plt.subplots()
# Make a scatter plot of xs and ys, using labels to define the colors
ax.scatter(xs, ys, c=labels, alpha=0.3)

# Assign the cluster centers: centroids
centroids = model.cluster_centers_

# Assign the columns of centroids: centroids_x, centroids_y
centroids_x = centroids[:,0]
centroids_y = centroids[:,2]

# Make a scatter plot of centroids_x and centroids_y
ax.scatter(centroids_x, centroids_y, marker=&#39;D&#39;, s=100, color=&#39;r&#39;)
ax.set_title(&#39;K-means clustering of Iris dataset&#39;)
ax.set_xlabel(features[0])
ax.set_ylabel(features[2])
plt.show()

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;clustering_kmeans_3_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;compare-ground-truth-to-prediction&#34;&gt;Compare ground truth to prediction&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
df = pd.DataFrame({&#39;labels&#39;: labels, &#39;species&#39;: species})
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ct = pd.crosstab(df[&#39;labels&#39;], df[&#39;species&#39;])
print(ct)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;species  setosa  versicolor  virginica
labels                                
0             0          48         14
1            50           0          0
2             0           2         36
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;what-is-the-best-clusters-to-choose&#34;&gt;What is the best clusters to choose?&lt;/h3&gt;
&lt;p&gt;The elbow rule, the point where the decrease slows down&lt;br&gt;
See below, &lt;strong&gt;3 is a good choice&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ks = range(1, 10)
inertias = []

for k in ks:
    # Create a KMeans instance with k clusters: model
    model = KMeans(n_clusters=k)
    
    # Fit model to samples
    model.fit(data)
    
    # Append the inertia to the list of inertias
    inertias.append(model.inertia_)
    
# Plot ks vs inertias
plt.plot(ks, inertias, &#39;-o&#39;)
plt.xlabel(&#39;number of clusters, k&#39;)
plt.ylabel(&#39;inertia&#39;)
plt.xticks(ks)
plt.show()

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;clustering_kmeans_8_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;pipelines-with-kmeans-and-standardscaller&#34;&gt;Pipelines with Kmeans and StandardScaller&lt;/h2&gt;
&lt;h3 id=&#34;standard-scaller&#34;&gt;Standard scaller&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;in kmeans: feature variance = feature influence&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StandardScaller&lt;/code&gt; transforms each feature to have mean 0 and variance 1&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
df = pd.read_csv(&#39;fish.csv&#39;, header=None) # prevent first row from becoming header
samples = df.iloc[:,1:].to_numpy()
species = df.iloc[:,0].to_numpy()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Perform the necessary imports
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

# Create scaler: scaler
scaler = StandardScaler()

# Create KMeans instance: kmeans
kmeans = KMeans(n_clusters=4)

# Create pipeline: pipeline
pipeline = make_pipeline(scaler, kmeans)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Fit the pipeline to samples
pipeline.fit(samples)

# Calculate the cluster labels: labels
labels = pipeline.predict(samples)

# Create a DataFrame with labels and species as columns: df
df = pd.DataFrame({&#39;labels&#39;:labels, &#39;species&#39;:species})

# Create crosstab: ct
ct = pd.crosstab(df[&#39;labels&#39;], df[&#39;species&#39;])

# Display ct
print(ct)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;species  Bream  Pike  Roach  Smelt
labels                            
0           33     0      1      0
1            1     0     19      1
2            0    17      0      0
3            0     0      0     13
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;full-pipeline-with-stocks&#34;&gt;Full pipeline with stocks&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
df = pd.read_csv(&#39;stock.csv&#39;)
df.head()
movements = df.iloc[:,1:].to_numpy()
companies = df.iloc[:,0].to_numpy()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Perform the necessary imports
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import Normalizer
from sklearn.cluster import KMeans

# Create a normalizer: normalizer
normalizer = Normalizer()

# Create a KMeans model with 10 clusters: kmeans
kmeans = KMeans(n_clusters=10)

# Make a pipeline chaining normalizer and kmeans: pipeline
pipeline = make_pipeline(normalizer, kmeans)

# Fit pipeline to the daily price movements
pipeline.fit(movements)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Pipeline(memory=None,
         steps=[(&#39;normalizer&#39;, Normalizer(copy=True, norm=&#39;l2&#39;)),
                (&#39;kmeans&#39;,
                 KMeans(algorithm=&#39;auto&#39;, copy_x=True, init=&#39;k-means++&#39;,
                        max_iter=300, n_clusters=10, n_init=10, n_jobs=None,
                        precompute_distances=&#39;auto&#39;, random_state=None,
                        tol=0.0001, verbose=0))],
         verbose=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import pandas
import pandas as pd

# Predict the cluster labels: labels
labels = pipeline.predict(movements)

# Create a DataFrame aligning labels and companies: df
df = pd.DataFrame({&#39;labels&#39;: labels, &#39;companies&#39;: companies})

# Display df sorted by cluster label
print(df.sort_values(&#39;labels&#39;))

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    labels                           companies
42       0                   Royal Dutch Shell
52       0                            Unilever
53       0                       Valero Energy
23       0                                 IBM
49       0                               Total
47       0                            Symantec
13       0                   DuPont de Nemours
12       0                             Chevron
46       0                      Sanofi-Aventis
19       0                     GlaxoSmithKline
10       0                      ConocoPhillips
8        0                         Caterpillar
35       0                            Navistar
6        0            British American Tobacco
37       0                            Novartis
44       0                        Schlumberger
57       0                               Exxon
39       0                              Pfizer
32       0                                  3M
43       0                                 SAP
36       1                    Northrop Grumman
29       1                     Lookheed Martin
4        1                              Boeing
9        2                   Colgate-Palmolive
40       2                      Procter Gamble
25       2                   Johnson &amp;amp; Johnson
27       2                      Kimberly-Clark
1        3                                 AIG
3        3                    American express
5        3                     Bank of America
55       3                         Wells Fargo
18       3                       Goldman Sachs
58       3                               Xerox
26       3                      JPMorgan Chase
15       3                                Ford
16       3                   General Electrics
20       4                          Home Depot
45       4                                Sony
34       4                          Mitsubishi
7        4                               Canon
48       4                              Toyota
54       4                            Walgreen
21       4                               Honda
0        5                               Apple
33       5                           Microsoft
22       5                                  HP
14       5                                Dell
11       5                               Cisco
24       6                               Intel
50       6  Taiwan Semiconductor Manufacturing
51       6                   Texas instruments
38       7                               Pepsi
31       7                           McDonalds
28       7                           Coca Cola
56       7                            Wal-Mart
41       7                       Philip Morris
17       8                     Google/Alphabet
2        8                              Amazon
59       8                               Yahoo
30       9                          MasterCard
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Clustering with k-means</title>
      <link>http://othrif.github.io/technical_note/python/sklearn/clustering_tsne/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/sklearn/clustering_tsne/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;t-SNE = “t-distributed stochastic neighbor embedding”&lt;/li&gt;
&lt;li&gt;Maps samples to 2D space (or 3D)&lt;/li&gt;
&lt;li&gt;only has &lt;code&gt;fit_transform&lt;/code&gt; method, have to repeat everytime&lt;/li&gt;
&lt;li&gt;Try &lt;code&gt;learning_rate&lt;/code&gt; between 50 and 200&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;iris-dataset&#34;&gt;Iris dataset&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn import datasets
iris = datasets.load_iris()
samples = iris[&#39;data&#39;]
features = iris[&#39;feature_names&#39;]
species = iris[&#39;target&#39;]
target_names = iris[&#39;target_names&#39;]

# map target labels to species names =&amp;gt; Ground Truth
#species = target_names[species]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
from sklearn.manifold import TSNE

model = TSNE(learning_rate=100)

transformed = model.fit_transform(samples)
xs=transformed[:,0]
ys=transformed[:,1]
plt.scatter(xs, ys, c=species)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;clustering_tsne_4_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;stock-price&#34;&gt;Stock price&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
df = pd.read_csv(&#39;stock.csv&#39;)
df.head()
movements = df.iloc[:,1:].to_numpy()
companies = df.iloc[:,0].to_numpy()
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;normalize-data-using-a-transform&#34;&gt;Normalize data using a transform&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Perform the necessary imports
from sklearn.preprocessing import Normalizer

# Create a normalizer: normalizer
normalizer = Normalizer()

normalized_movements = normalizer.transform(movements)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import TSNE
from sklearn.manifold import TSNE

# Create a TSNE instance: model
model = TSNE(learning_rate=50)

# Apply fit_transform to normalized_movements: tsne_features
tsne_features = model.fit_transform(normalized_movements)

# Select the 0th feature: xs
xs = tsne_features[:,0]

# Select the 1th feature: ys
ys = tsne_features[:,1]

# Scatter plot
fig, ax = plt.subplots(figsize=(20,20))
ax.scatter(xs, ys, alpha=0.5)

# Annotate the points
for x, y, company in zip(xs, ys, companies):
    ax.annotate(company, (x, y), fontsize=10, alpha=0.75)
plt.show()

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;clustering_tsne_9_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Command line tools</title>
      <link>http://othrif.github.io/technical_note/linux/basics/commandline/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/linux/basics/commandline/</guid>
      <description>&lt;h3 id=&#34;grep-commands&#34;&gt;Grep commands&lt;/h3&gt;
&lt;h4 id=&#34;count-occurences&#34;&gt;Count occurences&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -c &#39;&amp;lt;event&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;concatenate-pdfs&#34;&gt;Concatenate PDFs&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gs -q -sPAPERSIZE=letter -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=out.pdf in1.pdf in2.pdf in3.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;match-regular-expressions&#34;&gt;Match regular expressions&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo mc16_13TeV.366035.Sh_221_NN30NNLO_Znunu_PTV280_500_CVetoBVeto.recon.AOD.e7033_e9238_s3126_r10724 | grep -Eq &#39;AOD.e[0-9]+_s[0-9]+_r[0-9]+&#39; &amp;amp;&amp;amp; echo &amp;quot;Match&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;find-pattern-anywhere-recursively&#34;&gt;Find pattern anywhere recursively&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep -rnw &#39;/path/to/somewhere/&#39; -e &#39;pattern&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;write-to-someone-in-linux&#34;&gt;Write to someone in linux:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;write &amp;lt;username&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;if-you-want-to-find-the-size-of-a-subdirectory&#34;&gt;If you want to find the size of a subdirectory&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; ls -FaGl &amp;quot;${@}&amp;quot; | awk &#39;{ total += $4; print }; END { print total }&#39;;
 ls -FaGl &amp;lt;dir path&amp;gt; | awk &#39;{ total += $4; print }; END { print total }&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;if-you-want-to-find-matches-in-the-same-line-and-get-the-word-that-comes-after-the-space&#34;&gt;If you want to find matches in the same line and get the word that comes after the space&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;blabla THIS ... a bunch of random stuff ... blabla THIS&amp;quot; | grep -oP &amp;quot;(?&amp;lt;=blabla )[^ ]+&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OR&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;blabla THIS ... a bunch of random stuff ... blabla THIS&amp;quot; | awk &#39;{for(i=1;i&amp;lt;=NF;i++) if ($i==&amp;quot;blabla&amp;quot;) print $(i+1)}&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s you want to add numbers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;blabla 111 ... a bunch of random stuff ... blabla 222&amp;quot; | awk &#39;{for(i=1;i&amp;lt;=NF;i++) if ($i==&amp;quot;blabla&amp;quot;) print $(i+1), total += $(i+1)} END{ print total}&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;to-copy-data-from-the-machine-where-precious-data-is-to-the-machine-you-are-working-on&#34;&gt;To copy data from the &amp;ldquo;machine-where-precious-data-is&amp;rdquo; to the machine you are working on&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh user@machine-where-precious-data-is &amp;quot;tar czpf - /some/important/data&amp;quot; | tar xzpf - -C /new/root/directory
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;reversly&#34;&gt;Reversly&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tar cpf - /some/important/data | ssh user@destination-machine &amp;quot;tar xpf - -C /some/directory/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;kill-all-remote-sessions-of-a-user&#34;&gt;Kill all remote sessions of a user:&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pkill -KILL -u othrif
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;remove-m&#34;&gt;Remove ^M&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dos2unix &amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;device-or-resource-busy&#34;&gt;Device or resource busy&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lsof +D &amp;lt;path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then kill PID with &lt;code&gt;kill -9 &amp;lt;PID&amp;gt;&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Confidence Interval</title>
      <link>http://othrif.github.io/technical_note/math/stats/cl/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/math/stats/cl/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from scipy.stats import sem, t
data = [1, 2, 3, 4, 5]
confidence = 0.95
z_score = 2.7764451051977987
sample_mean = 3.0

# Compute the standard error and margin of error
std_err = sem(data)
margin_error = std_err * z_score

# Compute and print the lower threshold
lower = sample_mean - margin_error
print(lower)

# Compute and print the upper threshold
upper = sample_mean + margin_error
print(upper)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1.036756838522439
4.9632431614775605
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from statsmodels.stats.proportion import proportion_confint
# Compute and print the 99% confidence interval
heads = 27
confidence_int = proportion_confint(heads, 50, 0.01)
print(confidence_int)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(0.35844514241179504, 0.721554857588205)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Compute and print the 90% confidence interval
confidence_int = proportion_confint(heads, 50, 0.1)
print(confidence_int)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(0.42406406993539053, 0.6559359300646095)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from scipy.stats import binom
# Repeat this process 10 times 
heads = binom.rvs(50, 0.5, size=10)
for val in heads:
    confidence_interval = proportion_confint(val, 50, .10)
    print(confidence_interval)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(0.3836912846323326, 0.6163087153676674)
(0.42406406993539053, 0.6559359300646095)
(0.2860411978842442, 0.5139588021157558)
(0.36378436885322046, 0.5962156311467796)
(0.3440640699353905, 0.5759359300646095)
(0.42406406993539053, 0.6559359300646095)
(0.2860411978842442, 0.5139588021157558)
(0.2860411978842442, 0.5139588021157558)
(0.5498070827050113, 0.7701929172949887)
(0.46518968814451866, 0.6948103118554813)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Examine your confidence interval results from the last step. You might see at least one confidence interval that does not contain 0.5, the true population proportion for a fair coin flip. You could decrease the likelihood of this happening by increasing your confidence level or lowering the alpha value.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Context manager: `with ... as ...`</title>
      <link>http://othrif.github.io/technical_note/python/basics/context_manager/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/context_manager/</guid>
      <description>&lt;h3 id=&#34;with--as-&#34;&gt;&lt;code&gt;with ... as ...&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;as &amp;lt;variable name&amp;gt;&lt;/code&gt; is not needed if a context manager does not return a value.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Open &amp;quot;alice.txt&amp;quot; and assign the file to &amp;quot;file&amp;quot;
with open(&#39;alice.txt&#39;) as file:
  text = file.read()

n = 0
for word in text.split():
    if word.lower() in [&#39;cat&#39;, &#39;cats&#39;]:
        n += 1

print(&#39;Lewis Carroll uses the word &amp;quot;cat&amp;quot; {} times&#39;.format(n))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Lewis Carroll uses the word &amp;quot;cat&amp;quot; 4 times
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;how-to-create-a-context-manager&#34;&gt;How to create a context manager&lt;/h3&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import contextlib
@contextlib.contextmanager
def my_context():
    # Add any set up code you need
    yield
    # Add any tear down code you need (optional)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
@contextlib.contextmanager
def my_context():
    print(&#39;start context&#39;)
    yield 9999
    print(&#39;good bye!&#39;)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with my_context() as foo:
    print(&#39;foo is {}&#39;.format(foo))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;start context
foo is 9999
good bye!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Write &lt;code&gt;timer()&lt;/code&gt; context manager to figure out which of their functions is running too slow. Notice that the three elements of a context manager are all here: a function definition, a yield statement, and the @contextlib.contextmanager decorator. It&amp;rsquo;s also worth noticing that timer() is a context manager that does not return an explicit value, so yield is written by itself without specifying anything to return.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import time

@contextlib.contextmanager
def timer():
  &amp;quot;&amp;quot;&amp;quot;Time the execution of a context block.

  Yields:
    None
  &amp;quot;&amp;quot;&amp;quot;
  start = time.time()
  # Send control back to the context block
  yield
  end = time.time()
  print(&#39;Elapsed: {:.2f}s&#39;.format(end - start))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with timer():
  print(&#39;This should take approximately 0.25 seconds&#39;)
  time.sleep(0.25)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;This should take approximately 0.25 seconds
Elapsed: 0.25s
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;a-read-only-open-context-manager&#34;&gt;A read-only open() context manager&lt;/h3&gt;
&lt;p&gt;read-only version of the open() context manager to use in your project to not accidentally overwrite one of the files when trying to read it in.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@contextlib.contextmanager
def open_read_only(filename):
  &amp;quot;&amp;quot;&amp;quot;Open a file in read-only mode.

  Args:
    filename (str): The location of the file to read

  Yields:
    file object
  &amp;quot;&amp;quot;&amp;quot;
  read_only_file = open(filename, mode=&#39;r&#39;)
  # Yield read_only_file so it can be assigned to my_file
  yield read_only_file
  # Close read_only_file
  read_only_file.close()

with open_read_only(&#39;alice.txt&#39;) as my_file:
  print(my_file.read())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;this is alice.txt counting how many CATS i have. yes i said cAts . Not just one cat , but many catS !
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;changing-the-working-directory&#34;&gt;Changing the working directory&lt;/h3&gt;
&lt;p&gt;change the current working directory back to what it was when they called in_dir(). This is important to do because your users might be relying on their working directory being what it was when they started the script. in_dir() is a great example of the CHANGE/RESET pattern that indicates you should use a context manager.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def in_dir(directory):
  &amp;quot;&amp;quot;&amp;quot;Change current working directory to `directory`,
  allow the user to run some code, and change back.

  Args:
    directory (str): The path to a directory to work in.
  &amp;quot;&amp;quot;&amp;quot;
  current_dir = os.getcwd()
  os.chdir(directory)

  # Add code that lets you handle errors
  try:
    yield
  # Ensure the directory is reset,
  # whether there was an error or not
  finally:
    os.chdir(current_dir)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;context-manager-patterns&#34;&gt;Context manager patterns&lt;/h3&gt;
&lt;p&gt;Situation where using a context manager with exception handling &lt;code&gt;try-finally&lt;/code&gt; that can be useful&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Start&lt;/th&gt;
&lt;th&gt;Finish&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Open&lt;/td&gt;
&lt;td&gt;Close&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lock&lt;/td&gt;
&lt;td&gt;Release&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Change&lt;/td&gt;
&lt;td&gt;Reset&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enter&lt;/td&gt;
&lt;td&gt;Exit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Start&lt;/td&gt;
&lt;td&gt;Stop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Setup&lt;/td&gt;
&lt;td&gt;Teardown&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Connect&lt;/td&gt;
&lt;td&gt;Disconnect&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Control attribute acess using @property</title>
      <link>http://othrif.github.io/technical_note/python/basics/properties/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/properties/</guid>
      <description>&lt;h3 id=&#34;what-are-properties&#34;&gt;What are properties?&lt;/h3&gt;
&lt;p&gt;You could think of properties as attributes with built-in access control. They are especially useful when there is some additional code you&amp;rsquo;d like to execute when assigning values to attributes.
to a class user, they look just like regular attributes, but behind the scenes, they can have custom code executed when they are accessed.&lt;/p&gt;
&lt;h3 id=&#34;create-and-set-properties&#34;&gt;Create and set properties&lt;/h3&gt;
&lt;p&gt;There are two parts to defining a property:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define an &amp;ldquo;internal&amp;rdquo; attribute that will contain the data &lt;code&gt;_name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Define a &lt;code&gt;@property&lt;/code&gt;-decorated method whose name is the property &lt;code&gt;name&lt;/code&gt;, and that returns the internal attribute storing the data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;rsquo;d also like to define a custom setter method, there&amp;rsquo;s an additional step:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define another method whose name is exactly the property name (again), and decorate it with &lt;code&gt;@prop_name.setter&lt;/code&gt; where &lt;code&gt;prop_name&lt;/code&gt; is the name of the property. The method should take two arguments &amp;ndash; &lt;code&gt;self&lt;/code&gt; (as always), and the value that&amp;rsquo;s being assigned to the property.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Customer:
    def __init__(self, name, new_bal):
        self.name = name
        if new_bal &amp;lt; 0:
           raise ValueError(&amp;quot;Invalid balance!&amp;quot;)
        self._balance = new_bal  

    # Add a decorated balance() method returning _balance        
    @property
    def balance(self):
        return self._balance

    # Add a setter balance() method
    @balance.setter
    def balance(self, new_bal):
        # Validate the parameter value
        if new_bal &amp;lt; 0:
           raise ValueError(&amp;quot;Invalid balance!&amp;quot;)
        self._balance = new_bal
        print(&amp;quot;Setter method called&amp;quot;)

# Create a Customer        
cust = Customer(&#39;Belinda Lutz&#39;, 2000)

# Assign 3000 to the balance property
cust.balance = 3000

# Print the balance property
print(cust.balance)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Setter method called
3000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the user of your &lt;code&gt;Customer&lt;/code&gt; class won&amp;rsquo;t be able to assign arbitrary values to the customers&amp;rsquo; balance.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create DataFrame with multiindexes and concatenate with keys</title>
      <link>http://othrif.github.io/technical_note/python/pandas/concat_multiindex/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/concat_multiindex/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
bronze = {&#39;Country&#39;:{&#39;United States&#39;:  1052.0,
       &#39;Soviet Union&#39;:   584.0,
       &#39;United Kingdom&#39;:   505.0,
       &#39;France&#39;:   475.0,
       &#39;Germany&#39;:   454.0}}
silver ={&#39;Country&#39;:{
       &#39;United States&#39;:  1195.0,
       &#39;Soviet Union&#39;:   627.0,
       &#39;United Kingdom&#39;:   591.0,
       &#39;France&#39;:   461.0,
       &#39;Italy&#39;:   394.0}}
gold   = {&#39;Country&#39;:{
       &#39;United States&#39;:  2088.0,
       &#39;Soviet Union&#39;:   838.0,
       &#39;United Kingdom&#39;:   498.0,
       &#39;Italy&#39;:   460.0,
       &#39;Germany&#39;:   407.0}}

medal_types = [&#39;bronze&#39;,&#39;silver&#39;,&#39;gold&#39;]
medals_all = [ pd.DataFrame(i) for i in [bronze,silver,gold]]
medals = pd.concat(medals_all, keys=medal_types)
medals
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Country&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;5&#34; valign=&#34;top&#34;&gt;bronze&lt;/th&gt;
      &lt;th&gt;France&lt;/th&gt;
      &lt;td&gt;475.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Germany&lt;/th&gt;
      &lt;td&gt;454.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Soviet Union&lt;/th&gt;
      &lt;td&gt;584.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;United Kingdom&lt;/th&gt;
      &lt;td&gt;505.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;United States&lt;/th&gt;
      &lt;td&gt;1052.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;5&#34; valign=&#34;top&#34;&gt;silver&lt;/th&gt;
      &lt;th&gt;France&lt;/th&gt;
      &lt;td&gt;461.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Italy&lt;/th&gt;
      &lt;td&gt;394.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Soviet Union&lt;/th&gt;
      &lt;td&gt;627.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;United Kingdom&lt;/th&gt;
      &lt;td&gt;591.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;United States&lt;/th&gt;
      &lt;td&gt;1195.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;5&#34; valign=&#34;top&#34;&gt;gold&lt;/th&gt;
      &lt;th&gt;Germany&lt;/th&gt;
      &lt;td&gt;407.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Italy&lt;/th&gt;
      &lt;td&gt;460.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Soviet Union&lt;/th&gt;
      &lt;td&gt;838.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;United Kingdom&lt;/th&gt;
      &lt;td&gt;498.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;United States&lt;/th&gt;
      &lt;td&gt;2088.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;concatenating-vertically-to-get-multiindexed-rows&#34;&gt;Concatenating vertically to get MultiIndexed rows&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Sort the entries of medals: medals_sorted
medals_sorted = medals.sort_index(level=0)

# Print the number of Bronze medals won by Germany
print(medals_sorted.loc[(&#39;bronze&#39;,&#39;Germany&#39;)])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Country    454.0
Name: (bronze, Germany), dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Print data about silver medals
print(medals_sorted.loc[&#39;silver&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                Country
France            461.0
Italy             394.0
Soviet Union      627.0
United Kingdom    591.0
United States    1195.0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
# Create alias for pd.IndexSlice: idx
idx = pd.IndexSlice

# Print all the data on medals won by the United Kingdom
print(medals_sorted.loc[idx[:,&#39;United Kingdom&#39;],:])

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                       Country
bronze United Kingdom    505.0
gold   United Kingdom    498.0
silver United Kingdom    591.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;concatenating-horizontally-to-get-multiindexed-columns&#34;&gt;Concatenating horizontally to get MultiIndexed columns&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

names = [&#39;Hardware&#39;, &#39;Software&#39;, &#39;Service&#39;]

dataframes=[]
for name in names:
    filename = &#39;Sales/feb-sales-%s.csv&#39; % name
    dataframe=pd.read_csv(filename, index_col=0, parse_dates=True)
    dataframes.append(dataframe)
print(dataframes)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[                             Company   Product  Units
Date                                                 
2015-02-04 21:52:45  Acme Coporation  Hardware     14
2015-02-07 22:58:10  Acme Coporation  Hardware      1
2015-02-19 10:59:33        Mediacore  Hardware     16
2015-02-02 20:54:49        Mediacore  Hardware      9
2015-02-21 20:41:47            Hooli  Hardware      3,                              Company   Product  Units
Date                                                 
2015-02-16 12:09:19            Hooli  Software     10
2015-02-03 14:14:18          Initech  Software     13
2015-02-02 08:33:01            Hooli  Software      3
2015-02-05 01:53:06  Acme Coporation  Software     19
2015-02-11 20:03:08          Initech  Software      7
2015-02-09 13:09:55        Mediacore  Software      7
2015-02-11 22:50:44            Hooli  Software      4
2015-02-04 15:36:29        Streeplex  Software     13
2015-02-21 05:01:26        Mediacore  Software      3,                        Company  Product  Units
Date                                          
2015-02-26 08:57:45  Streeplex  Service      4
2015-02-25 00:29:00    Initech  Service     10
2015-02-09 08:57:30  Streeplex  Service     19
2015-02-26 08:58:51  Streeplex  Service      1
2015-02-05 22:05:03      Hooli  Service     10
2015-02-19 16:02:58  Mediacore  Service     10]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Concatenate dataframes: february
february = pd.concat(dataframes, axis=1, keys=[&#39;Hardware&#39;, &#39;Software&#39;, &#39;Service&#39;])

# Print february.info()
print(february.info())

# Assign pd.IndexSlice: idx
idx = pd.IndexSlice

# Create the slice: slice_2_8
slice_2_8 = february.loc[&#39;Feb. 2, 2015&#39;:&#39; Feb. 8, 2015&#39;, idx[:, &#39;Company&#39;]]

# Print slice_2_8
print(slice_2_8)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
DatetimeIndex: 20 entries, 2015-02-02 08:33:01 to 2015-02-26 08:58:51
Data columns (total 9 columns):
 #   Column               Non-Null Count  Dtype  
---  ------               --------------  -----  
 0   (Hardware, Company)  5 non-null      object 
 1   (Hardware, Product)  5 non-null      object 
 2   (Hardware, Units)    5 non-null      float64
 3   (Software, Company)  9 non-null      object 
 4   (Software, Product)  9 non-null      object 
 5   (Software, Units)    9 non-null      float64
 6   (Service, Company)   6 non-null      object 
 7   (Service, Product)   6 non-null      object 
 8   (Service, Units)     6 non-null      float64
dtypes: float64(3), object(6)
memory usage: 1.6+ KB
None
                            Hardware         Software Service
                             Company          Company Company
Date                                                         
2015-02-02 08:33:01              NaN            Hooli     NaN
2015-02-02 20:54:49        Mediacore              NaN     NaN
2015-02-03 14:14:18              NaN          Initech     NaN
2015-02-04 15:36:29              NaN        Streeplex     NaN
2015-02-04 21:52:45  Acme Coporation              NaN     NaN
2015-02-05 01:53:06              NaN  Acme Coporation     NaN
2015-02-05 22:05:03              NaN              NaN   Hooli
2015-02-07 22:58:10  Acme Coporation              NaN     NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Make the list of tuples: month_list
month_list = [(&#39;january&#39;, jan), (&#39;february&#39;, feb), (&#39;march&#39;, mar)]

# Create an empty dictionary: month_dict
month_dict = {}

for month_name, month_data in month_list:

    # Group month_data: month_dict[month_name]
    month_dict[month_name] = month_data.groupby(&#39;Company&#39;).sum()

# Concatenate data in month_dict: sales
sales = pd.concat(month_dict)

# Print sales
print(sales)

# Print all sales by Mediacore
idx = pd.IndexSlice
print(sales.loc[idx[:, &#39;Mediacore&#39;], :])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                          Units
         Company               
january  Acme Coporation     76
         Hooli               70
         Initech             37
         Mediacore           15
         Streeplex           50
february Acme Coporation     34
         Hooli               30
         Initech             30
         Mediacore           45
         Streeplex           37
march    Acme Coporation      5
         Hooli               37
         Initech             68
         Mediacore           68
         Streeplex           40
                    Units
         Company         
january  Mediacore     15
february Mediacore     45
march    Mediacore     68
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating DataFrames</title>
      <link>http://othrif.github.io/technical_note/python/pandas/createdf/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/createdf/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;From a list of dictionaries: construct row by row&lt;/li&gt;
&lt;li&gt;From a dictionary of lists: construct column by column&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;from-a-list-of-dictionaries&#34;&gt;From a list of dictionaries&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd 

# Create a list of dictionaries with new data
avocados_list = [
    {&#39;date&#39;: &#39;2019-11-03&#39;, &#39;small_sold&#39;: 10376832, &#39;large_sold&#39;: 7835071},
    {&#39;date&#39;: &#39;2019-11-10&#39;, &#39;small_sold&#39;: 10717154, &#39;large_sold&#39;: 8561348}
]

# Convert list into DataFrame
avocados_2019 = pd.DataFrame(avocados_list)

# Print the new DataFrame
print(avocados_2019)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;         date  small_sold  large_sold
0  2019-11-03    10376832     7835071
1  2019-11-10    10717154     8561348
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;from-a-dictionary-of-lists&#34;&gt;From a dictionary of lists&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create a dictionary of lists with new data
avocados_dict = {
    &#39;date&#39;: [&#39;2019-11-17&#39;, &#39;2019-12-01&#39;],
    &#39;small_sold&#39;: [10859987, 9291631],
    &#39;large_sold&#39;: [7674135, 6238096]
}

# Convert dictionary into DataFrame
avocados_2019 = pd.DataFrame(avocados_dict)

# Print the new DataFrame
print(avocados_2019)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;         date  small_sold  large_sold
0  2019-11-17    10859987     7674135
1  2019-12-01     9291631     6238096
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Custom exception</title>
      <link>http://othrif.github.io/technical_note/python/basics/custom_exception/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/custom_exception/</guid>
      <description>&lt;h3 id=&#34;handling-exception&#34;&gt;Handling exception&lt;/h3&gt;
&lt;p&gt;Built-in exceptions inherit from class &lt;code&gt;BaseException&lt;/code&gt; or &lt;code&gt;Exception&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# MODIFY the function to catch exceptions
def invert_at_index(x, ind):
    try:
        return 1/x[ind]
    except ZeroDivisionError:
        print(&amp;quot;Cannot divide by zero!&amp;quot;)
    except IndexError:
        print(&amp;quot;Index out of range!&amp;quot;)
 
a = [5,6,0,7]

# Works okay
print(invert_at_index(a, 1))

# Potential ZeroDivisionError
print(invert_at_index(a, 2))

# Potential IndexError
print(invert_at_index(a, 5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.16666666666666666
Cannot divide by zero!
None
Index out of range!
None
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;custom-exception&#34;&gt;Custom exception&lt;/h3&gt;
&lt;p&gt;Need to define an exception is a class inherited from the built-in &lt;code&gt;Exception&lt;/code&gt; class or one of its subclasses.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class SalaryError(ValueError): pass
class BonusError(SalaryError): pass

class Employee:
  MIN_SALARY = 30000
  MAX_BONUS = 5000

  def __init__(self, name, salary = 30000):
    self.name = name    
    if salary &amp;lt; Employee.MIN_SALARY:
      raise SalaryError(&amp;quot;Salary is too low!&amp;quot;)      
    self.salary = salary
    
  # Rewrite using exceptions  
  def give_bonus(self, amount):
    if amount &amp;gt; Employee.MAX_BONUS:
        raise BonusError(&amp;quot;The bonus amount is too high!&amp;quot;)  
        
    elif self.salary + amount &amp;lt;  Employee.MIN_SALARY:
        raise SalaryError(&amp;quot;The salary after bonus is too low!&amp;quot;)
      
    else:  
      self.salary += amount
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;e = Employee(&#39;othmane&#39;,1000)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

SalaryError                               Traceback (most recent call last)

&amp;lt;ipython-input-16-96ecb849cf7a&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 e = Employee(&#39;othmane&#39;,1000)


&amp;lt;ipython-input-14-1dd77ad984a7&amp;gt; in __init__(self, name, salary)
      9     self.name = name
     10     if salary &amp;lt; Employee.MIN_SALARY:
---&amp;gt; 11       raise SalaryError(&amp;quot;Salary is too low!&amp;quot;)
     12     self.salary = salary
     13 


SalaryError: Salary is too low!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;e = Employee(&#39;othmane&#39;,1000000)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;e.give_bonus(500000)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

BonusError                                Traceback (most recent call last)

&amp;lt;ipython-input-18-0cfd0f4c6fd2&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 e.give_bonus(500000)


&amp;lt;ipython-input-14-1dd77ad984a7&amp;gt; in give_bonus(self, amount)
     15   def give_bonus(self, amount):
     16     if amount &amp;gt; Employee.MAX_BONUS:
---&amp;gt; 17         raise BonusError(&amp;quot;The bonus amount is too high!&amp;quot;)
     18 
     19     elif self.salary + amount &amp;lt;  Employee.MIN_SALARY:


BonusError: The bonus amount is too high!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;e.give_bonus(-980000)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

SalaryError                               Traceback (most recent call last)

&amp;lt;ipython-input-20-c41bdf5a7cec&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 e.give_bonus(-980000)


&amp;lt;ipython-input-14-1dd77ad984a7&amp;gt; in give_bonus(self, amount)
     18 
     19     elif self.salary + amount &amp;lt;  Employee.MIN_SALARY:
---&amp;gt; 20         raise SalaryError(&amp;quot;The salary after bonus is too low!&amp;quot;)
     21 
     22     else:


SalaryError: The salary after bonus is too low!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Customize plots with ax and fig</title>
      <link>http://othrif.github.io/technical_note/python/matplotlibtmp/ax_fig/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlibtmp/ax_fig/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Matplotlib markers: &lt;a href=&#34;https://matplotlib.org/api/markers_api.html&#34;&gt;https://matplotlib.org/api/markers_api.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Matplotlib linestyles: &lt;a href=&#34;https://matplotlib.org/3.1.0/gallery/lines_bars_and_markers/linestyles.html&#34;&gt;https://matplotlib.org/3.1.0/gallery/lines_bars_and_markers/linestyles.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
import pandas as pd

seattle_weather = pd.read_csv(&#39;seattle_weather.csv&#39;).loc[:11]
austin_weather = pd.read_csv(&#39;austin_weather.csv&#39;)
seattle_weather[&#39;MONTH&#39;] = pd.to_datetime(seattle_weather[&#39;DATE&#39;], format=&#39;%m&#39;).dt.month_name().str.slice(stop=3)
austin_weather[&#39;MONTH&#39;] = pd.to_datetime(austin_weather[&#39;DATE&#39;], format=&#39;%m&#39;).dt.month_name().str.slice(stop=3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
# Create a figure and an array of axes: 2 rows, 1 column with shared y axis
fig, ax = plt.subplots(2, 1, sharey=True)

# Plot Seattle precipitation data in the top axes
ax[0].plot(seattle_weather[&#39;MONTH&#39;], seattle_weather[&#39;MLY-PRCP-NORMAL&#39;], marker = &#39;o&#39;, color = &#39;b&#39;)
ax[0].plot(seattle_weather[&#39;MONTH&#39;], seattle_weather[&#39;MLY-PRCP-25PCTL&#39;], marker = None, color = &#39;b&#39;, linestyle = &#39;--&#39;)
ax[0].plot(seattle_weather[&#39;MONTH&#39;], seattle_weather[&#39;MLY-PRCP-75PCTL&#39;], marker = None, color = &#39;b&#39;, linestyle = &#39;--&#39;)

# Plot Austin precipitation data in the bottom axes
ax[1].plot(austin_weather[&#39;MONTH&#39;], austin_weather[&#39;MLY-PRCP-NORMAL&#39;], marker = &#39;v&#39;, color = &#39;r&#39;)
ax[1].plot(austin_weather[&#39;MONTH&#39;], austin_weather[&#39;MLY-PRCP-25PCTL&#39;], marker = None, color = &#39;r&#39;, linestyle = &#39;--&#39;)
ax[1].plot(austin_weather[&#39;MONTH&#39;], austin_weather[&#39;MLY-PRCP-75PCTL&#39;], marker = None, color = &#39;r&#39;, linestyle = &#39;--&#39;)

ax[0].set_title(&#39;Weather patterns in Austin and Seattle&#39;)
ax[0].set_ylabel(&#39;Precipitation (inches)&#39;)
ax[1].set_ylabel(&#39;Precipitation (inches)&#39;)
ax[1].set_xlabel(&#39;Time (months)&#39;)

plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;ax_fig_3_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data types</title>
      <link>http://othrif.github.io/technical_note/cpp/basics/datatypes/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/cpp/basics/datatypes/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;size-of-common-data-types&#34;&gt;Size of common data types&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;   cout &amp;lt;&amp;lt; &amp;quot;Size of char : &amp;quot; &amp;lt;&amp;lt; sizeof(char) &amp;lt;&amp;lt; endl;
   cout &amp;lt;&amp;lt; &amp;quot;Size of int : &amp;quot; &amp;lt;&amp;lt; sizeof(int) &amp;lt;&amp;lt; endl;
   cout &amp;lt;&amp;lt; &amp;quot;Size of unsigned int : &amp;quot; &amp;lt;&amp;lt; sizeof(unsigned int) &amp;lt;&amp;lt; endl;
   cout &amp;lt;&amp;lt; &amp;quot;Size of short int : &amp;quot; &amp;lt;&amp;lt; sizeof(short int) &amp;lt;&amp;lt; endl;
   cout &amp;lt;&amp;lt; &amp;quot;Size of long int : &amp;quot; &amp;lt;&amp;lt; sizeof(long int) &amp;lt;&amp;lt; endl;
   cout &amp;lt;&amp;lt; &amp;quot;Size of float : &amp;quot; &amp;lt;&amp;lt; sizeof(float) &amp;lt;&amp;lt; endl;
   cout &amp;lt;&amp;lt; &amp;quot;Size of double : &amp;quot; &amp;lt;&amp;lt; sizeof(double) &amp;lt;&amp;lt; endl;
   cout &amp;lt;&amp;lt; &amp;quot;Size of wchar_t : &amp;quot; &amp;lt;&amp;lt; sizeof(wchar_t) &amp;lt;&amp;lt; endl;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Size of char : 1
Size of int : 4
Size of unsigned int : 4
Size of short int : 2
Size of long int : 8
Size of float : 4
Size of double : 8
Size of wchar_t : 4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>DataFrames basics</title>
      <link>http://othrif.github.io/technical_note/python/pandas/dataframe/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/dataframe/</guid>
      <description>&lt;h3 id=&#34;dataframes&#34;&gt;DataFrames&lt;/h3&gt;
&lt;p&gt;store tabular data where you can label the rows and the columns.&lt;/p&gt;
&lt;h4 id=&#34;dataframe-from-dictionary&#34;&gt;DataFrame from dictionary&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

# Build cars DataFrame
names = [&#39;United States&#39;, &#39;Australia&#39;, &#39;Japan&#39;, &#39;India&#39;, &#39;Russia&#39;, &#39;Morocco&#39;, &#39;Egypt&#39;]
dr =  [True, False, False, False, True, True, True]
cpc = [809, 731, 588, 18, 200, 70, 45]
cars_dict = { &#39;country&#39;:names, &#39;drives_right&#39;:dr, &#39;cars_per_cap&#39;:cpc }
cars = pd.DataFrame(cars_dict)
print(cars)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;         country  drives_right  cars_per_cap
0  United States          True           809
1      Australia         False           731
2          Japan         False           588
3          India         False            18
4         Russia          True           200
5        Morocco          True            70
6          Egypt          True            45
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;set-the-row-attribute&#34;&gt;Set the row attribute&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition of row_labels
row_labels = [&#39;US&#39;, &#39;AUS&#39;, &#39;JPN&#39;, &#39;IN&#39;, &#39;RU&#39;, &#39;MOR&#39;, &#39;EG&#39;]

# Specify row labels of cars
cars.index = row_labels
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;           country  drives_right  cars_per_cap
US   United States          True           809
AUS      Australia         False           731
JPN          Japan         False           588
IN           India         False            18
RU          Russia          True           200
MOR        Morocco          True            70
EG           Egypt          True            45
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;useful-exploration&#34;&gt;Useful exploration&lt;/h3&gt;
&lt;h4 id=&#34;methods&#34;&gt;Methods&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.head()&lt;/code&gt; first few rows&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.info()&lt;/code&gt; name of columns, data type and number of missing values&amp;hellip;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.describe()&lt;/code&gt; summary statistics&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;attributes&#34;&gt;Attributes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.shape&lt;/code&gt; attribute for rows x columns&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.values&lt;/code&gt; converts to a 2D numpy array&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.columns&lt;/code&gt; An index of columns: the column names.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.index&lt;/code&gt; An index for the rows: either row numbers or row names&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;country&lt;/th&gt;
      &lt;th&gt;drives_right&lt;/th&gt;
      &lt;th&gt;cars_per_cap&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;United States&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;809&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Australia&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;731&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Japan&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;588&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;India&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Russia&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;200&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars.info()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
Int64Index: 7 entries, 0 to 6
Data columns (total 3 columns):
 #   Column        Non-Null Count  Dtype 
---  ------        --------------  ----- 
 0   country       7 non-null      object
 1   drives_right  7 non-null      bool  
 2   cars_per_cap  7 non-null      int64 
dtypes: bool(1), int64(1), object(1)
memory usage: 175.0+ bytes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(7, 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars.describe()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;cars_per_cap&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;count&lt;/th&gt;
      &lt;td&gt;7.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;td&gt;351.571429&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;std&lt;/th&gt;
      &lt;td&gt;345.595552&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;min&lt;/th&gt;
      &lt;td&gt;18.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;25%&lt;/th&gt;
      &lt;td&gt;57.500000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;50%&lt;/th&gt;
      &lt;td&gt;200.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;75%&lt;/th&gt;
      &lt;td&gt;659.500000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;max&lt;/th&gt;
      &lt;td&gt;809.000000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars.values
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[&#39;United States&#39;, True, 809],
       [&#39;Australia&#39;, False, 731],
       [&#39;Japan&#39;, False, 588],
       [&#39;India&#39;, False, 18],
       [&#39;Russia&#39;, True, 200],
       [&#39;Morocco&#39;, True, 70],
       [&#39;Egypt&#39;, True, 45]], dtype=object)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars.columns
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Index([&#39;country&#39;, &#39;drives_right&#39;, &#39;cars_per_cap&#39;], dtype=&#39;object&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars.index
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Int64Index([0, 1, 2, 3, 4, 5, 6], dtype=&#39;int64&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;save-to-csv&#34;&gt;Save to csv&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Print cars again
print(cars)
cars.to_csv(&#39;cars.csv&#39;,index=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;         country  drives_right  cars_per_cap
0  United States          True           809
1      Australia         False           731
2          Japan         False           588
3          India         False            18
4         Russia          True           200
5        Morocco          True            70
6          Egypt          True            45
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;read-csv&#34;&gt;Read csv&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import pandas as pd
import pandas as pd

# Import the cars.csv data: cars
cars = pd.read_csv(&#39;cars.csv&#39;)

# Print out cars
print(cars)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   Unnamed: 0        country  drives_right  cars_per_cap
0           0  United States          True           809
1           1      Australia         False           731
2           2          Japan         False           588
3           3          India         False            18
4           4         Russia          True           200
5           5        Morocco          True            70
6           6          Egypt          True            45
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Fix import by including index_col
cars = pd.read_csv(&#39;cars.csv&#39;,index_col=0)

# Print out cars
print(cars)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;         country  drives_right  cars_per_cap
0  United States          True           809
1      Australia         False           731
2          Japan         False           588
3          India         False            18
4         Russia          True           200
5        Morocco          True            70
6          Egypt          True            45
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>DataFrames counting</title>
      <link>http://othrif.github.io/technical_note/python/pandas/countingdf/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/countingdf/</guid>
      <description>&lt;p&gt;Most common summary statistics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.mean()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.std()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.var()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.median()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.mode()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.min()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.max()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.sum()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.quantile()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;generate-some-data&#34;&gt;Generate some data&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import numpy as np
from pandas import Timestamp

mycols = [&#39;store&#39;, &#39;type&#39;, &#39;department&#39;, &#39;date&#39;, &#39;weekly_sales&#39;, &#39;is_holiday&#39;]
content = np.array([[1, &#39;A&#39;, 1, Timestamp(&#39;2010-02-05 00:00:00&#39;), 24924.5, False],[1, &#39;B&#39;, 1, Timestamp(&#39;2010-03-05 00:00:00&#39;), 21827.9, True],[1, &#39;A&#39;, 1, Timestamp(&#39;2010-04-02 00:00:00&#39;), 57258.43, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-05-07 00:00:00&#39;), 17413.94, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-06-04 00:00:00&#39;), 17558.09, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-07-02 00:00:00&#39;), 16333.14, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-08-06 00:00:00&#39;), 17508.41, False],[1, &#39;B&#39;, 1, Timestamp(&#39;2010-09-03 00:00:00&#39;), 16241.78, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2010-10-01 00:00:00&#39;), 20094.19, True],[1, &#39;B&#39;, 1, Timestamp(&#39;2010-11-05 00:00:00&#39;), 34238.88, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-12-03 00:00:00&#39;), 22517.56, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2011-01-07 00:00:00&#39;), 15984.24, False],[1, &#39;C&#39;, 2, Timestamp(&#39;2010-02-05 00:00:00&#39;), 50605.27, True],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-03-05 00:00:00&#39;), 48397.98, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-04-02 00:00:00&#39;), 47450.5, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-05-07 00:00:00&#39;), 47903.01, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-06-04 00:00:00&#39;), 48754.47, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-07-02 00:00:00&#39;), 47077.72, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-08-06 00:00:00&#39;), 50031.73, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-09-03 00:00:00&#39;), 49015.05, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-10-01 00:00:00&#39;), 45829.02, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-11-05 00:00:00&#39;), 46381.43, True],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-12-03 00:00:00&#39;), 44405.02, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2011-01-07 00:00:00&#39;), 43202.29, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-02-05 00:00:00&#39;), 13740.12, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-03-05 00:00:00&#39;), 12275.58, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-04-02 00:00:00&#39;), 11157.08, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-05-07 00:00:00&#39;), 9372.8, True],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-06-04 00:00:00&#39;), 8001.41, False],[1, &#39;C&#39;, 3, Timestamp(&#39;2010-07-02 00:00:00&#39;), 7857.88, True],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-08-06 00:00:00&#39;), 26719.02, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-09-03 00:00:00&#39;), 19081.8, False],[1, &#39;B&#39;, 3, Timestamp(&#39;2010-10-01 00:00:00&#39;), 9775.17, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-11-05 00:00:00&#39;), 9825.22, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-12-03 00:00:00&#39;), 10856.85, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2011-01-07 00:00:00&#39;), 15808.15, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-02-05 00:00:00&#39;), 39954.04, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-03-05 00:00:00&#39;), 38086.19, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-04-02 00:00:00&#39;), 37809.49, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-05-07 00:00:00&#39;), 37168.34, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-06-04 00:00:00&#39;), 40548.19, False],[1, &#39;B&#39;, 4, Timestamp(&#39;2010-07-02 00:00:00&#39;), 39773.71, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-08-06 00:00:00&#39;), 40973.88, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-09-03 00:00:00&#39;), 38321.88, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-10-01 00:00:00&#39;), 34912.45, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-11-05 00:00:00&#39;), 37980.55, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-12-03 00:00:00&#39;), 37110.55, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2011-01-07 00:00:00&#39;), 37947.8, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-02-05 00:00:00&#39;), 32229.38, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-03-05 00:00:00&#39;), 23082.14, False],[1, &#39;B&#39;, 5, Timestamp(&#39;2010-04-02 00:00:00&#39;), 29967.92, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-05-07 00:00:00&#39;), 19260.44, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-06-04 00:00:00&#39;), 22932.26, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-07-02 00:00:00&#39;), 18887.71, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-08-06 00:00:00&#39;), 16926.17, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-09-03 00:00:00&#39;), 15390.52, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-10-01 00:00:00&#39;), 23381.38, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-11-05 00:00:00&#39;), 23903.81, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-12-03 00:00:00&#39;), 36472.02, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2011-01-07 00:00:00&#39;), 22699.69, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-02-05 00:00:00&#39;), 5749.03, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-03-05 00:00:00&#39;), 4221.25, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-04-02 00:00:00&#39;), 4132.61, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-05-07 00:00:00&#39;), 7477.7, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-06-04 00:00:00&#39;), 5484.9, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-07-02 00:00:00&#39;), 4541.91, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-08-06 00:00:00&#39;), 4700.38, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-09-03 00:00:00&#39;), 3553.75, False],[1, &#39;B&#39;, 6, Timestamp(&#39;2010-10-01 00:00:00&#39;), 2876.19, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-11-05 00:00:00&#39;), 5036.99, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-12-03 00:00:00&#39;), 6356.96, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2011-01-07 00:00:00&#39;), 1376.15, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-02-05 00:00:00&#39;), 21084.08, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-03-05 00:00:00&#39;), 19659.7, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-04-02 00:00:00&#39;), 22427.62, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-05-07 00:00:00&#39;), 20457.62, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-06-04 00:00:00&#39;), 44563.68, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-07-02 00:00:00&#39;), 22589.0, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-08-06 00:00:00&#39;), 21842.57, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-09-03 00:00:00&#39;), 18005.65, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-10-01 00:00:00&#39;), 16481.79, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-11-05 00:00:00&#39;), 19136.58, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-12-03 00:00:00&#39;), 47406.83, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2011-01-07 00:00:00&#39;), 17516.16, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-02-05 00:00:00&#39;), 40129.01, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-03-05 00:00:00&#39;), 38776.09, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-04-02 00:00:00&#39;), 38151.58, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-05-07 00:00:00&#39;), 35393.78, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-06-04 00:00:00&#39;), 35181.47, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-07-02 00:00:00&#39;), 35580.01, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-08-06 00:00:00&#39;), 34833.35, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-09-03 00:00:00&#39;), 35562.68, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-10-01 00:00:00&#39;), 34658.25, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-11-05 00:00:00&#39;), 36182.58, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-12-03 00:00:00&#39;), 36222.74, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2011-01-07 00:00:00&#39;), 36599.46, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-02-05 00:00:00&#39;), 16930.99, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-03-05 00:00:00&#39;), 24064.7, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-04-02 00:00:00&#39;), 25435.02, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-05-07 00:00:00&#39;), 27588.34, False]])
df = pd.DataFrame(content, columns=mycols)
df[&#39;frac_sales&#39;] = df[&#39;weekly_sales&#39;]*np.random.rand()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;24924.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;11757.6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;21827.9&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;10296.9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-04-02&lt;/td&gt;
      &lt;td&gt;57258.4&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;27010.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-05-07&lt;/td&gt;
      &lt;td&gt;17413.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;8214.67&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-06-04&lt;/td&gt;
      &lt;td&gt;17558.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;8282.67&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;drop-duplicates-with-drop_duplicates&#34;&gt;Drop duplicates with &lt;code&gt;.drop_duplicates()&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.drop_duplicates(subset=&#39;type&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;24924.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;11757.6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;21827.9&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;10296.9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-05-07&lt;/td&gt;
      &lt;td&gt;17413.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;8214.67&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.drop_duplicates(subset=[&#39;type&#39;,&#39;is_holiday&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;24924.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;11757.6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;21827.9&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;10296.9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-05-07&lt;/td&gt;
      &lt;td&gt;17413.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;8214.67&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-09-03&lt;/td&gt;
      &lt;td&gt;16241.8&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;7661.72&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-10-01&lt;/td&gt;
      &lt;td&gt;20094.2&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;9479.02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;50605.3&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;23872&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_unique = df.drop_duplicates(subset=[&#39;type&#39;,&#39;is_holiday&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;count-with-value_counts&#34;&gt;Count with &lt;code&gt;.value_counts()&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_unique[&#39;type&#39;].value_counts()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;C    2
A    2
B    2
Name: type, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_unique[&#39;type&#39;].value_counts(sort=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;C    2
A    2
B    2
Name: type, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_unique[&#39;type&#39;].value_counts(normalize=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;C    0.333333
A    0.333333
B    0.333333
Name: type, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;grouping-with-groupby&#34;&gt;Grouping with &lt;code&gt;.groupby()&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.groupby(&#39;type&#39;)[&#39;weekly_sales&#39;].min()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;type
A    1376.15
B    2876.19
C    7857.88
Name: weekly_sales, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example of how much the syntax gets simplified with &lt;code&gt;.groupby()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Calc total weekly sales
sales_all = df[&amp;quot;weekly_sales&amp;quot;].sum()

# Subset for type A stores, calc total weekly sales
sales_A = df[df[&amp;quot;type&amp;quot;] == &amp;quot;A&amp;quot;][&amp;quot;weekly_sales&amp;quot;].sum()

# Subset for type B stores, calc total weekly sales
sales_B = df[df[&amp;quot;type&amp;quot;] == &amp;quot;B&amp;quot;][&amp;quot;weekly_sales&amp;quot;].sum()

# Subset for type C stores, calc total weekly sales
sales_C = df[df[&amp;quot;type&amp;quot;] == &amp;quot;C&amp;quot;][&amp;quot;weekly_sales&amp;quot;].sum()

print(&#39;all=&#39;, sales_all)
print(&#39;A &#39;, sales_A)
print(&#39;B &#39;, sales_B)
print(&#39;C &#39;, sales_C)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;all= 2629115.29
A  2324619.4500000007
B  154701.55
C  149794.29
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.groupby(&#39;type&#39;)[&#39;weekly_sales&#39;].sum()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;type
A    2324619.45
B     154701.55
C     149794.29
Name: weekly_sales, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;A &#39;, sales_A/sales_all)
print(&#39;B &#39;, sales_B/sales_all)
print(&#39;C &#39;, sales_C/sales_all)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A  0.8841831542503412
B  0.05884167597686444
C  0.056975169772794564
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.groupby(&amp;quot;type&amp;quot;)[&amp;quot;weekly_sales&amp;quot;].sum()/df[&#39;weekly_sales&#39;].sum()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;type
A    0.884183
B    0.058842
C    0.056975
Name: weekly_sales, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;multiple-categories&#34;&gt;Multiple categories&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.groupby([&#39;type&#39;,&#39;is_holiday&#39;])[&#39;weekly_sales&#39;].sum()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;type  is_holiday
A     False         2248771.03
      True            75848.42
B     False          132873.65
      True            21827.90
C     False           91331.14
      True            58463.15
Name: weekly_sales, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;multiple-grouped-summaries&#34;&gt;Multiple grouped summaries&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.groupby(&#39;type&#39;)[&#39;weekly_sales&#39;].agg([np.min,np.max])
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;amin&lt;/th&gt;
      &lt;th&gt;amax&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;td&gt;1376.15&lt;/td&gt;
      &lt;td&gt;57258.43&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;2876.19&lt;/td&gt;
      &lt;td&gt;39773.71&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;7857.88&lt;/td&gt;
      &lt;td&gt;50605.27&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.groupby(&#39;type&#39;)[[&#39;weekly_sales&#39;,&#39;frac_sales&#39;]].agg([np.min,np.max])
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead tr th {
    text-align: left;
}

.dataframe thead tr:last-of-type th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th colspan=&#34;2&#34; halign=&#34;left&#34;&gt;weekly_sales&lt;/th&gt;
      &lt;th colspan=&#34;2&#34; halign=&#34;left&#34;&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;amin&lt;/th&gt;
      &lt;th&gt;amax&lt;/th&gt;
      &lt;th&gt;amin&lt;/th&gt;
      &lt;th&gt;amax&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;td&gt;1376.15&lt;/td&gt;
      &lt;td&gt;57258.43&lt;/td&gt;
      &lt;td&gt;1141.613223&lt;/td&gt;
      &lt;td&gt;47499.895208&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;2876.19&lt;/td&gt;
      &lt;td&gt;39773.71&lt;/td&gt;
      &lt;td&gt;2386.001914&lt;/td&gt;
      &lt;td&gt;32995.090104&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;7857.88&lt;/td&gt;
      &lt;td&gt;50605.27&lt;/td&gt;
      &lt;td&gt;6518.664179&lt;/td&gt;
      &lt;td&gt;41980.631009&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>DataFrames pivot tables</title>
      <link>http://othrif.github.io/technical_note/python/pandas/pivotdf/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/pivotdf/</guid>
      <description>&lt;p&gt;Most common summary statistics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.mean()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.std()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.var()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.median()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.mode()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.min()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.max()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.sum()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.quantile()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;generate-some-data&#34;&gt;Generate some data&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import numpy as np
from pandas import Timestamp

mycols = [&#39;store&#39;, &#39;type&#39;, &#39;department&#39;, &#39;date&#39;, &#39;weekly_sales&#39;, &#39;is_holiday&#39;]
content = np.array([[1, &#39;A&#39;, 1, Timestamp(&#39;2010-02-05 00:00:00&#39;), 24924.5, False],[1, &#39;B&#39;, 1, Timestamp(&#39;2010-03-05 00:00:00&#39;), 21827.9, True],[1, &#39;A&#39;, 1, Timestamp(&#39;2010-04-02 00:00:00&#39;), 57258.43, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-05-07 00:00:00&#39;), 17413.94, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-06-04 00:00:00&#39;), 17558.09, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-07-02 00:00:00&#39;), 16333.14, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-08-06 00:00:00&#39;), 17508.41, False],[1, &#39;B&#39;, 1, Timestamp(&#39;2010-09-03 00:00:00&#39;), 16241.78, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2010-10-01 00:00:00&#39;), 20094.19, True],[1, &#39;B&#39;, 1, Timestamp(&#39;2010-11-05 00:00:00&#39;), 34238.88, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-12-03 00:00:00&#39;), 22517.56, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2011-01-07 00:00:00&#39;), 15984.24, False],[1, &#39;C&#39;, 2, Timestamp(&#39;2010-02-05 00:00:00&#39;), 50605.27, True],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-03-05 00:00:00&#39;), 48397.98, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-04-02 00:00:00&#39;), 47450.5, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-05-07 00:00:00&#39;), 47903.01, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-06-04 00:00:00&#39;), 48754.47, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-07-02 00:00:00&#39;), 47077.72, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-08-06 00:00:00&#39;), 50031.73, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-09-03 00:00:00&#39;), 49015.05, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-10-01 00:00:00&#39;), 45829.02, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-11-05 00:00:00&#39;), 46381.43, True],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-12-03 00:00:00&#39;), 44405.02, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2011-01-07 00:00:00&#39;), 43202.29, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-02-05 00:00:00&#39;), 13740.12, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-03-05 00:00:00&#39;), 12275.58, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-04-02 00:00:00&#39;), 11157.08, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-05-07 00:00:00&#39;), 9372.8, True],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-06-04 00:00:00&#39;), 8001.41, False],[1, &#39;C&#39;, 3, Timestamp(&#39;2010-07-02 00:00:00&#39;), 7857.88, True],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-08-06 00:00:00&#39;), 26719.02, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-09-03 00:00:00&#39;), 19081.8, False],[1, &#39;B&#39;, 3, Timestamp(&#39;2010-10-01 00:00:00&#39;), 9775.17, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-11-05 00:00:00&#39;), 9825.22, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-12-03 00:00:00&#39;), 10856.85, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2011-01-07 00:00:00&#39;), 15808.15, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-02-05 00:00:00&#39;), 39954.04, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-03-05 00:00:00&#39;), 38086.19, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-04-02 00:00:00&#39;), 37809.49, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-05-07 00:00:00&#39;), 37168.34, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-06-04 00:00:00&#39;), 40548.19, False],[1, &#39;B&#39;, 4, Timestamp(&#39;2010-07-02 00:00:00&#39;), 39773.71, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-08-06 00:00:00&#39;), 40973.88, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-09-03 00:00:00&#39;), 38321.88, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-10-01 00:00:00&#39;), 34912.45, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-11-05 00:00:00&#39;), 37980.55, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-12-03 00:00:00&#39;), 37110.55, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2011-01-07 00:00:00&#39;), 37947.8, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-02-05 00:00:00&#39;), 32229.38, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-03-05 00:00:00&#39;), 23082.14, False],[1, &#39;B&#39;, 5, Timestamp(&#39;2010-04-02 00:00:00&#39;), 29967.92, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-05-07 00:00:00&#39;), 19260.44, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-06-04 00:00:00&#39;), 22932.26, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-07-02 00:00:00&#39;), 18887.71, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-08-06 00:00:00&#39;), 16926.17, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-09-03 00:00:00&#39;), 15390.52, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-10-01 00:00:00&#39;), 23381.38, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-11-05 00:00:00&#39;), 23903.81, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-12-03 00:00:00&#39;), 36472.02, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2011-01-07 00:00:00&#39;), 22699.69, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-02-05 00:00:00&#39;), 5749.03, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-03-05 00:00:00&#39;), 4221.25, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-04-02 00:00:00&#39;), 4132.61, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-05-07 00:00:00&#39;), 7477.7, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-06-04 00:00:00&#39;), 5484.9, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-07-02 00:00:00&#39;), 4541.91, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-08-06 00:00:00&#39;), 4700.38, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-09-03 00:00:00&#39;), 3553.75, False],[1, &#39;B&#39;, 6, Timestamp(&#39;2010-10-01 00:00:00&#39;), 2876.19, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-11-05 00:00:00&#39;), 5036.99, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-12-03 00:00:00&#39;), 6356.96, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2011-01-07 00:00:00&#39;), 1376.15, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-02-05 00:00:00&#39;), 21084.08, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-03-05 00:00:00&#39;), 19659.7, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-04-02 00:00:00&#39;), 22427.62, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-05-07 00:00:00&#39;), 20457.62, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-06-04 00:00:00&#39;), 44563.68, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-07-02 00:00:00&#39;), 22589.0, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-08-06 00:00:00&#39;), 21842.57, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-09-03 00:00:00&#39;), 18005.65, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-10-01 00:00:00&#39;), 16481.79, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-11-05 00:00:00&#39;), 19136.58, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-12-03 00:00:00&#39;), 47406.83, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2011-01-07 00:00:00&#39;), 17516.16, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-02-05 00:00:00&#39;), 40129.01, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-03-05 00:00:00&#39;), 38776.09, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-04-02 00:00:00&#39;), 38151.58, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-05-07 00:00:00&#39;), 35393.78, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-06-04 00:00:00&#39;), 35181.47, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-07-02 00:00:00&#39;), 35580.01, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-08-06 00:00:00&#39;), 34833.35, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-09-03 00:00:00&#39;), 35562.68, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-10-01 00:00:00&#39;), 34658.25, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-11-05 00:00:00&#39;), 36182.58, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-12-03 00:00:00&#39;), 36222.74, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2011-01-07 00:00:00&#39;), 36599.46, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-02-05 00:00:00&#39;), 16930.99, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-03-05 00:00:00&#39;), 24064.7, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-04-02 00:00:00&#39;), 25435.02, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-05-07 00:00:00&#39;), 27588.34, False]])
df = pd.DataFrame(content, columns=mycols)
df[&#39;frac_sales&#39;] = df[&#39;weekly_sales&#39;]*np.random.rand()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;24924.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;13457.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;21827.9&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;11785.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-04-02&lt;/td&gt;
      &lt;td&gt;57258.4&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;30915&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-05-07&lt;/td&gt;
      &lt;td&gt;17413.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;9402.16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-06-04&lt;/td&gt;
      &lt;td&gt;17558.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;9479.98&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.groupby([&#39;type&#39;,&#39;is_holiday&#39;])[[&#39;weekly_sales&#39;,&#39;frac_sales&#39;]].agg([np.min,np.max])
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead tr th {
    text-align: left;
}

.dataframe thead tr:last-of-type th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th colspan=&#34;2&#34; halign=&#34;left&#34;&gt;weekly_sales&lt;/th&gt;
      &lt;th colspan=&#34;2&#34; halign=&#34;left&#34;&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;amin&lt;/th&gt;
      &lt;th&gt;amax&lt;/th&gt;
      &lt;th&gt;amin&lt;/th&gt;
      &lt;th&gt;amax&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;2&#34; valign=&#34;top&#34;&gt;A&lt;/th&gt;
      &lt;th&gt;False&lt;/th&gt;
      &lt;td&gt;1376.15&lt;/td&gt;
      &lt;td&gt;57258.43&lt;/td&gt;
      &lt;td&gt;743.012533&lt;/td&gt;
      &lt;td&gt;30915.039145&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;True&lt;/th&gt;
      &lt;td&gt;9372.80&lt;/td&gt;
      &lt;td&gt;46381.43&lt;/td&gt;
      &lt;td&gt;5060.573245&lt;/td&gt;
      &lt;td&gt;25042.316460&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;2&#34; valign=&#34;top&#34;&gt;B&lt;/th&gt;
      &lt;th&gt;False&lt;/th&gt;
      &lt;td&gt;2876.19&lt;/td&gt;
      &lt;td&gt;39773.71&lt;/td&gt;
      &lt;td&gt;1552.915901&lt;/td&gt;
      &lt;td&gt;21474.668474&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;True&lt;/th&gt;
      &lt;td&gt;21827.90&lt;/td&gt;
      &lt;td&gt;21827.90&lt;/td&gt;
      &lt;td&gt;11785.345546&lt;/td&gt;
      &lt;td&gt;11785.345546&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;2&#34; valign=&#34;top&#34;&gt;C&lt;/th&gt;
      &lt;th&gt;False&lt;/th&gt;
      &lt;td&gt;16333.14&lt;/td&gt;
      &lt;td&gt;22517.56&lt;/td&gt;
      &lt;td&gt;8818.608237&lt;/td&gt;
      &lt;td&gt;12157.707587&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;True&lt;/th&gt;
      &lt;td&gt;7857.88&lt;/td&gt;
      &lt;td&gt;50605.27&lt;/td&gt;
      &lt;td&gt;4242.635849&lt;/td&gt;
      &lt;td&gt;27322.857141&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.pivot_table(values=[&#39;weekly_sales&#39;,&#39;frac_sales&#39;], index=[&#39;type&#39;,&#39;is_holiday&#39;],aggfunc=[np.min,np.max])
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead tr th {
    text-align: left;
}

.dataframe thead tr:last-of-type th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th colspan=&#34;2&#34; halign=&#34;left&#34;&gt;amin&lt;/th&gt;
      &lt;th colspan=&#34;2&#34; halign=&#34;left&#34;&gt;amax&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;2&#34; valign=&#34;top&#34;&gt;A&lt;/th&gt;
      &lt;th&gt;False&lt;/th&gt;
      &lt;td&gt;743.012533&lt;/td&gt;
      &lt;td&gt;1376.15&lt;/td&gt;
      &lt;td&gt;30915.039145&lt;/td&gt;
      &lt;td&gt;57258.43&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;True&lt;/th&gt;
      &lt;td&gt;5060.573245&lt;/td&gt;
      &lt;td&gt;9372.80&lt;/td&gt;
      &lt;td&gt;25042.316460&lt;/td&gt;
      &lt;td&gt;46381.43&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;2&#34; valign=&#34;top&#34;&gt;B&lt;/th&gt;
      &lt;th&gt;False&lt;/th&gt;
      &lt;td&gt;1552.915901&lt;/td&gt;
      &lt;td&gt;2876.19&lt;/td&gt;
      &lt;td&gt;21474.668474&lt;/td&gt;
      &lt;td&gt;39773.71&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;True&lt;/th&gt;
      &lt;td&gt;11785.345546&lt;/td&gt;
      &lt;td&gt;21827.90&lt;/td&gt;
      &lt;td&gt;11785.345546&lt;/td&gt;
      &lt;td&gt;21827.90&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;2&#34; valign=&#34;top&#34;&gt;C&lt;/th&gt;
      &lt;th&gt;False&lt;/th&gt;
      &lt;td&gt;8818.608237&lt;/td&gt;
      &lt;td&gt;16333.14&lt;/td&gt;
      &lt;td&gt;12157.707587&lt;/td&gt;
      &lt;td&gt;22517.56&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;True&lt;/th&gt;
      &lt;td&gt;4242.635849&lt;/td&gt;
      &lt;td&gt;7857.88&lt;/td&gt;
      &lt;td&gt;27322.857141&lt;/td&gt;
      &lt;td&gt;50605.27&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h4 id=&#34;add-margins&#34;&gt;Add margins&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.pivot_table(values=[&#39;weekly_sales&#39;,&#39;frac_sales&#39;], index=[&#39;type&#39;,&#39;is_holiday&#39;],aggfunc=[np.min,np.max], margins=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead tr th {
    text-align: left;
}

.dataframe thead tr:last-of-type th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th colspan=&#34;2&#34; halign=&#34;left&#34;&gt;amin&lt;/th&gt;
      &lt;th colspan=&#34;2&#34; halign=&#34;left&#34;&gt;amax&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;2&#34; valign=&#34;top&#34;&gt;A&lt;/th&gt;
      &lt;th&gt;False&lt;/th&gt;
      &lt;td&gt;743.012533&lt;/td&gt;
      &lt;td&gt;1376.15&lt;/td&gt;
      &lt;td&gt;30915.039145&lt;/td&gt;
      &lt;td&gt;57258.43&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;True&lt;/th&gt;
      &lt;td&gt;5060.573245&lt;/td&gt;
      &lt;td&gt;9372.80&lt;/td&gt;
      &lt;td&gt;25042.316460&lt;/td&gt;
      &lt;td&gt;46381.43&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;2&#34; valign=&#34;top&#34;&gt;B&lt;/th&gt;
      &lt;th&gt;False&lt;/th&gt;
      &lt;td&gt;1552.915901&lt;/td&gt;
      &lt;td&gt;2876.19&lt;/td&gt;
      &lt;td&gt;21474.668474&lt;/td&gt;
      &lt;td&gt;39773.71&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;True&lt;/th&gt;
      &lt;td&gt;11785.345546&lt;/td&gt;
      &lt;td&gt;21827.90&lt;/td&gt;
      &lt;td&gt;11785.345546&lt;/td&gt;
      &lt;td&gt;21827.90&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;2&#34; valign=&#34;top&#34;&gt;C&lt;/th&gt;
      &lt;th&gt;False&lt;/th&gt;
      &lt;td&gt;8818.608237&lt;/td&gt;
      &lt;td&gt;16333.14&lt;/td&gt;
      &lt;td&gt;12157.707587&lt;/td&gt;
      &lt;td&gt;22517.56&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;True&lt;/th&gt;
      &lt;td&gt;4242.635849&lt;/td&gt;
      &lt;td&gt;7857.88&lt;/td&gt;
      &lt;td&gt;27322.857141&lt;/td&gt;
      &lt;td&gt;50605.27&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;All&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;td&gt;743.012533&lt;/td&gt;
      &lt;td&gt;1376.15&lt;/td&gt;
      &lt;td&gt;30915.039145&lt;/td&gt;
      &lt;td&gt;57258.43&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;adding-a-column&#34;&gt;Adding a column&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.pivot_table(values=&#39;weekly_sales&#39;, index=&#39;type&#39;, columns=&#39;is_holiday&#39;, aggfunc=np.max)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;False&lt;/th&gt;
      &lt;th&gt;True&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;td&gt;57258.43&lt;/td&gt;
      &lt;td&gt;46381.43&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;39773.71&lt;/td&gt;
      &lt;td&gt;21827.90&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;22517.56&lt;/td&gt;
      &lt;td&gt;50605.27&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;fill-missing-with-0&#34;&gt;Fill missing with 0&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.pivot_table(values=&#39;weekly_sales&#39;, index=&#39;type&#39;, columns=&#39;is_holiday&#39;, aggfunc=np.max, fill_value=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;False&lt;/th&gt;
      &lt;th&gt;True&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;td&gt;57258.43&lt;/td&gt;
      &lt;td&gt;46381.43&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;39773.71&lt;/td&gt;
      &lt;td&gt;21827.90&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;22517.56&lt;/td&gt;
      &lt;td&gt;50605.27&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;working-with-pivot-tables&#34;&gt;Working with pivot tables&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;year&#39;] = df[&#39;date&#39;].dt.year
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;24924.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;220.866&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;21827.9&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;193.426&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-04-02&lt;/td&gt;
      &lt;td&gt;57258.4&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;507.39&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-05-07&lt;/td&gt;
      &lt;td&gt;17413.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;154.312&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-06-04&lt;/td&gt;
      &lt;td&gt;17558.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;155.589&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_by_type_vs_year = df.pivot_table(values=&#39;weekly_sales&#39;, index=[&#39;type&#39;,&#39;is_holiday&#39;], columns=&#39;year&#39;,aggfunc=np.min)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Get the worldwide mean temp by year
mean_temp_by_year = df_by_type_vs_year.mean()
# Filter for the year that had the highest mean temp
print(mean_temp_by_year[mean_temp_by_year==mean_temp_by_year.max()])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;year
2010    10303.61
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Get the mean temp by city
mean_temp_by_city = df_by_type_vs_year.mean(axis=&#39;columns&#39;)
# Filter for the city that had the lowest mean temp
print(mean_temp_by_city[mean_temp_by_city==mean_temp_by_city.min()])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;type  is_holiday
A     False         2464.95
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>DataFrames statistics</title>
      <link>http://othrif.github.io/technical_note/python/pandas/statdf/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/statdf/</guid>
      <description>&lt;p&gt;Most common summary statistics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.mean()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.std()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.var()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.median()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.mode()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.min()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.max()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.sum()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.quantile()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;generate-some-data&#34;&gt;Generate some data&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import numpy as np
from pandas import Timestamp

mycols = [&#39;store&#39;, &#39;type&#39;, &#39;department&#39;, &#39;date&#39;, &#39;weekly_sales&#39;, &#39;is_holiday&#39;]
content = np.array([[1, &#39;A&#39;, 1, Timestamp(&#39;2010-02-05 00:00:00&#39;), 24924.5, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2010-03-05 00:00:00&#39;), 21827.9, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2010-04-02 00:00:00&#39;), 57258.43, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2010-05-07 00:00:00&#39;), 17413.94, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2010-06-04 00:00:00&#39;), 17558.09, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2010-07-02 00:00:00&#39;), 16333.14, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2010-08-06 00:00:00&#39;), 17508.41, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2010-09-03 00:00:00&#39;), 16241.78, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2010-10-01 00:00:00&#39;), 20094.19, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2010-11-05 00:00:00&#39;), 34238.88, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2010-12-03 00:00:00&#39;), 22517.56, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2011-01-07 00:00:00&#39;), 15984.24, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-02-05 00:00:00&#39;), 50605.27, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-03-05 00:00:00&#39;), 48397.98, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-04-02 00:00:00&#39;), 47450.5, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-05-07 00:00:00&#39;), 47903.01, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-06-04 00:00:00&#39;), 48754.47, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-07-02 00:00:00&#39;), 47077.72, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-08-06 00:00:00&#39;), 50031.73, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-09-03 00:00:00&#39;), 49015.05, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-10-01 00:00:00&#39;), 45829.02, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-11-05 00:00:00&#39;), 46381.43, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-12-03 00:00:00&#39;), 44405.02, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2011-01-07 00:00:00&#39;), 43202.29, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-02-05 00:00:00&#39;), 13740.12, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-03-05 00:00:00&#39;), 12275.58, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-04-02 00:00:00&#39;), 11157.08, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-05-07 00:00:00&#39;), 9372.8, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-06-04 00:00:00&#39;), 8001.41, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-07-02 00:00:00&#39;), 7857.88, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-08-06 00:00:00&#39;), 26719.02, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-09-03 00:00:00&#39;), 19081.8, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-10-01 00:00:00&#39;), 9775.17, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-11-05 00:00:00&#39;), 9825.22, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-12-03 00:00:00&#39;), 10856.85, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2011-01-07 00:00:00&#39;), 15808.15, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-02-05 00:00:00&#39;), 39954.04, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-03-05 00:00:00&#39;), 38086.19, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-04-02 00:00:00&#39;), 37809.49, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-05-07 00:00:00&#39;), 37168.34, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-06-04 00:00:00&#39;), 40548.19, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-07-02 00:00:00&#39;), 39773.71, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-08-06 00:00:00&#39;), 40973.88, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-09-03 00:00:00&#39;), 38321.88, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-10-01 00:00:00&#39;), 34912.45, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-11-05 00:00:00&#39;), 37980.55, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-12-03 00:00:00&#39;), 37110.55, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2011-01-07 00:00:00&#39;), 37947.8, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-02-05 00:00:00&#39;), 32229.38, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-03-05 00:00:00&#39;), 23082.14, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-04-02 00:00:00&#39;), 29967.92, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-05-07 00:00:00&#39;), 19260.44, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-06-04 00:00:00&#39;), 22932.26, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-07-02 00:00:00&#39;), 18887.71, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-08-06 00:00:00&#39;), 16926.17, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-09-03 00:00:00&#39;), 15390.52, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-10-01 00:00:00&#39;), 23381.38, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-11-05 00:00:00&#39;), 23903.81, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-12-03 00:00:00&#39;), 36472.02, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2011-01-07 00:00:00&#39;), 22699.69, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-02-05 00:00:00&#39;), 5749.03, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-03-05 00:00:00&#39;), 4221.25, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-04-02 00:00:00&#39;), 4132.61, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-05-07 00:00:00&#39;), 7477.7, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-06-04 00:00:00&#39;), 5484.9, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-07-02 00:00:00&#39;), 4541.91, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-08-06 00:00:00&#39;), 4700.38, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-09-03 00:00:00&#39;), 3553.75, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-10-01 00:00:00&#39;), 2876.19, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-11-05 00:00:00&#39;), 5036.99, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-12-03 00:00:00&#39;), 6356.96, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2011-01-07 00:00:00&#39;), 1376.15, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-02-05 00:00:00&#39;), 21084.08, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-03-05 00:00:00&#39;), 19659.7, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-04-02 00:00:00&#39;), 22427.62, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-05-07 00:00:00&#39;), 20457.62, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-06-04 00:00:00&#39;), 44563.68, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-07-02 00:00:00&#39;), 22589.0, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-08-06 00:00:00&#39;), 21842.57, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-09-03 00:00:00&#39;), 18005.65, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-10-01 00:00:00&#39;), 16481.79, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-11-05 00:00:00&#39;), 19136.58, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-12-03 00:00:00&#39;), 47406.83, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2011-01-07 00:00:00&#39;), 17516.16, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-02-05 00:00:00&#39;), 40129.01, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-03-05 00:00:00&#39;), 38776.09, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-04-02 00:00:00&#39;), 38151.58, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-05-07 00:00:00&#39;), 35393.78, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-06-04 00:00:00&#39;), 35181.47, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-07-02 00:00:00&#39;), 35580.01, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-08-06 00:00:00&#39;), 34833.35, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-09-03 00:00:00&#39;), 35562.68, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-10-01 00:00:00&#39;), 34658.25, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-11-05 00:00:00&#39;), 36182.58, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-12-03 00:00:00&#39;), 36222.74, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2011-01-07 00:00:00&#39;), 36599.46, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-02-05 00:00:00&#39;), 16930.99, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-03-05 00:00:00&#39;), 24064.7, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-04-02 00:00:00&#39;), 25435.02, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-05-07 00:00:00&#39;), 27588.34, False]])
df = pd.DataFrame(content, columns=mycols)
df[&#39;frac_sales&#39;] = df[&#39;weekly_sales&#39;]*np.random.rand()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;24924.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;10462.7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;21827.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;9162.84&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-04-02&lt;/td&gt;
      &lt;td&gt;57258.4&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;24035.7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-05-07&lt;/td&gt;
      &lt;td&gt;17413.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;7309.96&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-06-04&lt;/td&gt;
      &lt;td&gt;17558.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;7370.47&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;weekly_sales&#39;].mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;26291.1529
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;weekly_sales&#39;].sum()*1e-6 # in millions
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2.62911529
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.sort_values(&#39;weekly_sales&#39;,ascending=False).head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-04-02&lt;/td&gt;
      &lt;td&gt;57258.4&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;50605.3&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;18&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2010-08-06&lt;/td&gt;
      &lt;td&gt;50031.7&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;19&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2010-09-03&lt;/td&gt;
      &lt;td&gt;49015.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;16&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2010-06-04&lt;/td&gt;
      &lt;td&gt;48754.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;efficient-summaries-with-agg&#34;&gt;Efficient summaries with &lt;code&gt;.agg()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.agg()&lt;/code&gt; method allows you to apply your own custom functions to a DataFrame, as well as apply functions to more than one column of a DataFrame at once, making your aggregations super efficient.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# A custom inter-quartile range function. Alternative to standard deviation that is helpful if your data contains outliers
def iqr(column):
    return column.quantile(0.75) - column.quantile(0.25)

print(iqr(df[&#39;weekly_sales&#39;]))
print(df[&#39;weekly_sales&#39;].agg(iqr))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;21645.687500000004
21645.687500000004
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(df[[&#39;weekly_sales&#39;,&#39;frac_sales&#39;]].agg(iqr))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;weekly_sales    21645.687500
frac_sales       9086.348194
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(df[[&#39;weekly_sales&#39;,&#39;frac_sales&#39;]].agg([iqr,np.median]))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;        weekly_sales   frac_sales
iqr       21645.6875  9086.348194
median    23231.7600  9752.143956
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cumulative-statistics&#34;&gt;Cumulative statistics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.cumsum()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.cummax()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;cum_weekly_sales&#39;] = df[&#39;weekly_sales&#39;].cumsum()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;cum_max_sales&#39;] = df[&#39;weekly_sales&#39;].cummax()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(df[[&#39;date&#39;,&#39;weekly_sales&#39;,&#39;cum_weekly_sales&#39;,&#39;cum_max_sales&#39;]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;         date weekly_sales cum_weekly_sales cum_max_sales
0  2010-02-05      24924.5          24924.5       24924.5
1  2010-03-05      21827.9          46752.4       24924.5
2  2010-04-02      57258.4           104011       57258.4
3  2010-05-07      17413.9           121425       57258.4
4  2010-06-04      17558.1           138983       57258.4
..        ...          ...              ...           ...
95 2011-01-07      36599.5       2.5351e+06       57258.4
96 2010-02-05        16931      2.55203e+06       57258.4
97 2010-03-05      24064.7      2.57609e+06       57258.4
98 2010-04-02        25435      2.60153e+06       57258.4
99 2010-05-07      27588.3      2.62912e+06       57258.4

[100 rows x 4 columns]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Datetime</title>
      <link>http://othrif.github.io/technical_note/python/basics/datetime/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/datetime/</guid>
      <description>&lt;h3 id=&#34;convert-string-to-datetime&#34;&gt;Convert string to datetime&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;datetime.strptime(date_string, format)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import datetime
date_string=&#39;03/01/2019 12:00:00 AM&#39;
datetime.strptime(date_string, &#39;%m/%d/%Y %I:%M:%S %p&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 3, 1, 0, 0)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;find-last-month&#34;&gt;Find last month&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import datetime
today = datetime.date.today()
print(today)
first = today.replace(day=1)
print(first)
lastMonth = first - datetime.timedelta(days=1)
print(lastMonth)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2020-05-17
2020-05-01
2020-04-30
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;count-number-of-months&#34;&gt;Count number of months&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def diff_month(d1, d2):
    return (d1.year - d2.year) * 12 + d1.month - d2.month
num_months = diff_month(first,lastMonth)
print(num_months)
num_months = diff_month(today,first)
print(num_months)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1
0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Defining a decorator @decorator</title>
      <link>http://othrif.github.io/technical_note/python/basics/function_decorator/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/function_decorator/</guid>
      <description>&lt;h3 id=&#34;defining-a-decorator&#34;&gt;Defining a decorator&lt;/h3&gt;
&lt;p&gt;The decorator is a function that takes another function as an argument and modifies its behavior. Add &lt;code&gt;@&lt;/code&gt; before the decorator function name without &lt;code&gt;()&lt;/code&gt;.
The syntax&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@decorator
def function():
    pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is equivalent to&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def function():
    pass

function = decorator(function)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def parent(func):
    # nested function
    def child(a,b):
        return func(a*2,b*2)
    return child

def multiply(a,b):
    return a*b

multiply = parent(multiply)
multiply(1,2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def parent(func):
    # nested function
    def child(a,b):
        return func(a*2,b*2)
    return child

@parent
def multiply(a,b):
    return a*b

multiply(1,2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;verifying-decorator&#34;&gt;Verifying decorator&lt;/h3&gt;
&lt;p&gt;The decorator &lt;code&gt;print_before_and_after()&lt;/code&gt; defines a nested function &lt;code&gt;wrapper()&lt;/code&gt; that calls whatever function gets passed to &lt;code&gt;print_before_and_after()&lt;/code&gt;. &lt;code&gt;wrapper()&lt;/code&gt; adds a little something else to the function call by printing one message before the decorated function is called and another right afterwards. Since &lt;code&gt;print_before_and_after()&lt;/code&gt; returns the new &lt;code&gt;wrapper()&lt;/code&gt; function, we can use it as a decorator to decorate the &lt;code&gt;multiply()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def print_before_and_after(func):
  def wrapper(*args):
    print(&#39;Before {}&#39;.format(func.__name__))
    # Call the function being decorated with *args
    func(*args)
    print(&#39;After {}&#39;.format(func.__name__))
  # Return the nested function
  return wrapper

@print_before_and_after
def multiply(a, b):
  print(a * b)

multiply(5, 10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Before multiply
50
After multiply
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Dictionaries</title>
      <link>http://othrif.github.io/technical_note/python/basics/dictionary/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/dictionary/</guid>
      <description>&lt;h3 id=&#34;basics&#34;&gt;Basics&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition of dictionary
europe = {&#39;spain&#39;:&#39;madrid&#39;, &#39;france&#39;:&#39;paris&#39;, &#39;germany&#39;:&#39;berlin&#39;, &#39;norway&#39;:&#39;oslo&#39; }

# Print out the keys in europe
print(europe.keys())

# Print out value that belongs to key &#39;norway&#39;
print(europe[&#39;norway&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dict_keys([&#39;spain&#39;, &#39;france&#39;, &#39;germany&#39;, &#39;norway&#39;])
oslo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;addremove-an-element&#34;&gt;Add/Remove an element&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;europe[&#39;italy&#39;] = &#39;rome&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;europe
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;spain&#39;: &#39;madrid&#39;,
 &#39;france&#39;: &#39;paris&#39;,
 &#39;germany&#39;: &#39;berlin&#39;,
 &#39;norway&#39;: &#39;oslo&#39;,
 &#39;italy&#39;: &#39;rome&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;del(europe[&#39;france&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;europe
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;spain&#39;: &#39;madrid&#39;, &#39;germany&#39;: &#39;berlin&#39;, &#39;norway&#39;: &#39;oslo&#39;, &#39;italy&#39;: &#39;rome&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Dictionary comprehesion</title>
      <link>http://othrif.github.io/technical_note/python/pandas/dict_comprehesion/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/dict_comprehesion/</guid>
      <description>&lt;p&gt;main difference between a list comprehension and a dict comprehension is the use of curly braces &lt;code&gt;{}&lt;/code&gt; instead of &lt;code&gt;[]&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create a list of strings: fellowship
fellowship = [&#39;frodo&#39;, &#39;samwise&#39;, &#39;merry&#39;, &#39;aragorn&#39;, &#39;legolas&#39;, &#39;boromir&#39;, &#39;gimli&#39;]

# Create dict comprehension: new_fellowship
new_fellowship = {member: len(member) for member in fellowship}

# Print the new dictionary
print(new_fellowship)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;frodo&#39;: 5, &#39;samwise&#39;: 7, &#39;merry&#39;: 5, &#39;aragorn&#39;: 7, &#39;legolas&#39;: 7, &#39;boromir&#39;: 7, &#39;gimli&#39;: 5}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Dimension reduction with PCA transformation</title>
      <link>http://othrif.github.io/technical_note/python/sklearn/pca_tranf/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/sklearn/pca_tranf/</guid>
      <description>&lt;p&gt;PCA: Principle Component Analysis: step1 &amp;gt; decorrelation, step2 &amp;gt; reduce dimension&lt;/p&gt;
&lt;p&gt;1- Decorrelation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rotates data samples to be aligned with axes&lt;/li&gt;
&lt;li&gt;mean ~ 0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;decorrelation&#34;&gt;Decorrelation&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import numpy as np
df = pd.read_csv(&#39;Grains/seeds-width-vs-length.csv&#39;, header=None)
grains = df.to_numpy()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Perform the necessary imports
import matplotlib.pyplot as plt
from scipy.stats import pearsonr

# Assign the 0th column of grains: width
width = grains[:, 0]

# Assign the 1st column of grains: length
length = grains[:, 1]

# Scatter plot width vs length
plt.scatter(width, length)
plt.axis(&#39;equal&#39;)
plt.show()

# Calculate the Pearson correlation
correlation, pvalue = pearsonr(width, length)

# Display the correlation
print(f&#39;Pearson Correlation before-PCA: {correlation}&#39;)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;pca_tranf_4_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Pearson Correlation before-PCA: 0.8604149377143466
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import PCA
from sklearn.decomposition import PCA

# Create PCA instance: model
model = PCA()

# Apply the fit_transform method of model to grains: pca_features
pca_features = model.fit_transform(grains)

# Assign 0th column of pca_features: xs
xs = pca_features[:,0]

# Assign 1st column of pca_features: ys
ys = pca_features[:,1]

# Scatter plot xs vs ys
plt.scatter(xs, ys)
plt.axis(&#39;equal&#39;)
plt.show()

# Calculate the Pearson correlation of xs and ys
correlation, pvalue = pearsonr(xs, ys)

# Display the correlation
print(f&#39;Pearson Correlation after-PCA: {correlation}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;pca_tranf_5_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Pearson Correlation after-PCA: 2.5478751053409354e-17
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;principal-component-visualized&#34;&gt;Principal component visualized&lt;/h3&gt;
&lt;p&gt;Principle component: direction in which the sample varies the most&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Make a scatter plot of the untransformed points
plt.scatter(grains[:,0], grains[:,1])

# Create a PCA instance: model
model = PCA()

# Fit model to points
model.fit(grains)

# Get the mean of the grain samples: mean
mean = model.mean_

# Get the first principal component: first_pc
first_pc = model.components_[0,:]

# Plot first_pc as an arrow, starting at mean
plt.arrow(mean[0], mean[1], first_pc[0], first_pc[1], color=&#39;red&#39;, width=0.02)

# Keep axes on same scale
plt.axis(&#39;equal&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;pca_tranf_7_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;intrinsic-dimension&#34;&gt;Intrinsic dimension&lt;/h3&gt;
&lt;p&gt;Intrinsic dimension = number of PCA features with significant variance&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
df = pd.read_csv(&#39;fish.csv&#39;, header=None) # prevent first row from becoming header
samples = df.iloc[:,1:].to_numpy()
species = df.iloc[:,0].to_numpy()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Perform the necessary imports
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline
import matplotlib.pyplot as plt

# Create scaler: scaler
scaler = StandardScaler()

# Create a PCA instance: pca
pca = PCA()

# Create pipeline: pipeline
pipeline = make_pipeline(scaler, pca)

# Fit the pipeline to &#39;samples&#39;
pipeline.fit(samples)

# Plot the explained variances
features = range(pca.n_components_)
plt.bar(features, pca.explained_variance_)
plt.xlabel(&#39;PCA feature&#39;)
plt.ylabel(&#39;variance&#39;)
plt.xticks(features)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;pca_tranf_10_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Since PCA features 0 and 1 have significant variance, the intrinsic dimension of this dataset appears to be 2.&lt;/p&gt;
&lt;h3 id=&#34;dimension-reduction&#34;&gt;Dimension reduction&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(samples)
scaled_samples = scaler.transform(samples)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;Shape of data pre-pca: {scaled_samples.shape}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Shape of data (85, 6)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import PCA
from sklearn.decomposition import PCA

# Create a PCA model with 2 components: pca
pca = PCA(n_components=2)

# Fit the PCA instance to the scaled samples
pca.fit(scaled_samples)

# Transform the scaled samples: pca_features
pca_features = pca.transform(scaled_samples)

# Print the shape of pca_features
print(f&#39;Shape of data  post-pca:{pca_features.shape}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Shape of data  post-pca:(85, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.scatter(pca_features[:,0], pca_features[:,1])
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;pca_tranf_16_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dimensionality reduction with NMF and recommender system</title>
      <link>http://othrif.github.io/technical_note/python/sklearn/nmf/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/sklearn/nmf/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;NMF = &amp;ldquo;non-negative matrix factorization&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Dimension reduction technique&lt;/li&gt;
&lt;li&gt;NMF models are interpretable (unlike PCA)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nmf-applied-to-wikipedia-articles&#34;&gt;NMF applied to Wikipedia articles&lt;/h3&gt;
&lt;p&gt;apply NMF, this time using the tf-idf word-frequency array of Wikipedia articles, given as a csr matrix &lt;code&gt;articles&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
from scipy.sparse import csr_matrix

df = pd.read_csv(&#39;wikipedia/wikipedia-vectors.csv&#39;, index_col=0)
words = [x.strip(&#39;\n&#39;).split(&#39; &#39;)[0] for x in open(&#39;wikipedia/wikipedia-vocabulary-utf8.txt&#39;).readlines()]
articles = csr_matrix(df.transpose())
titles = list(df.columns)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import NMF
from sklearn.decomposition import NMF

# Create an NMF instance: model
model = NMF(n_components=6)

# Fit the model to articles
model.fit(articles)

# Transform the articles: nmf_features
nmf_features = model.transform(articles)

# Print the NMF features
print(articles.shape)
print(nmf_features.shape)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(60, 13125)
(60, 6)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import pandas
import pandas as pd

# Create a pandas DataFrame: df
df = pd.DataFrame(nmf_features, index=titles)

# Print the row for &#39;Anne Hathaway&#39;
print(df.loc[&#39;Anne Hathaway&#39;])

# Print the row for &#39;Denzel Washington&#39;
print(df.loc[&#39;Denzel Washington&#39;])

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0    0.003846
1    0.000000
2    0.000000
3    0.575663
4    0.000000
5    0.000000
Name: Anne Hathaway, dtype: float64
0    0.000000
1    0.005601
2    0.000000
3    0.422345
4    0.000000
5    0.000000
Name: Denzel Washington, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The NMF feature 3 has by far the highest value. This means that both articles are reconstructed using mainly the 3rd NMF component.&lt;/p&gt;
&lt;h4 id=&#34;nmf-learns-topics-of-documents&#34;&gt;NMF learns topics of documents&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import pandas
import pandas as pd

# Create a DataFrame: components_df
components_df = pd.DataFrame(model.components_, columns=words)

# Print the shape of the DataFrame
print(components_df.shape)

# Select row 3: component
component = components_df.iloc[3,:]

# Print result of nlargest
print(component.nlargest())

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(6, 13125)
film       0.627908
award      0.253144
starred    0.245297
role       0.211462
actress    0.186407
Name: 3, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Take a moment to recognise the topics that the articles about Anne Hathaway and Denzel Washington have in common!&lt;/p&gt;
&lt;h3 id=&#34;recommender-system-which-articles-are-similar-to-cristiano-ronaldo&#34;&gt;Recommender system: which articles are similar to &amp;lsquo;Cristiano Ronaldo&amp;rsquo;?&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Perform the necessary imports
import pandas as pd
from sklearn.preprocessing import normalize

# Normalize the NMF features: norm_features
norm_features = normalize(nmf_features)

# Create a DataFrame: df
df = pd.DataFrame(norm_features, index=titles)

# Select the row corresponding to &#39;Cristiano Ronaldo&#39;: article
article = df.loc[&#39;Cristiano Ronaldo&#39;]

# Compute the dot products: similarities
similarities = df.dot(article)

# Display those with the largest cosine similarity
print(similarities.nlargest())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Cristiano Ronaldo                1.000000
Franck Ribéry                    0.999972
Radamel Falcao                   0.999942
Zlatan Ibrahimović               0.999942
France national football team    0.999923
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;led-digits-dataset&#34;&gt;LED digits dataset&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
from matplotlib import pyplot as plt

samples = pd.read_csv(&#39;lcd-digits.csv&#39;, header=None ).to_numpy()

def show_as_image(sample):
    bitmap = sample.reshape((13, 8))
    plt.figure()
    plt.imshow(bitmap, cmap=&#39;gray&#39;, interpolation=&#39;nearest&#39;)
    plt.colorbar()
    plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;digit = samples[0,:]
show_as_image(digit)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;nmf_14_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;nmf-learns-the-parts-of-images&#34;&gt;NMF learns the parts of images&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import NMF
from sklearn.decomposition import NMF

# Create an NMF model: model
model = NMF(n_components = 7) #7 is the number of cells in an LED display

# Apply fit_transform to samples: features
features = model.fit_transform(samples)

# Call show_as_image on each component
for component in model.components_:
    show_as_image(component)

# Assign the 0th row of features: digit_features
digit_features = features[0,:]

# Print digit_features
print(digit_features)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;nmf_16_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;nmf_16_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;nmf_16_2.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;nmf_16_3.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;nmf_16_4.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;nmf_16_5.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;nmf_16_6.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[4.76823559e-01 0.00000000e+00 0.00000000e+00 5.90605054e-01
 4.81559442e-01 0.00000000e+00 7.37557191e-16]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Take a moment to look through the plots and notice how NMF has expressed the digit as a sum of the components!
7 = 0.47 * feature1 + 0.59 * feature4 + 0.48 * feature5&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Do not truncate column</title>
      <link>http://othrif.github.io/technical_note/python/pandas/no_truncate/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/no_truncate/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
counts_dict = {}
csv_url=&#39;../datasets/tweets.csv&#39;
chunk = pd.read_csv(csv_url)
print(chunk[&#39;text&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0     RT @bpolitics: .@krollbondrating&#39;s Christopher...
1     RT @HeidiAlpine: @dmartosko Cruz video found.....
2     Njihuni me Zonjën Trump !!! | Ekskluzive https...
3     Your an idiot she shouldn&#39;t have tried to grab...
4     RT @AlanLohner: The anti-American D.C. elites ...
                            ...                        
95    RT @claytoncubitt: Stop asking Bernie supporte...
96    Kasich is gonna fuck this up for Ted Cruz  htt...
97    RT @akaMaude13: Seriously can&#39;t make this up. ...
98    Kasich is gonna fuck this up for Ted Cruz  htt...
99    @marklevinshow try reporting this truth. https...
Name: text, Length: 100, dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.set_option(&#39;display.max_colwidth&#39;,None)
print(chunk[&#39;text&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0     RT @bpolitics: .@krollbondrating&#39;s Christopher Whalen says Clinton is the weakest Dem candidate in 50 years https://t.co/pLk7rvoRSn https:/…
1                               RT @HeidiAlpine: @dmartosko Cruz video found.....racing from the scene.... #cruzsexscandal https://t.co/zuAPZfQDk3
2                                                                                 Njihuni me Zonjën Trump !!! | Ekskluzive https://t.co/4KmsQi47VD
3                                       Your an idiot she shouldn&#39;t have tried to grab trump after the fact she&#39;s an idiot https://t.co/lpASyeNVpG
4     RT @AlanLohner: The anti-American D.C. elites despise Trump for his America-first foreign policy. Trump threatens their gravy train. https:…
                                                                          ...                                                                     
95    RT @claytoncubitt: Stop asking Bernie supporters if they’ll vote for Hillary against Trump. We got a plan to beat Trump already. Called Ber…
96                                                                              Kasich is gonna fuck this up for Ted Cruz  https://t.co/JYYok5qx7R
97                                                 RT @akaMaude13: Seriously can&#39;t make this up. What a joke. #NeverTrump  https://t.co/JkTx6mdRgC
98                                                                              Kasich is gonna fuck this up for Ted Cruz  https://t.co/JYYok5qx7R
99                                                                                @marklevinshow try reporting this truth. https://t.co/z76fZzCRK3
Name: text, Length: 100, dtype: object
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Docstrings: google style and numpydoc</title>
      <link>http://othrif.github.io/technical_note/python/basics/docstring_style/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/docstring_style/</guid>
      <description>&lt;h3 id=&#34;google-style&#34;&gt;Google style&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def count_letter(content, letter):
  &amp;quot;&amp;quot;&amp;quot;Count the number of times `letter` appears in `content`.

  Args:
    content (str): The string to search.
    letter (str): The letter to search for.

  Returns:
    int

  # Add a section detailing what errors might be raised
  Raises:
    ValueError: If `letter` is not a one-character string.
  &amp;quot;&amp;quot;&amp;quot;
  if (not isinstance(letter, str)) or len(letter) != 1:
    raise ValueError(&#39;`letter` must be a single character string.&#39;)
  return len([char for char in content if char == letter])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;numpydoc&#34;&gt;Numpydoc&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def function(arg_1, arg_2=42):
    &amp;quot;&amp;quot;&amp;quot;
    Description of what the function does.
    
    Parameters
    ----------
    arg_1 : expected type of arg_1
        Description of arg_1.
    arg_2 : int, optional
        Write optional when an argument has a default value.
        Default=42.
        
    Returns
    -------
    The type of the return value
        Can include a description of the return value.
        Replace &amp;quot;Returns&amp;quot; with &amp;quot;Yields&amp;quot; if this function is a generator
    &amp;quot;&amp;quot;&amp;quot;
    pass
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;retriving-docstrings&#34;&gt;Retriving docstrings&lt;/h3&gt;
&lt;h4 id=&#34;help&#34;&gt;&lt;code&gt;help()&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(count_letter)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Help on function count_letter in module __main__:

count_letter(content, letter)
    Count the number of times `letter` appears in `content`.
    
    Args:
      content (str): The string to search.
      letter (str): The letter to search for.
    
    Returns:
      int
    
    # Add a section detailing what errors might be raised
    Raises:
      ValueError: If `letter` is not a one-character string.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;__doc__&#34;&gt;&lt;code&gt;__doc__&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;docstring = count_letter.__doc__

border = &#39;#&#39; * 100
print(&#39;{}\n{}\n{}&#39;.format(border, docstring, border))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;####################################################################################################
Count the number of times `letter` appears in `content`.

  Args:
    content (str): The string to search.
    letter (str): The letter to search for.

  Returns:
    int

  # Add a section detailing what errors might be raised
  Raises:
    ValueError: If `letter` is not a one-character string.
  
####################################################################################################
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;module-inspectgetdoc&#34;&gt;Module &lt;code&gt;inspect.getdoc()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Preferred way for visually pretty doc!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import inspect

# Get the docstring with a function from the inspect module
docstring = inspect.getdoc(function)

border = &#39;#&#39; * 100
print(&#39;{}\n{}\n{}&#39;.format(border, docstring, border))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;####################################################################################################
Description of what the function does.

Parameters
----------
arg_1 : expected type of arg_1
    Description of arg_1.
arg_2 : int, optional
    Write optional when an argument has a default value.
    Default=42.
    
Returns
-------
The type of the return value
    Can include a description of the return value.
    Replace &amp;quot;Returns&amp;quot; with &amp;quot;Yields&amp;quot; if this function is a generator
####################################################################################################
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;tools-to-generated-docs&#34;&gt;Tools to generated docs:&lt;/h3&gt;
&lt;p&gt;There are some wonderful tools like &lt;code&gt;sphinx&lt;/code&gt; and &lt;code&gt;pydoc&lt;/code&gt; that will automatically generate online documentation for you based off of your docstrings.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Encoding techniques</title>
      <link>http://othrif.github.io/technical_note/math/stats/encoding/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/math/stats/encoding/</guid>
      <description>&lt;h3 id=&#34;centrality&#34;&gt;Centrality&lt;/h3&gt;
&lt;p&gt;label encoding and one-hot encoding.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;laptops = pd.read_csv(&#39;laptops.csv&#39; , encoding=&#39;latin-1&#39;, index_col=0) # added encoding because of errors
laptops = laptops.loc[laptops[&#39;Company&#39;].isin([&#39;Apple&#39;, &#39;Dell&#39;, &#39;Lenovo&#39;])] 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;laptops.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Company&lt;/th&gt;
      &lt;th&gt;Product&lt;/th&gt;
      &lt;th&gt;TypeName&lt;/th&gt;
      &lt;th&gt;Inches&lt;/th&gt;
      &lt;th&gt;ScreenResolution&lt;/th&gt;
      &lt;th&gt;Cpu&lt;/th&gt;
      &lt;th&gt;Ram&lt;/th&gt;
      &lt;th&gt;Memory&lt;/th&gt;
      &lt;th&gt;Gpu&lt;/th&gt;
      &lt;th&gt;OpSys&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Price_euros&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Apple&lt;/td&gt;
      &lt;td&gt;MacBook Pro&lt;/td&gt;
      &lt;td&gt;Ultrabook&lt;/td&gt;
      &lt;td&gt;13.3&lt;/td&gt;
      &lt;td&gt;IPS Panel Retina Display 2560x1600&lt;/td&gt;
      &lt;td&gt;Intel Core i5 2.3GHz&lt;/td&gt;
      &lt;td&gt;8GB&lt;/td&gt;
      &lt;td&gt;128GB SSD&lt;/td&gt;
      &lt;td&gt;Intel Iris Plus Graphics 640&lt;/td&gt;
      &lt;td&gt;macOS&lt;/td&gt;
      &lt;td&gt;1.37kg&lt;/td&gt;
      &lt;td&gt;1339.69&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Apple&lt;/td&gt;
      &lt;td&gt;Macbook Air&lt;/td&gt;
      &lt;td&gt;Ultrabook&lt;/td&gt;
      &lt;td&gt;13.3&lt;/td&gt;
      &lt;td&gt;1440x900&lt;/td&gt;
      &lt;td&gt;Intel Core i5 1.8GHz&lt;/td&gt;
      &lt;td&gt;8GB&lt;/td&gt;
      &lt;td&gt;128GB Flash Storage&lt;/td&gt;
      &lt;td&gt;Intel HD Graphics 6000&lt;/td&gt;
      &lt;td&gt;macOS&lt;/td&gt;
      &lt;td&gt;1.34kg&lt;/td&gt;
      &lt;td&gt;898.94&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Apple&lt;/td&gt;
      &lt;td&gt;MacBook Pro&lt;/td&gt;
      &lt;td&gt;Ultrabook&lt;/td&gt;
      &lt;td&gt;15.4&lt;/td&gt;
      &lt;td&gt;IPS Panel Retina Display 2880x1800&lt;/td&gt;
      &lt;td&gt;Intel Core i7 2.7GHz&lt;/td&gt;
      &lt;td&gt;16GB&lt;/td&gt;
      &lt;td&gt;512GB SSD&lt;/td&gt;
      &lt;td&gt;AMD Radeon Pro 455&lt;/td&gt;
      &lt;td&gt;macOS&lt;/td&gt;
      &lt;td&gt;1.83kg&lt;/td&gt;
      &lt;td&gt;2537.45&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Apple&lt;/td&gt;
      &lt;td&gt;MacBook Pro&lt;/td&gt;
      &lt;td&gt;Ultrabook&lt;/td&gt;
      &lt;td&gt;13.3&lt;/td&gt;
      &lt;td&gt;IPS Panel Retina Display 2560x1600&lt;/td&gt;
      &lt;td&gt;Intel Core i5 3.1GHz&lt;/td&gt;
      &lt;td&gt;8GB&lt;/td&gt;
      &lt;td&gt;256GB SSD&lt;/td&gt;
      &lt;td&gt;Intel Iris Plus Graphics 650&lt;/td&gt;
      &lt;td&gt;macOS&lt;/td&gt;
      &lt;td&gt;1.37kg&lt;/td&gt;
      &lt;td&gt;1803.60&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;Apple&lt;/td&gt;
      &lt;td&gt;MacBook Pro&lt;/td&gt;
      &lt;td&gt;Ultrabook&lt;/td&gt;
      &lt;td&gt;15.4&lt;/td&gt;
      &lt;td&gt;IPS Panel Retina Display 2880x1800&lt;/td&gt;
      &lt;td&gt;Intel Core i7 2.2GHz&lt;/td&gt;
      &lt;td&gt;16GB&lt;/td&gt;
      &lt;td&gt;256GB Flash Storage&lt;/td&gt;
      &lt;td&gt;Intel Iris Pro Graphics&lt;/td&gt;
      &lt;td&gt;Mac OS X&lt;/td&gt;
      &lt;td&gt;2.04kg&lt;/td&gt;
      &lt;td&gt;2139.97&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;label-encoding&#34;&gt;Label encoding&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn import preprocessing
# Create the encoder and print our encoded new_vals
encoder = preprocessing.LabelEncoder()
new_vals = encoder.fit_transform(laptops[&#39;Company&#39;])
print(new_vals)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[0 0 0 0 0 0 0 1 0 0 1 0 2 1 2 1 1 0 1 1 1 0 2 1 1 1 0 2 1 2 1 1 1 2 2 1 1
 2 1 1 0 2 1 1 1 1 1 1 2 2 1 2 1 1 2 1 1 1 2 2 2 2 1 1 2 2 1 1 2 1 2 1 2 1
 1 2 1 1 2 1 2 2 1 1 2 2 1 2 1 1 1 2 2 1 2 1 1 1 2 1 1 2 1 1 2 1 2 1 0 1 2
 1 2 1 2 1 1 1 2 2 0 1 2 1 1 2 2 2 1 2 2 2 2 2 1 2 2 1 2 2 2 2 2 2 1 1 2 2
 2 1 2 1 1 1 2 2 1 2 1 1 1 1 2 1 1 1 2 2 1 2 1 2 1 2 1 2 2 2 2 1 1 2 1 2 2
 1 2 2 2 1 2 2 2 2 1 1 1 2 2 1 1 1 1 2 2 2 2 2 2 1 2 2 1 1 1 2 1 1 1 2 2 1
 2 1 1 1 2 1 1 1 2 2 1 1 2 2 2 2 2 2 2 2 2 2 2 1 1 1 2 1 1 2 2 2 1 1 1 1 1
 2 1 1 2 2 2 2 1 1 2 1 2 2 1 1 2 2 2 2 2 1 1 1 1 2 2 2 1 2 2 2 2 1 1 1 2 2
 2 1 1 1 1 1 2 1 2 2 1 1 2 2 1 2 2 1 2 2 2 2 1 1 1 2 1 1 2 2 1 2 2 2 1 2 1
 1 2 2 2 2 1 2 2 2 2 1 2 2 2 1 1 1 2 1 2 2 2 1 2 1 1 1 1 2 2 1 1 1 2 2 1 2
 2 2 1 2 1 1 1 1 1 2 1 2 2 2 1 2 2 0 2 1 2 1 1 1 1 1 2 1 1 2 1 1 2 2 2 1 2
 2 2 1 2 1 1 1 1 2 1 1 2 2 2 1 2 1 2 2 2 1 1 2 1 1 2 2 1 1 1 1 1 2 2 2 1 2
 2 1 1 2 1 2 1 2 2 1 1 1 2 2 1 2 1 1 2 1 1 1 2 1 1 1 2 1 1 1 2 1 2 1 2 1 1
 2 2 1 1 1 2 1 1 1 1 2 2 2 2 1 1 1 1 1 1 1 1 0 1 2 2 2 2 2 2 2 1 2 1 1 1 1
 1 2 1 2 1 2 2 1 2 1 2 2 2 2 2 1 2 1 2 2 2 1 1 2 2 2 2 1 2 2 2 2 2 2 2 2 1
 1 1 2 0 1 2 1 2 1 1 1 2 0 1 2 2 2 1 1 1 1 2 2 1 0 1 2 2 1 1 2 1 1 2 2 1 1
 2 2 1 1 2 1 2 2 2 1 1 2 1 2 2 2 1 1 2 1 2 2 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;one-hot-encode&#34;&gt;One-hot encode&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# One-hot encode Company for laptops2
laptops2 = pd.get_dummies(data=laptops, columns=[&#39;Company&#39;])
laptops2.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Product&lt;/th&gt;
      &lt;th&gt;TypeName&lt;/th&gt;
      &lt;th&gt;Inches&lt;/th&gt;
      &lt;th&gt;ScreenResolution&lt;/th&gt;
      &lt;th&gt;Cpu&lt;/th&gt;
      &lt;th&gt;Ram&lt;/th&gt;
      &lt;th&gt;Memory&lt;/th&gt;
      &lt;th&gt;Gpu&lt;/th&gt;
      &lt;th&gt;OpSys&lt;/th&gt;
      &lt;th&gt;Weight&lt;/th&gt;
      &lt;th&gt;Price_euros&lt;/th&gt;
      &lt;th&gt;Company_Apple&lt;/th&gt;
      &lt;th&gt;Company_Dell&lt;/th&gt;
      &lt;th&gt;Company_Lenovo&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;MacBook Pro&lt;/td&gt;
      &lt;td&gt;Ultrabook&lt;/td&gt;
      &lt;td&gt;13.3&lt;/td&gt;
      &lt;td&gt;IPS Panel Retina Display 2560x1600&lt;/td&gt;
      &lt;td&gt;Intel Core i5 2.3GHz&lt;/td&gt;
      &lt;td&gt;8GB&lt;/td&gt;
      &lt;td&gt;128GB SSD&lt;/td&gt;
      &lt;td&gt;Intel Iris Plus Graphics 640&lt;/td&gt;
      &lt;td&gt;macOS&lt;/td&gt;
      &lt;td&gt;1.37kg&lt;/td&gt;
      &lt;td&gt;1339.69&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Macbook Air&lt;/td&gt;
      &lt;td&gt;Ultrabook&lt;/td&gt;
      &lt;td&gt;13.3&lt;/td&gt;
      &lt;td&gt;1440x900&lt;/td&gt;
      &lt;td&gt;Intel Core i5 1.8GHz&lt;/td&gt;
      &lt;td&gt;8GB&lt;/td&gt;
      &lt;td&gt;128GB Flash Storage&lt;/td&gt;
      &lt;td&gt;Intel HD Graphics 6000&lt;/td&gt;
      &lt;td&gt;macOS&lt;/td&gt;
      &lt;td&gt;1.34kg&lt;/td&gt;
      &lt;td&gt;898.94&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;MacBook Pro&lt;/td&gt;
      &lt;td&gt;Ultrabook&lt;/td&gt;
      &lt;td&gt;15.4&lt;/td&gt;
      &lt;td&gt;IPS Panel Retina Display 2880x1800&lt;/td&gt;
      &lt;td&gt;Intel Core i7 2.7GHz&lt;/td&gt;
      &lt;td&gt;16GB&lt;/td&gt;
      &lt;td&gt;512GB SSD&lt;/td&gt;
      &lt;td&gt;AMD Radeon Pro 455&lt;/td&gt;
      &lt;td&gt;macOS&lt;/td&gt;
      &lt;td&gt;1.83kg&lt;/td&gt;
      &lt;td&gt;2537.45&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;MacBook Pro&lt;/td&gt;
      &lt;td&gt;Ultrabook&lt;/td&gt;
      &lt;td&gt;13.3&lt;/td&gt;
      &lt;td&gt;IPS Panel Retina Display 2560x1600&lt;/td&gt;
      &lt;td&gt;Intel Core i5 3.1GHz&lt;/td&gt;
      &lt;td&gt;8GB&lt;/td&gt;
      &lt;td&gt;256GB SSD&lt;/td&gt;
      &lt;td&gt;Intel Iris Plus Graphics 650&lt;/td&gt;
      &lt;td&gt;macOS&lt;/td&gt;
      &lt;td&gt;1.37kg&lt;/td&gt;
      &lt;td&gt;1803.60&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;MacBook Pro&lt;/td&gt;
      &lt;td&gt;Ultrabook&lt;/td&gt;
      &lt;td&gt;15.4&lt;/td&gt;
      &lt;td&gt;IPS Panel Retina Display 2880x1800&lt;/td&gt;
      &lt;td&gt;Intel Core i7 2.2GHz&lt;/td&gt;
      &lt;td&gt;16GB&lt;/td&gt;
      &lt;td&gt;256GB Flash Storage&lt;/td&gt;
      &lt;td&gt;Intel Iris Pro Graphics&lt;/td&gt;
      &lt;td&gt;Mac OS X&lt;/td&gt;
      &lt;td&gt;2.04kg&lt;/td&gt;
      &lt;td&gt;2139.97&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Enumerate a dictionary</title>
      <link>http://othrif.github.io/technical_note/python/basics/enumerate/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/enumerate/</guid>
      <description>&lt;h3 id=&#34;enumerate-through-both-keys-and-values&#34;&gt;Enumerate through both keys and values&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;example_dict = {1:&#39;a&#39;, 2:&#39;b&#39;, 3:&#39;c&#39;, 4:&#39;d&#39;}
for i, (k, v) in enumerate(example_dict.items()):
    print(i, k, v)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0 1 a
1 2 b
2 3 c
3 4 d
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Error and exception</title>
      <link>http://othrif.github.io/technical_note/python/basics/exception/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/exception/</guid>
      <description>&lt;h3 id=&#34;error-handling-with-try-except-finally&#34;&gt;Error handling with try-except-finally&lt;/h3&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try: 
    # code that might raise an error
except:
    # do something about the error
finally:
    # this code runs no matter what 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def shout_echo(word1, echo=1):
    &amp;quot;&amp;quot;&amp;quot;Concatenate echo copies of word1 and three
    exclamation marks at the end of the string.&amp;quot;&amp;quot;&amp;quot;

    echo_word=&#39;&#39;
    shout_words=&#39;&#39;

    # Add exception handling with try-except
    try:
        echo_word = word1*echo
        shout_words = echo_word+&#39;!!!&#39;
    except:
        print(&amp;quot;word1 must be a string and echo must be an integer.&amp;quot;)
        
    return shout_words

shout_echo(&#39;particle&#39;, echo=&#39;accelerator&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;word1 must be a string and echo must be an integer.





&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;error-handling-by-raising-an-error&#34;&gt;Error handling by raising an error&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def shout_echo(word1, echo=1):
    &amp;quot;&amp;quot;&amp;quot;Concatenate echo copies of word1 and three
    exclamation marks at the end of the string.&amp;quot;&amp;quot;&amp;quot;

    # Raise an error with raise
    if echo&amp;lt;0:
        raise ValueError(&#39;echo must be greater than or equal to 0&#39;)

    echo_word = word1*echo
    shout_words = echo_word+&#39;!!!&#39;

    return shout_word

shout_echo(&amp;quot;particle&amp;quot;, echo=-5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&amp;lt;ipython-input-13-85d647f11453&amp;gt; in &amp;lt;module&amp;gt;
     12     return shout_word
     13 
---&amp;gt; 14 shout_echo(&amp;quot;particle&amp;quot;, echo=-5)


&amp;lt;ipython-input-13-85d647f11453&amp;gt; in shout_echo(word1, echo)
      5     # Raise an error with raise
      6     if echo&amp;lt;0:
----&amp;gt; 7         raise ValueError(&#39;echo must be greater than or equal to 0&#39;)
      8 
      9     echo_word = word1*echo


ValueError: echo must be greater than or equal to 0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;common-errors&#34;&gt;Common errors:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AttributeError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Explicit indexing in DataFrames</title>
      <link>http://othrif.github.io/technical_note/python/pandas/explicitindex/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/explicitindex/</guid>
      <description>&lt;h3 id=&#34;setting--removing-indexes&#34;&gt;Setting &amp;amp; removing indexes&lt;/h3&gt;
&lt;p&gt;pandas allows you to designate columns as an index&lt;/p&gt;
&lt;h4 id=&#34;generate-some-data&#34;&gt;Generate some data&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import numpy as np
from pandas import Timestamp

mycols = [&#39;store&#39;, &#39;type&#39;, &#39;department&#39;, &#39;date&#39;, &#39;weekly_sales&#39;, &#39;is_holiday&#39;]
content = np.array([[1, &#39;A&#39;, 1, Timestamp(&#39;2010-02-05 00:00:00&#39;), 24924.5, False],[1, &#39;B&#39;, 1, Timestamp(&#39;2010-03-05 00:00:00&#39;), 21827.9, True],[1, &#39;A&#39;, 1, Timestamp(&#39;2010-04-02 00:00:00&#39;), 57258.43, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-05-07 00:00:00&#39;), 17413.94, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-06-04 00:00:00&#39;), 17558.09, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-07-02 00:00:00&#39;), 16333.14, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-08-06 00:00:00&#39;), 17508.41, False],[1, &#39;B&#39;, 1, Timestamp(&#39;2010-09-03 00:00:00&#39;), 16241.78, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2010-10-01 00:00:00&#39;), 20094.19, True],[1, &#39;B&#39;, 1, Timestamp(&#39;2010-11-05 00:00:00&#39;), 34238.88, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-12-03 00:00:00&#39;), 22517.56, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2011-01-07 00:00:00&#39;), 15984.24, False],[1, &#39;C&#39;, 2, Timestamp(&#39;2010-02-05 00:00:00&#39;), 50605.27, True],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-03-05 00:00:00&#39;), 48397.98, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-04-02 00:00:00&#39;), 47450.5, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-05-07 00:00:00&#39;), 47903.01, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-06-04 00:00:00&#39;), 48754.47, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-07-02 00:00:00&#39;), 47077.72, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-08-06 00:00:00&#39;), 50031.73, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-09-03 00:00:00&#39;), 49015.05, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-10-01 00:00:00&#39;), 45829.02, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-11-05 00:00:00&#39;), 46381.43, True],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-12-03 00:00:00&#39;), 44405.02, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2011-01-07 00:00:00&#39;), 43202.29, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-02-05 00:00:00&#39;), 13740.12, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-03-05 00:00:00&#39;), 12275.58, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-04-02 00:00:00&#39;), 11157.08, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-05-07 00:00:00&#39;), 9372.8, True],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-06-04 00:00:00&#39;), 8001.41, False],[1, &#39;C&#39;, 3, Timestamp(&#39;2010-07-02 00:00:00&#39;), 7857.88, True],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-08-06 00:00:00&#39;), 26719.02, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-09-03 00:00:00&#39;), 19081.8, False],[1, &#39;B&#39;, 3, Timestamp(&#39;2010-10-01 00:00:00&#39;), 9775.17, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-11-05 00:00:00&#39;), 9825.22, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-12-03 00:00:00&#39;), 10856.85, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2011-01-07 00:00:00&#39;), 15808.15, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-02-05 00:00:00&#39;), 39954.04, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-03-05 00:00:00&#39;), 38086.19, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-04-02 00:00:00&#39;), 37809.49, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-05-07 00:00:00&#39;), 37168.34, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-06-04 00:00:00&#39;), 40548.19, False],[1, &#39;B&#39;, 4, Timestamp(&#39;2010-07-02 00:00:00&#39;), 39773.71, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-08-06 00:00:00&#39;), 40973.88, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-09-03 00:00:00&#39;), 38321.88, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-10-01 00:00:00&#39;), 34912.45, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-11-05 00:00:00&#39;), 37980.55, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-12-03 00:00:00&#39;), 37110.55, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2011-01-07 00:00:00&#39;), 37947.8, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-02-05 00:00:00&#39;), 32229.38, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-03-05 00:00:00&#39;), 23082.14, False],[1, &#39;B&#39;, 5, Timestamp(&#39;2010-04-02 00:00:00&#39;), 29967.92, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-05-07 00:00:00&#39;), 19260.44, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-06-04 00:00:00&#39;), 22932.26, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-07-02 00:00:00&#39;), 18887.71, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-08-06 00:00:00&#39;), 16926.17, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-09-03 00:00:00&#39;), 15390.52, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-10-01 00:00:00&#39;), 23381.38, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-11-05 00:00:00&#39;), 23903.81, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-12-03 00:00:00&#39;), 36472.02, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2011-01-07 00:00:00&#39;), 22699.69, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-02-05 00:00:00&#39;), 5749.03, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-03-05 00:00:00&#39;), 4221.25, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-04-02 00:00:00&#39;), 4132.61, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-05-07 00:00:00&#39;), 7477.7, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-06-04 00:00:00&#39;), 5484.9, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-07-02 00:00:00&#39;), 4541.91, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-08-06 00:00:00&#39;), 4700.38, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-09-03 00:00:00&#39;), 3553.75, False],[1, &#39;B&#39;, 6, Timestamp(&#39;2010-10-01 00:00:00&#39;), 2876.19, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-11-05 00:00:00&#39;), 5036.99, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-12-03 00:00:00&#39;), 6356.96, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2011-01-07 00:00:00&#39;), 1376.15, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-02-05 00:00:00&#39;), 21084.08, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-03-05 00:00:00&#39;), 19659.7, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-04-02 00:00:00&#39;), 22427.62, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-05-07 00:00:00&#39;), 20457.62, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-06-04 00:00:00&#39;), 44563.68, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-07-02 00:00:00&#39;), 22589.0, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-08-06 00:00:00&#39;), 21842.57, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-09-03 00:00:00&#39;), 18005.65, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-10-01 00:00:00&#39;), 16481.79, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-11-05 00:00:00&#39;), 19136.58, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-12-03 00:00:00&#39;), 47406.83, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2011-01-07 00:00:00&#39;), 17516.16, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-02-05 00:00:00&#39;), 40129.01, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-03-05 00:00:00&#39;), 38776.09, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-04-02 00:00:00&#39;), 38151.58, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-05-07 00:00:00&#39;), 35393.78, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-06-04 00:00:00&#39;), 35181.47, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-07-02 00:00:00&#39;), 35580.01, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-08-06 00:00:00&#39;), 34833.35, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-09-03 00:00:00&#39;), 35562.68, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-10-01 00:00:00&#39;), 34658.25, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-11-05 00:00:00&#39;), 36182.58, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-12-03 00:00:00&#39;), 36222.74, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2011-01-07 00:00:00&#39;), 36599.46, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-02-05 00:00:00&#39;), 16930.99, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-03-05 00:00:00&#39;), 24064.7, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-04-02 00:00:00&#39;), 25435.02, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-05-07 00:00:00&#39;), 27588.34, False]])
df = pd.DataFrame(content, columns=mycols)
df[&#39;frac_sales&#39;] = df[&#39;weekly_sales&#39;]*np.random.rand()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;24924.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;2747.6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;21827.9&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;2406.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-04-02&lt;/td&gt;
      &lt;td&gt;57258.4&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;6311.98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-05-07&lt;/td&gt;
      &lt;td&gt;17413.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1919.66&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-06-04&lt;/td&gt;
      &lt;td&gt;17558.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1935.55&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;set-index&#34;&gt;Set index&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.set_index(&#39;date&#39;).head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-02-05&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;24924.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;2747.6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-03-05&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;21827.9&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;2406.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-04-02&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;57258.4&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;6311.98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-05-07&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;17413.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1919.66&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-06-04&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;17558.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1935.55&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;reset-index&#34;&gt;Reset index&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.reset_index().head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;index&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;24924.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;2747.6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;21827.9&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;2406.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-04-02&lt;/td&gt;
      &lt;td&gt;57258.4&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;6311.98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-05-07&lt;/td&gt;
      &lt;td&gt;17413.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1919.66&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-06-04&lt;/td&gt;
      &lt;td&gt;17558.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1935.55&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;reset-the-index-dropping-its-contents&#34;&gt;Reset the index, dropping its contents&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.reset_index(drop=True).head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;24924.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;2747.6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;21827.9&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;2406.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-04-02&lt;/td&gt;
      &lt;td&gt;57258.4&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;6311.98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-05-07&lt;/td&gt;
      &lt;td&gt;17413.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1919.66&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-06-04&lt;/td&gt;
      &lt;td&gt;17558.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1935.55&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;subsetting-with-loc&#34;&gt;Subsetting with &lt;code&gt;.loc[]&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Main feature for indexes is .loc[]: a subsetting method that accepts index values. When you pass it a single argument, it will take a subset of rows.&lt;/p&gt;
&lt;p&gt;one way to do it using &lt;code&gt;[]&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;types = [&#39;B&#39;,&#39;C&#39;]
df[df[&#39;type&#39;].isin(types)]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;21827.9&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;2406.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-05-07&lt;/td&gt;
      &lt;td&gt;17413.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1919.66&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-06-04&lt;/td&gt;
      &lt;td&gt;17558.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1935.55&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-07-02&lt;/td&gt;
      &lt;td&gt;16333.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1800.51&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-08-06&lt;/td&gt;
      &lt;td&gt;17508.4&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1930.07&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-09-03&lt;/td&gt;
      &lt;td&gt;16241.8&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1790.44&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-11-05&lt;/td&gt;
      &lt;td&gt;34238.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;3774.38&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-12-03&lt;/td&gt;
      &lt;td&gt;22517.6&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;2482.26&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;50605.3&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;5578.56&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;29&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2010-07-02&lt;/td&gt;
      &lt;td&gt;7857.88&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;866.227&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2010-10-01&lt;/td&gt;
      &lt;td&gt;9775.17&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1077.58&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;41&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;2010-07-02&lt;/td&gt;
      &lt;td&gt;39773.7&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;4384.53&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;50&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2010-04-02&lt;/td&gt;
      &lt;td&gt;29967.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;3303.57&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;68&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;2010-10-01&lt;/td&gt;
      &lt;td&gt;2876.19&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;317.062&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;alternative using &lt;code&gt;.loc[]&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_ind = df.set_index(&#39;type&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_ind.loc[types]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;21827.9&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;2406.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-09-03&lt;/td&gt;
      &lt;td&gt;16241.8&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1790.44&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-11-05&lt;/td&gt;
      &lt;td&gt;34238.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;3774.38&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2010-10-01&lt;/td&gt;
      &lt;td&gt;9775.17&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1077.58&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;2010-07-02&lt;/td&gt;
      &lt;td&gt;39773.7&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;4384.53&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2010-04-02&lt;/td&gt;
      &lt;td&gt;29967.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;3303.57&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;2010-10-01&lt;/td&gt;
      &lt;td&gt;2876.19&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;317.062&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-05-07&lt;/td&gt;
      &lt;td&gt;17413.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1919.66&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-06-04&lt;/td&gt;
      &lt;td&gt;17558.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1935.55&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-07-02&lt;/td&gt;
      &lt;td&gt;16333.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1800.51&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-08-06&lt;/td&gt;
      &lt;td&gt;17508.4&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1930.07&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-12-03&lt;/td&gt;
      &lt;td&gt;22517.6&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;2482.26&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;50605.3&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;5578.56&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2010-07-02&lt;/td&gt;
      &lt;td&gt;7857.88&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;866.227&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;multi-level-indexes&#34;&gt;Multi-level indexes&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_ind = df.set_index([&#39;type&#39;,&#39;department&#39;])
rows_to_keep = [(&#39;B&#39;,1),(&#39;C&#39;,3)]
df_ind.loc[rows_to_keep]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;3&#34; valign=&#34;top&#34;&gt;B&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;21827.9&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;2406.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-09-03&lt;/td&gt;
      &lt;td&gt;16241.8&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1790.44&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-11-05&lt;/td&gt;
      &lt;td&gt;34238.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;3774.38&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-07-02&lt;/td&gt;
      &lt;td&gt;7857.88&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;866.227&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h4 id=&#34;sorting-by-index&#34;&gt;Sorting by index&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_ind.sort_index()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;5&#34; valign=&#34;top&#34;&gt;A&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;24924.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;2747.6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-04-02&lt;/td&gt;
      &lt;td&gt;57258.4&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;6311.98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-10-01&lt;/td&gt;
      &lt;td&gt;20094.2&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;2215.12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2011-01-07&lt;/td&gt;
      &lt;td&gt;15984.2&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1762.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;48398&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;5335.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;5&#34; valign=&#34;top&#34;&gt;C&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-07-02&lt;/td&gt;
      &lt;td&gt;16333.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1800.51&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-08-06&lt;/td&gt;
      &lt;td&gt;17508.4&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1930.07&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-12-03&lt;/td&gt;
      &lt;td&gt;22517.6&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;2482.26&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;50605.3&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;5578.56&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-07-02&lt;/td&gt;
      &lt;td&gt;7857.88&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;866.227&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;100 rows × 5 columns&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Sort df_ind by index values at the department level&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_ind.sort_index(level=&#39;department&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;4&#34; valign=&#34;top&#34;&gt;A&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;24924.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;2747.6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-04-02&lt;/td&gt;
      &lt;td&gt;57258.4&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;6311.98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-10-01&lt;/td&gt;
      &lt;td&gt;20094.2&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;2215.12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2011-01-07&lt;/td&gt;
      &lt;td&gt;15984.2&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1762.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;21827.9&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;2406.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;5&#34; valign=&#34;top&#34;&gt;A&lt;/th&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2011-01-07&lt;/td&gt;
      &lt;td&gt;36599.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;4034.61&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;16931&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1866.42&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;24064.7&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;2652.81&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-04-02&lt;/td&gt;
      &lt;td&gt;25435&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;2803.87&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-05-07&lt;/td&gt;
      &lt;td&gt;27588.3&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;3041.25&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;100 rows × 5 columns&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Sort df_ind by department then type&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_ind.sort_index(level=[&#39;department&#39;,&#39;type&#39;], ascending=[True,False])
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;5&#34; valign=&#34;top&#34;&gt;C&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-05-07&lt;/td&gt;
      &lt;td&gt;17413.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1919.66&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-06-04&lt;/td&gt;
      &lt;td&gt;17558.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1935.55&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-07-02&lt;/td&gt;
      &lt;td&gt;16333.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1800.51&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-08-06&lt;/td&gt;
      &lt;td&gt;17508.4&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1930.07&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-12-03&lt;/td&gt;
      &lt;td&gt;22517.6&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;2482.26&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;5&#34; valign=&#34;top&#34;&gt;A&lt;/th&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2011-01-07&lt;/td&gt;
      &lt;td&gt;36599.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;4034.61&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;16931&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1866.42&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;24064.7&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;2652.81&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-04-02&lt;/td&gt;
      &lt;td&gt;25435&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;2803.87&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-05-07&lt;/td&gt;
      &lt;td&gt;27588.3&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;3041.25&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;100 rows × 5 columns&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>File, dir handling with os module</title>
      <link>http://othrif.github.io/technical_note/python/basics/os_manip/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/os_manip/</guid>
      <description>&lt;h3 id=&#34;preliminary&#34;&gt;Preliminary&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;current-location&#34;&gt;Current location&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;Current location is: {os.getcwd()!r}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Current location is: &#39;/Users/othmanerifki/projects/website/othrif.hugo/content/technical_note/python/basics&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-dir-if-it-does-not-exist&#34;&gt;Create dir if it does not exist&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;path=&#39;/tmp/test&#39;
if not os.path.exists(path):
    os.mkdir(path)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;check-by-going-to-the-newly-created-area-and-outputing-path&#34;&gt;Check by going to the newly created area and outputing path&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;os.chdir(path)
print(f&#39;New location is: {os.getcwd()!r}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;New location is: &#39;/private/tmp/test&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;open-file&#34;&gt;Open file&lt;/h3&gt;
&lt;p&gt;Options available: &lt;code&gt;os.O_RDONLY, os.O_WRONLY, os.O_RDWR, os.O_CREAT, os.O_APPEND&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fd = os.open(path+&#39;/mytext.txt&#39;, os.O_RDONLY | os.O_CREAT) # open file
print(f&#39;Intial file: {os.listdir(path)}&#39;)
os.rename(&#39;mytext.txt&#39;, &amp;quot;mytest_rename.txt&amp;quot;)
print(f&#39;Renamed file:{os.listdir(path)}&#39;)
os.close(fd) # close
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Intial file: [&#39;mytext.txt&#39;]
Renamed file:[&#39;mytest_rename.txt&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;remove-commands&#34;&gt;Remove commands&lt;/h3&gt;
&lt;h4 id=&#34;1-remove-directory-and-all-its-content&#34;&gt;1. Remove directory and all its content&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import shutil
if os.path.exists(path) and os.path.isdir(path):
    shutil.rmtree(path)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-alternative-approach&#34;&gt;2. Alternative approach&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pathlib import Path
dirpath = Path(path)
if dirpath.exists() and dirpath.is_dir():
    shutil.rmtree(path)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find Files</title>
      <link>http://othrif.github.io/technical_note/linux/search/find_files/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/linux/search/find_files/</guid>
      <description>&lt;h2 id=&#34;make-files-and-directories&#34;&gt;Make Files And Directories&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;touch sales.txt, marketing.txt, data_science.csv, product.html; mkdir sales marketing&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;view-files-and-directories&#34;&gt;View Files And Directories&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;ls -l&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;total 8
-rw-rw-r-- 1 othrif othrif    0 Jul 29 21:21 data_science.csv,
drwxrwxr-x 2 othrif othrif 4096 Jul 29 21:21 marketing
-rw-rw-r-- 1 othrif othrif    0 Jul 29 21:21 marketing.txt,
-rw-rw-r-- 1 othrif othrif    0 Jul 29 21:21 product.html
drwxrwxr-x 2 othrif othrif 4096 Jul 29 21:21 sales
-rw-rw-r-- 1 othrif othrif    0 Jul 29 21:21 sales.txt,
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;find-all-files-in-a-given-file-path&#34;&gt;Find All Files In A Given File Path&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;-type f&lt;/code&gt; indicates we want to find only files.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;find ~/example_directory -type f&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;/home/othrif/example_directory/data_science.csv,
/home/othrif/example_directory/product.html
/home/othrif/example_directory/sales.txt,
/home/othrif/example_directory/marketing.txt,
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find the word added to a sentence</title>
      <link>http://othrif.github.io/technical_note/codingproblems/wordadded/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/codingproblems/wordadded/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution():
    
    def __init__(self, sent1,sent2):
        self.sent1=sent1.split()
        self.sent2=sent2.split()
    
    def extra_word(self):
        found={}
        for s1 in self.sent1:
            if s1 in found:
                found[s1]+=1
            else:
                found[s1]=1
        for s2 in self.sent2:
            if s2 in found:
                found[s2]-=1
            else:
                return s2
        print(found)
            
        
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;test1=Solution(&#39;this is a dog&#39;,&#39;this is a a dog&#39;)
test1.extra_word()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;this&#39;: 0, &#39;is&#39;: 0, &#39;a&#39;: -1, &#39;dog&#39;: 0}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;test2=Solution(&#39;Can you solve algorithm questions&#39;,&#39;Can you solve hard algorithm questions&#39;)
test2.extra_word()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;hard&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Function arguments, by reference</title>
      <link>http://othrif.github.io/technical_note/cpp/basics/func_args/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/cpp/basics/func_args/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;pass-by-pointer&#34;&gt;Pass by pointer&lt;/h3&gt;
&lt;p&gt;Pass-by-pointer means to pass a pointer argument in the calling function to the corresponding formal parameter of the called function. The called function can modify the value of the variable to which the pointer argument points
Pass by pointer using a pointer, here you can pass a &lt;code&gt;NULL&lt;/code&gt; pointer&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;double f1(double* x, double* y)
{
    std::cout &amp;lt;&amp;lt; &amp;quot;val x: &amp;quot; &amp;lt;&amp;lt; *x &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;val y: &amp;quot; &amp;lt;&amp;lt; *y &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    return *x * *y;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void swapnum_byPointer(int *i, int *j) {
  int temp = *i;
  *i = *j;
  *j = temp;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{int a = 10;
int b = 20;
swapnum_byPointer(&amp;amp;a, &amp;amp;b);
cout &amp;lt;&amp;lt; &amp;quot;A is &amp;quot; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &amp;quot; and B is &amp;quot; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A is 20 and B is 10
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;pass-by-reference&#34;&gt;Pass by reference&lt;/h3&gt;
&lt;p&gt;Pass by reference by creating an alias to the arguments you pass. Use &lt;code&gt;const&lt;/code&gt; to not change these arguments&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;double f2(double const &amp;amp;x, double const &amp;amp;y)
{
    std::cout &amp;lt;&amp;lt; &amp;quot;val x: &amp;quot; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;val y: &amp;quot; &amp;lt;&amp;lt; y &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    return x * y;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pass by reference by creating an alias to the arguments you pass. Do not use &lt;code&gt;const&lt;/code&gt; if you plan to modify the arguments&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;double f3(double &amp;amp;x, double &amp;amp;y)
{
    std::cout &amp;lt;&amp;lt; &amp;quot;val x: &amp;quot; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;val y: &amp;quot; &amp;lt;&amp;lt; y &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    return x * y;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{double a, b;
a = 2;
b = 3; 
std::cout &amp;lt;&amp;lt; f1(&amp;amp;a, &amp;amp;b) &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
std::cout &amp;lt;&amp;lt; f2(a, b) &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
std::cout &amp;lt;&amp;lt; f3(a, b) &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;val x: 2
val y: 3
6
val x: 2
val y: 3
6
val x: 2
val y: 3
6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void swapnum(int &amp;amp;i, int &amp;amp;j) {
  int temp = i;
  i = j;
  j = temp;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{int a = 10;
int b = 20;
swapnum(a, b);
cout &amp;lt;&amp;lt; &amp;quot;A is &amp;quot; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &amp;quot; and B is &amp;quot; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A is 20 and B is 10
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void modify_const(const int&amp;amp; x) {
  int&amp;amp; y = const_cast&amp;lt;int&amp;amp;&amp;gt;(x);
  ++y;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{int a = 5;
  modify_const(a);
  cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl;}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;pass-by-value&#34;&gt;Pass by value&lt;/h3&gt;
&lt;p&gt;The value of an argument is copied to a non-pointer or non-reference parameter in the called function definition. The parameter in the called function is initialized with the value of the passed argument. As long as the parameter has not been declared as constant, the value of the parameter can be changed, but the changes are only performed within the scope of the called function only; they have no effect on the value of the argument in the calling function.&lt;/p&gt;
&lt;p&gt;Pass-by-reference is more efficient than pass-by-value, because it does not copy the arguments.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;double f4(double x, double y)
{
    std::cout &amp;lt;&amp;lt; &amp;quot;val x: &amp;quot; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;val y: &amp;quot; &amp;lt;&amp;lt; y &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    return x * y;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;result&#34;&gt;Result&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{double a, b;
a = 2;
b = 3; 
std::cout &amp;lt;&amp;lt; f4(a, b) &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;val x: 2
val y: 3
6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Function as an object, nested functions</title>
      <link>http://othrif.github.io/technical_note/python/basics/function_object/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/function_object/</guid>
      <description>&lt;h3 id=&#34;nested-functions&#34;&gt;Nested functions&lt;/h3&gt;
&lt;p&gt;Notice how we assign the return value from &lt;code&gt;create_math_function()&lt;/code&gt; to the &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;subtract&lt;/code&gt; variables in the script. Since &lt;code&gt;create_math_function()&lt;/code&gt; returns a function, we can then call those variables as functions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def create_math_function(func_name):
  if func_name == &#39;add&#39;:
    def add(a, b):
      return a + b
    return add
  elif func_name == &#39;subtract&#39;:
    # Define the subtract() function
    def subtract(a,b):
        return a - b
    return subtract
  else:
    print(&amp;quot;I don&#39;t know that one&amp;quot;)
    
add = create_math_function(&#39;add&#39;)
print(&#39;5 + 2 = {}&#39;.format(add(5, 2)))

subtract = create_math_function(&#39;subtract&#39;)
print(&#39;5 - 2 = {}&#39;.format(subtract(5, 2)))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5 + 2 = 7
5 - 2 = 3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>http://othrif.github.io/technical_note/python/basics/functions/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/functions/</guid>
      <description>&lt;h3 id=&#34;exit-from-function-with-conditions&#34;&gt;Exit from function with conditions&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;outer_condition=True
condition_a=True
condition_b=False


def some_function():
    if condition_a:
        # do something and return early
        print(f&#39;condition a satisfied!&#39;)
        return
    if condition_b:
        # do something else and return early
        print(f&#39;condition b satisfied!&#39;)
        return
    return

if outer_condition:
    some_function()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;condition a satisfied!
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;passing-a-list-as-an-argument&#34;&gt;Passing a list as an argument&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def my_function(food):
  for x in food:
    print(x)

fruits = [&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;]

my_function(fruits)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;apple
banana
cherry
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Get ASCII of a character</title>
      <link>http://othrif.github.io/technical_note/python/basics/ascii/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/ascii/</guid>
      <description>&lt;h3 id=&#34;get-the-int-value-of-the-char&#34;&gt;Get the int value of the char&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ord(&#39;a&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;97
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;get-the-char-value-of-the-ascii-int&#34;&gt;Get the char value of the ascii int&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;chr(97)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;a&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;manipulations&#34;&gt;Manipulations&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;chr(ord(&#39;a&#39;) + 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;d&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Handling missing data and outliers</title>
      <link>http://othrif.github.io/technical_note/python/pandas/null/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/null/</guid>
      <description>&lt;h3 id=&#34;identify-rows-with-null-in-any-column&#34;&gt;Identify rows with null in any column&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
weather_org = pd.read_csv(&#39;pittsburgh2013.csv&#39;)
weather_org = weather_org.loc[:,[&#39;Date&#39;,&#39;Mean TemperatureF&#39;, &#39;Max Gust SpeedMPH&#39;, &#39;Events&#39;]]
weather_org.columns = [&#39;date&#39;,&#39;temp&#39;,&#39;speed&#39;,&#39;events&#39;]
# Identify and print the the rows with null values
nulls = weather_org[weather_org.isnull().any(axis=1)]
print(nulls.head())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;       date  temp  speed events
0  2013-1-1    28    NaN   Snow
1  2013-1-2    21    NaN    NaN
2  2013-1-3    24   26.0    NaN
3  2013-1-4    28   32.0    NaN
4  2013-1-5    30   23.0    NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;emputation&#34;&gt;Emputation&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;weather = weather_org.copy()
# Impute constant value 0 and print the head
weather.fillna(0, inplace=True)
print(weather.head())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;       Date  Mean TemperatureF  Max Gust SpeedMPH Events
0  2013-1-1                 28                NaN   Snow
1  2013-1-2                 21                NaN    NaN
2  2013-1-3                 24               26.0    NaN
3  2013-1-4                 28               32.0    NaN
4  2013-1-5                 30               23.0    NaN
       Date  Mean TemperatureF  Max Gust SpeedMPH Events
0  2013-1-1                 28                0.0   Snow
1  2013-1-2                 21                0.0      0
2  2013-1-3                 24               26.0      0
3  2013-1-4                 28               32.0      0
4  2013-1-5                 30               23.0      0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;weather = weather_org.copy()
# Impute median price and print the head
weather.fillna(weather[&#39;speed&#39;].median(), inplace=True)
print(weather.head())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;       date  temp  speed events
0  2013-1-1    28   24.0   Snow
1  2013-1-2    21   24.0     24
2  2013-1-3    24   26.0     24
3  2013-1-4    28   32.0     24
4  2013-1-5    30   23.0     24
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;drop-null-values&#34;&gt;Drop null values&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;weather = weather_org.copy()
# Drop each row with a null value and print the head
weather.dropna(inplace=True)
print(weather.head())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;         date  temp  speed    events
5    2013-1-6    34   22.0      Snow
8    2013-1-9    36   25.0      Rain
11  2013-1-12    55   18.0  Fog-Rain
12  2013-1-13    62   26.0      Rain
13  2013-1-14    44   32.0      Rain
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;drop-outliers&#34;&gt;Drop outliers&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
# Visualize the relationship with price
weather.boxplot(&#39;speed&#39;, rot=0)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;null_9_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Calculate the mean and std
mean, std = weather[&#39;speed&#39;].mean(), weather[&#39;speed&#39;].std()

# Compute and print the upper and lower threshold
cut_off = 3 * std
lower, upper = mean - cut_off, mean + cut_off
print(lower, &#39;to&#39;, upper)

# Identify and print rows with outliers
outliers = weather[(weather[&#39;speed&#39;] &amp;gt; upper) | 
                   (weather[&#39;speed&#39;] &amp;lt; lower)]
print(outliers)

# Drop the rows from the dataset
weather = weather[(weather[&#39;speed&#39;] &amp;lt;= upper) | 
                  (weather[&#39;speed&#39;] &amp;gt;= lower)]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1.8220504190012328 to 51.599333228797505
          date  temp  speed                 events
105  2013-4-16    66   53.0  Fog-Rain-Thunderstorm
190  2013-7-10    76   55.0  Fog-Rain-Thunderstorm
304  2013-11-1    60   61.0                   Rain
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to determine a sample size</title>
      <link>http://othrif.github.io/technical_note/math/stats/power_sample/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/math/stats/power_sample/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s finish up our dive into statistical tests by performing power analysis to generate needed sample size. Power analysis involves four moving parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sample size&lt;/li&gt;
&lt;li&gt;Effect size&lt;/li&gt;
&lt;li&gt;Minimum effect&lt;/li&gt;
&lt;li&gt;significance level = P(Type I error) = probability of finding an effect that is not there&lt;/li&gt;
&lt;li&gt;power = 1 - P(Type II error) = probability of finding an effect that is there&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;exercise&#34;&gt;Exercise&lt;/h3&gt;
&lt;p&gt;In this exercise, you&amp;rsquo;re working with a website and want to test for a difference in conversion rate. Before you begin the experiment, you must decide how many samples you&amp;rsquo;ll need per variant using 5% significance and 95% power.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Standardize the effect size
from statsmodels.stats.proportion import proportion_effectsize
std_effect = proportion_effectsize(.20, .25)

# Assign and print the needed sample size
from statsmodels.stats.power import  zt_ind_solve_power
sample_size = zt_ind_solve_power(effect_size=std_effect, nobs1=None, alpha=0.05, power=0.95)
print(sample_size)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1807.7621477153323
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Assign and print the needed sample size
from statsmodels.stats.power import  zt_ind_solve_power
sample_size = zt_ind_solve_power(effect_size=std_effect, nobs1=None, alpha=.05, power=0.8)
print(sample_size)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1091.8961587171991
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how lowering the power allowed you fewer observations in your sample, yet increased your chance of a Type II error.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sample_sizes = np.array(range(5, 100))
effect_sizes = np.array([0.2, 0.5, 0.8])

# Create results object for t-test analysis
from statsmodels.stats.power import TTestIndPower
results = TTestIndPower()

#Plot the power analysis
import matplotlib.pyplot as plt
results.plot_power(dep_var=&#39;nobs&#39;, nobs=sample_sizes, effect_size=effect_sizes)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;power_sample_6_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Notice that not only does an increase in power result in a larger sample size, but this increase grows exponentially as the minimum effect size is increased.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Immutable or mutable?</title>
      <link>http://othrif.github.io/technical_note/python/basics/immutable_mutable/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/immutable_mutable/</guid>
      <description>&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Immutable&lt;/th&gt;
&lt;th&gt;Mutable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;list&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;set&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;objects&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;functions&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;almost everything else&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Header&lt;/th&gt;
&lt;th&gt;Second Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;best-practice-for-default-arguments&#34;&gt;Best practice for default arguments&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
# Use an immutable variable for the default argument 
def better_add_column(values, df=None):
  &amp;quot;&amp;quot;&amp;quot;Add a column of `values` to a DataFrame `df`.&amp;quot;&amp;quot;&amp;quot;
  # Update the function to create a default DataFrame
  if df is None:
    df = pandas.DataFrame()
  df[&#39;col_{}&#39;.format(len(df.columns))] = values
  return df
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We cannot define the function as: &lt;code&gt;def better_add_column(values, df=pandas.DataFrame()):&lt;/code&gt; . It does not work since the code used a mutable variable as a default argument value which gives unexpected behavior&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Import flat file</title>
      <link>http://othrif.github.io/technical_note/python/pandas/importflatfilecsv/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/importflatfilecsv/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import matplotlib.pyplot as plt

# Assign filename: file
file = &#39;titanic_sub.csv&#39;

# Import file: data
data = pd.read_csv(file, sep=&#39;,&#39;, comment=&#39;#&#39;, na_values=&#39;Nothing&#39;)

# Print the head of the DataFrame
print(data.head())

# Plot &#39;Age&#39; variable in a histogram
pd.DataFrame.hist(data[[&#39;Age&#39;]])
plt.xlabel(&#39;Age (years)&#39;)
plt.ylabel(&#39;count&#39;)
plt.show()

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch  \
0            1         0       3    male  22.0      1      0   
1            2         1       1  female  38.0      1      0   
2            3         1       3  female  26.0      0      0   
3            4         1       1  female  35.0      1      0   
4            5         0       3    male  35.0      0      0   

             Ticket     Fare Cabin Embarked  
0         A/5 21171   7.2500   NaN        S  
1          PC 17599  71.2833   C85        C  
2  STON/O2. 3101282   7.9250   NaN        S  
3            113803  53.1000  C123        S  
4            373450   8.0500   NaN        S  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;importFlatfileCSV_1_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Importing files using pandas</title>
      <link>http://othrif.github.io/technical_note/python/pandas/importfiles/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/importfiles/</guid>
      <description>&lt;h3 id=&#34;from-csv&#34;&gt;From csv&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd 
file = &#39;titanic.csv&#39;
# Read the file into a DataFrame: df
df = pd.read_csv(file)
# View the head of the DataFrame
print(df.head())

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

FileNotFoundError                         Traceback (most recent call last)

&amp;lt;ipython-input-1-25973cb3da0e&amp;gt; in &amp;lt;module&amp;gt;
      2 file = &#39;titanic.csv&#39;
      3 # Read the file into a DataFrame: df
----&amp;gt; 4 df = pd.read_csv(file)
      5 # View the head of the DataFrame
      6 print(df.head())


~/Library/Python/3.7/lib/python/site-packages/pandas/io/parsers.py in parser_f(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)
    674         )
    675 
--&amp;gt; 676         return _read(filepath_or_buffer, kwds)
    677 
    678     parser_f.__name__ = name


~/Library/Python/3.7/lib/python/site-packages/pandas/io/parsers.py in _read(filepath_or_buffer, kwds)
    446 
    447     # Create the parser.
--&amp;gt; 448     parser = TextFileReader(fp_or_buf, **kwds)
    449 
    450     if chunksize or iterator:


~/Library/Python/3.7/lib/python/site-packages/pandas/io/parsers.py in __init__(self, f, engine, **kwds)
    878             self.options[&amp;quot;has_index_names&amp;quot;] = kwds[&amp;quot;has_index_names&amp;quot;]
    879 
--&amp;gt; 880         self._make_engine(self.engine)
    881 
    882     def close(self):


~/Library/Python/3.7/lib/python/site-packages/pandas/io/parsers.py in _make_engine(self, engine)
   1112     def _make_engine(self, engine=&amp;quot;c&amp;quot;):
   1113         if engine == &amp;quot;c&amp;quot;:
-&amp;gt; 1114             self._engine = CParserWrapper(self.f, **self.options)
   1115         else:
   1116             if engine == &amp;quot;python&amp;quot;:


~/Library/Python/3.7/lib/python/site-packages/pandas/io/parsers.py in __init__(self, src, **kwds)
   1889         kwds[&amp;quot;usecols&amp;quot;] = self.usecols
   1890 
-&amp;gt; 1891         self._reader = parsers.TextReader(src, **kwds)
   1892         self.unnamed_cols = self._reader.unnamed_cols
   1893 


pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.__cinit__()


pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._setup_parser_source()


FileNotFoundError: [Errno 2] File titanic.csv does not exist: &#39;titanic.csv&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Importing HDF5 files and LIGO data</title>
      <link>http://othrif.github.io/technical_note/python/basics/loadhdf5/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/loadhdf5/</guid>
      <description>&lt;h3 id=&#34;hdf5-files&#34;&gt;HDF5 files&lt;/h3&gt;
&lt;p&gt;The most efficient way to store large files up to the exabyte scale.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import h5py
filenmae = &#39;L-L1_LOSC_4_V1-1126259446-32.hdf5&#39;
data = h5py.File(filenmae, &#39;r&#39;)
print(type(data))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;h5py._hl.files.File&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for key in data.keys():
    print(key)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;meta
quality
strain
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for key in data[&#39;meta&#39;].keys():
    print(key)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Description
DescriptionURL
Detector
Duration
GPSstart
Observatory
Type
UTCstart
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(data[&#39;meta&#39;][&#39;Description&#39;][()],data[&#39;meta&#39;][&#39;Detector&#39;][()])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;b&#39;Strain data time series from LIGO&#39; b&#39;L1&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
# Get the HDF5 group: group
group = data[&#39;strain&#39;]

# Check out keys of group
for key in group.keys():
    print(key)

# Set variable equal to time series data: strain
strain = data[&#39;strain&#39;][&#39;Strain&#39;][()]

# Set number of time points to sample: num_samples
num_samples = 10000

# Set time vector
time = np.arange(0, 1, 1/num_samples)

# Plot data
plt.plot(time, strain[:num_samples])
plt.xlabel(&#39;GPS Time (s)&#39;)
plt.ylabel(&#39;strain&#39;)
plt.show()

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Strain
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;loadhdf5_6_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Importing MATLAB data</title>
      <link>http://othrif.github.io/technical_note/python/basics/loadmatlab/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/loadmatlab/</guid>
      <description>&lt;h3 id=&#34;matlab&#34;&gt;MATLAB&lt;/h3&gt;
&lt;p&gt;for &amp;ldquo;Matrix Laboratory&amp;rdquo;  &lt;br&gt;
&amp;lsquo;.mat&amp;rsquo; files&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import package
import scipy.io

# Load MATLAB file: mat
mat = scipy.io.loadmat(&#39;ja_data2.mat&#39;)

# Print the datatype type of mat
print(type(mat))

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;dict&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
import numpy as np
# Print the keys of the MATLAB dictionary
print(mat.keys())

# Print the type of the value corresponding to the key &#39;CYratioCyt&#39;
print(mat[&#39;CYratioCyt&#39;])

# Print the shape of the value corresponding to the key &#39;CYratioCyt&#39;
print(np.shape(mat[&#39;CYratioCyt&#39;]))

# Subset the array and plot it
data = mat[&#39;CYratioCyt&#39;][25, 5:]
fig = plt.figure()
plt.plot(data)
plt.xlabel(&#39;time (min.)&#39;)
plt.ylabel(&#39;normalized fluorescence (measure of expression)&#39;)
plt.show()

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dict_keys([&#39;__header__&#39;, &#39;__version__&#39;, &#39;__globals__&#39;, &#39;rfpCyt&#39;, &#39;rfpNuc&#39;, &#39;cfpNuc&#39;, &#39;cfpCyt&#39;, &#39;yfpNuc&#39;, &#39;yfpCyt&#39;, &#39;CYratioCyt&#39;])
[[0.         1.53071547 1.54297013 ... 1.34990123 1.35329984 1.34922173]
 [0.         1.28605578 1.29385656 ... 1.31307311 1.30039694 1.30563938]
 [0.         1.32731222 1.32884617 ... 1.24887565 1.24506205 1.25825831]
 ...
 [0.         0.         0.         ... 0.         0.         0.        ]
 [0.         1.44552606 1.42862357 ... 0.         0.         0.        ]
 [0.         1.45794466 0.         ... 1.1229479  1.12224652 1.1486481 ]]
(200, 137)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;loadmatlab_3_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Importing SAS and Stata files</title>
      <link>http://othrif.github.io/technical_note/python/basics/loadsas/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/loadsas/</guid>
      <description>&lt;h3 id=&#34;sas-files&#34;&gt;SAS files&lt;/h3&gt;
&lt;p&gt;SAS: Statistical Analysis System&lt;br&gt;
Used for business analytics and biostatistics&lt;br&gt;
File extension: &lt;code&gt;.sasb7dat&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import matplotlib.pyplot as plt
from sas7bdat import SAS7BDAT


# Save file to a DataFrame: df_sas
with SAS7BDAT(&#39;sales.sas7bdat&#39;) as file:
    df_sas = file.to_data_frame()

# Print head of DataFrame
print(df_sas.head())

# Plot histogram of DataFrame features (pandas and pyplot already imported)
pd.DataFrame.hist(df_sas[[&#39;S&#39;,&#39;P&#39;]])
plt.ylabel(&#39;count&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     YEAR     P           S
0  1950.0  12.9  181.899994
1  1951.0  11.9  245.000000
2  1952.0  10.7  250.199997
3  1953.0  11.3  265.899994
4  1954.0  11.2  248.500000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;loadsas_2_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;stata-files&#34;&gt;Stata files&lt;/h3&gt;
&lt;p&gt;Stata: Statistical Analysis System&lt;br&gt;
Used for
File extension: &lt;code&gt;.dta&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import pandas
import pandas as pd

# Load Stata file into a pandas DataFrame: df
df = pd.read_stata(&#39;disarea.dta&#39;)

# Print the head of the DataFrame df
print(df.head())

# Plot histogram of one column of the DataFrame
pd.DataFrame.hist(df[[&#39;disa10&#39;]])
plt.xlabel(&#39;Extent of disease&#39;)
plt.ylabel(&#39;Number of countries&#39;)
plt.show()

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  wbcode               country  disa1  disa2  disa3  disa4  disa5  disa6  \
0    AFG           Afghanistan   0.00   0.00   0.76   0.73    0.0   0.00   
1    AGO                Angola   0.32   0.02   0.56   0.00    0.0   0.00   
2    ALB               Albania   0.00   0.00   0.02   0.00    0.0   0.00   
3    ARE  United Arab Emirates   0.00   0.00   0.00   0.00    0.0   0.00   
4    ARG             Argentina   0.00   0.24   0.24   0.00    0.0   0.23   

   disa7  disa8  ...  disa16  disa17  disa18  disa19  disa20  disa21  disa22  \
0   0.00    0.0  ...     0.0     0.0     0.0    0.00    0.00     0.0    0.00   
1   0.56    0.0  ...     0.0     0.4     0.0    0.61    0.00     0.0    0.99   
2   0.00    0.0  ...     0.0     0.0     0.0    0.00    0.00     0.0    0.00   
3   0.00    0.0  ...     0.0     0.0     0.0    0.00    0.00     0.0    0.00   
4   0.00    0.0  ...     0.0     0.0     0.0    0.00    0.05     0.0    0.00   

   disa23  disa24  disa25  
0    0.02    0.00    0.00  
1    0.98    0.61    0.00  
2    0.00    0.00    0.16  
3    0.00    0.00    0.00  
4    0.01    0.00    0.11  

[5 rows x 27 columns]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;loadsas_4_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Indexing and selecting DataFrames</title>
      <link>http://othrif.github.io/technical_note/python/pandas/indexselectingdata/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/indexselectingdata/</guid>
      <description>&lt;h3 id=&#34;dataframes&#34;&gt;DataFrames&lt;/h3&gt;
&lt;p&gt;store tabular data where you can label the rows and the columns.&lt;/p&gt;
&lt;h4 id=&#34;generate-some-data&#34;&gt;Generate some data&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

# Build cars DataFrame
names = [&#39;United States&#39;, &#39;Australia&#39;, &#39;Japan&#39;, &#39;India&#39;, &#39;Russia&#39;, &#39;Morocco&#39;, &#39;Egypt&#39;]
dr =  [True, False, False, False, True, True, True]
cpc = [809, 731, 588, 18, 200, 70, 45]
row_labels = [&#39;US&#39;, &#39;AUS&#39;, &#39;JPN&#39;, &#39;IN&#39;, &#39;RU&#39;, &#39;MOR&#39;, &#39;EG&#39;]
cars_dict = {&#39;country&#39;:names, &#39;drives_right&#39;:dr, &#39;cars_per_cap&#39;:cpc }
cars = pd.DataFrame(cars_dict)
cars.index = row_labels
print(cars)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;           country  drives_right  cars_per_cap
US   United States          True           809
AUS      Australia         False           731
JPN          Japan         False           588
IN           India         False            18
RU          Russia          True           200
MOR        Morocco          True            70
EG           Egypt          True            45
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;square-brackets&#34;&gt;Square brackets&lt;/h3&gt;
&lt;p&gt;The single bracket version gives a Pandas Series, the double bracket version gives a Pandas DataFrame.&lt;/p&gt;
&lt;h4 id=&#34;columns&#34;&gt;Columns&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Print out country column as Pandas Series
cars[&#39;country&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;US     United States
AUS        Australia
JPN            Japan
IN             India
RU            Russia
MOR          Morocco
EG             Egypt
Name: country, dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Print out country column as Pandas DataFrame
cars[[&#39;country&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;country&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;US&lt;/th&gt;
      &lt;td&gt;United States&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;AUS&lt;/th&gt;
      &lt;td&gt;Australia&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;JPN&lt;/th&gt;
      &lt;td&gt;Japan&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;IN&lt;/th&gt;
      &lt;td&gt;India&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;RU&lt;/th&gt;
      &lt;td&gt;Russia&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MOR&lt;/th&gt;
      &lt;td&gt;Morocco&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;EG&lt;/th&gt;
      &lt;td&gt;Egypt&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Print out DataFrame with country and drives_right columns
cars[[&#39;country&#39;,&#39;drives_right&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;country&lt;/th&gt;
      &lt;th&gt;drives_right&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;US&lt;/th&gt;
      &lt;td&gt;United States&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;AUS&lt;/th&gt;
      &lt;td&gt;Australia&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;JPN&lt;/th&gt;
      &lt;td&gt;Japan&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;IN&lt;/th&gt;
      &lt;td&gt;India&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;RU&lt;/th&gt;
      &lt;td&gt;Russia&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MOR&lt;/th&gt;
      &lt;td&gt;Morocco&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;EG&lt;/th&gt;
      &lt;td&gt;Egypt&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h4 id=&#34;rows&#34;&gt;Rows&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Print out first 3 observations
cars[0:3]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;country&lt;/th&gt;
      &lt;th&gt;drives_right&lt;/th&gt;
      &lt;th&gt;cars_per_cap&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;US&lt;/th&gt;
      &lt;td&gt;United States&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;809&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;AUS&lt;/th&gt;
      &lt;td&gt;Australia&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;731&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;JPN&lt;/th&gt;
      &lt;td&gt;Japan&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;588&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Print out fourth, fifth and sixth observation
print(cars[3:6])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     country  drives_right  cars_per_cap
IN     India         False            18
RU    Russia          True           200
MOR  Morocco          True            70
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;selecting-rows-and-columns-with-loc-and-iloc&#34;&gt;Selecting rows and columns with &lt;code&gt;loc&lt;/code&gt; and &lt;code&gt;iloc&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;loc&lt;/code&gt; is label-based, which means that you have to specify rows and columns based on their row and column labels&lt;br&gt;
&lt;code&gt;iloc&lt;/code&gt; is integer index based, so you have to specify rows and columns by their integer index like you did in the previous exercise&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Selecting rows based on index column
# One bracket -&amp;gt; Series
cars.loc[&#39;RU&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;country         Russia
drives_right      True
cars_per_cap       200
Name: RU, dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars.iloc[4]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;country         Russia
drives_right      True
cars_per_cap       200
Name: RU, dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Two bracket -&amp;gt; DataFrame
cars.loc[[&#39;RU&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;country&lt;/th&gt;
      &lt;th&gt;drives_right&lt;/th&gt;
      &lt;th&gt;cars_per_cap&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;RU&lt;/th&gt;
      &lt;td&gt;Russia&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;200&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars.loc[[&#39;RU&#39;, &#39;AUS&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;country&lt;/th&gt;
      &lt;th&gt;drives_right&lt;/th&gt;
      &lt;th&gt;cars_per_cap&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;RU&lt;/th&gt;
      &lt;td&gt;Russia&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;200&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;AUS&lt;/th&gt;
      &lt;td&gt;Australia&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;731&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars.loc[:,[&#39;drives_right&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;drives_right&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;US&lt;/th&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;AUS&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;JPN&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;IN&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;RU&lt;/th&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MOR&lt;/th&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;EG&lt;/th&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars.loc[[&#39;US&#39;, &#39;MOR&#39;],[&#39;drives_right&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;drives_right&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;US&lt;/th&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MOR&lt;/th&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars.iloc[0:6,[2]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;cars_per_cap&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;US&lt;/th&gt;
      &lt;td&gt;809&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;AUS&lt;/th&gt;
      &lt;td&gt;731&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;JPN&lt;/th&gt;
      &lt;td&gt;588&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;IN&lt;/th&gt;
      &lt;td&gt;18&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;RU&lt;/th&gt;
      &lt;td&gt;200&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MOR&lt;/th&gt;
      &lt;td&gt;70&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars.loc[&#39;US&#39;:&#39;MOR&#39;,[&#39;cars_per_cap&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;cars_per_cap&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;US&lt;/th&gt;
      &lt;td&gt;809&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;AUS&lt;/th&gt;
      &lt;td&gt;731&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;JPN&lt;/th&gt;
      &lt;td&gt;588&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;IN&lt;/th&gt;
      &lt;td&gt;18&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;RU&lt;/th&gt;
      &lt;td&gt;200&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MOR&lt;/th&gt;
      &lt;td&gt;70&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Iterables with enumerate() and zip()</title>
      <link>http://othrif.github.io/technical_note/python/basics/bigo/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/bigo/</guid>
      <description>&lt;h3 id=&#34;big-o-notation&#34;&gt;Big O notation&lt;/h3&gt;
&lt;p&gt;Say we have a certain algorithm. We run it on a modest number of fifty elements.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O(1): One operation.&lt;/li&gt;
&lt;li&gt;O(log n): Four operations.&lt;/li&gt;
&lt;li&gt;O(n): Fifty operations.&lt;/li&gt;
&lt;li&gt;O(n log n): One hundred ninety-five operations.&lt;/li&gt;
&lt;li&gt;O(n²): Two thousand, five hundred operations.&lt;/li&gt;
&lt;li&gt;O(2^n): 1e15&lt;/li&gt;
&lt;li&gt;O(n!): 3e64&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math

def computeBigO(functions, elements):
    operations = [[] for fn in functions]
    for e in elements:
        for n,fn in enumerate(functions):
            operations[n].append(fn(e))
    return operations

def O_log_n(n): return math.log(n)
def O_n(n): return n
def O_n_log_n(n): return n * math.log(n)
def O_n_2(n): return n * n
def O_2_n(n): return 2 ** n
def O_n_factorial(n): return math.factorial(n)

functions = [O_log_n, O_n, O_n_log_n, O_n_2, O_2_n, O_n_factorial]
scores = computeBigO(functions, range(1, 51))
for n,fn in enumerate(functions):
    print(&#39;%s:%s&#39; % (fn, int(scores[n][-1])))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;function O_log_n at 0x1065f8840&amp;gt;:3
&amp;lt;function O_n at 0x110630598&amp;gt;:50
&amp;lt;function O_n_log_n at 0x110630b70&amp;gt;:195
&amp;lt;function O_n_2 at 0x110630f28&amp;gt;:2500
&amp;lt;function O_2_n at 0x110630ea0&amp;gt;:1125899906842624
&amp;lt;function O_n_factorial at 0x110630e18&amp;gt;:30414093201713378043612608166064768844377641568960512000000000000
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt

col = [&#39;yellow&#39;, &#39;orange&#39;, &#39;red&#39;, &#39;blue&#39;, &#39;violet&#39;, &#39;green&#39;]
for n,s in enumerate(scores):
    plt.plot(s,c=col[n])
    plt.ylim(0,500)
    plt.legend([&#39;O($\log(n)$)&#39;,&#39;O($n$)&#39;,&#39;O($n\log(n)$)&#39;,&#39;O($n^2$)&#39;,&#39;O($2^n$)&#39;,&#39;O($n!$)&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;bigO_3_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iterables with enumerate() and zip()</title>
      <link>http://othrif.github.io/technical_note/python/basics/iterators_enum_zip/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/iterators_enum_zip/</guid>
      <description>&lt;h3 id=&#34;using-enumerate&#34;&gt;Using &lt;code&gt;enumerate()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;enumerate()&lt;/code&gt; returns an enumerate object that produces a sequence of tuples, and each of the tuples is an index-value pair.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mutants = [&#39;charles xavier&#39;, 
            &#39;bobby drake&#39;, 
            &#39;kurt wagner&#39;, 
            &#39;max eisenhardt&#39;, 
            &#39;kitty pryde&#39;]

# Create a list of tuples
mutant_list = list(enumerate(mutants))
print(mutant_list)

# Unpack and print the tuple pairs
for index1,value1 in enumerate(mutants):
    print(index1, value1)

# Change the start index
for index2,value2 in enumerate(mutants, start=1):
    print(index2, value2)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[(0, &#39;charles xavier&#39;), (1, &#39;bobby drake&#39;), (2, &#39;kurt wagner&#39;), (3, &#39;max eisenhardt&#39;), (4, &#39;kitty pryde&#39;)]
0 charles xavier
1 bobby drake
2 kurt wagner
3 max eisenhardt
4 kitty pryde
1 charles xavier
2 bobby drake
3 kurt wagner
4 max eisenhardt
5 kitty pryde
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-zip&#34;&gt;Using &lt;code&gt;zip()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;takes any number of iterables and returns a zip object that is an iterator of tuples. If you wanted to print the values of a zip object, you can convert it into a list and then print it. Printing just a zip object will not return the values unless you unpack it first.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mutants=[&#39;charles xavier&#39;, &#39;bobby drake&#39;, &#39;kurt wagner&#39;, &#39;max eisenhardt&#39;, &#39;kitty pryde&#39;]
aliases=[&#39;prof x&#39;, &#39;iceman&#39;, &#39;nightcrawler&#39;, &#39;magneto&#39;, &#39;shadowcat&#39;]
powers=[&#39;telepathy&#39;, &#39;thermokinesis&#39;, &#39;teleportation&#39;, &#39;magnetokinesis&#39;, &#39;intangibility&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create a list of tuples
mutant_data = list(zip(mutants,aliases,powers))
print(mutant_data)

# Create a zip object using the three lists
mutant_zip = zip(mutants,aliases,powers)
print(mutant_zip)

# Unpack the zip object and print the tuple values
for value1,value2,value3 in mutant_zip:
    print(value1, value2, value3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[(&#39;charles xavier&#39;, &#39;prof x&#39;, &#39;telepathy&#39;), (&#39;bobby drake&#39;, &#39;iceman&#39;, &#39;thermokinesis&#39;), (&#39;kurt wagner&#39;, &#39;nightcrawler&#39;, &#39;teleportation&#39;), (&#39;max eisenhardt&#39;, &#39;magneto&#39;, &#39;magnetokinesis&#39;), (&#39;kitty pryde&#39;, &#39;shadowcat&#39;, &#39;intangibility&#39;)]
&amp;lt;zip object at 0x10ac88b88&amp;gt;
charles xavier prof x telepathy
bobby drake iceman thermokinesis
kurt wagner nightcrawler teleportation
max eisenhardt magneto magnetokinesis
kitty pryde shadowcat intangibility
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using--and-zip-to-unzip&#34;&gt;Using * and zip to &amp;lsquo;unzip&amp;rsquo;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt; unpacks an iterable such as a list or a tuple into positional arguments in a function call.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create a zip object from mutants and powers
z1 = zip(mutants,powers)

# Print the tuples in z1 by unpacking with *
print(*z1)

# Re-create a zip object from mutants and powers, as the print(*) exhausted all elements of z1
z1 = zip(mutants,powers)

# &#39;Unzip&#39; the tuples in z1 by unpacking with * and zip(): result1, result2
result1, result2 = zip(*z1)

# Check if unpacked tuples are equivalent to original tuples
print(result1 == mutants)
print(result2 == powers)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(&#39;charles xavier&#39;, &#39;telepathy&#39;) (&#39;bobby drake&#39;, &#39;thermokinesis&#39;) (&#39;kurt wagner&#39;, &#39;teleportation&#39;) (&#39;max eisenhardt&#39;, &#39;magnetokinesis&#39;) (&#39;kitty pryde&#39;, &#39;intangibility&#39;)
False
False
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Iterables with itr() and next()</title>
      <link>http://othrif.github.io/technical_note/python/basics/iterators/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/iterators/</guid>
      <description>&lt;h3 id=&#34;iterarble-and-iterator&#34;&gt;Iterarble and iterator&lt;/h3&gt;
&lt;p&gt;an iterable is an object that can return an iterator, while an iterator is an object that keeps state and produces the next value when you call &lt;code&gt;next()&lt;/code&gt; on it&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;flash = [&#39;jay garrick&#39;, &#39;barry allen&#39;, &#39;wally west&#39;, &#39;bart allen&#39;]

# Print each list item in flash using a for loop
for item in flash:
    print(&#39;for-loop:&#39;+item)


# Create an iterator for flash: superhero
superhero = iter(flash)

# Print each item from the iterator
print(&#39;next-iter:&#39;+next(superhero))
print(&#39;next-iter:&#39;+next(superhero))
print(&#39;next-iter:&#39;+next(superhero))
print(&#39;next-iter:&#39;+next(superhero))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;for-loop:jay garrick
for-loop:barry allen
for-loop:wally west
for-loop:bart allen
next-iter:jay garrick
next-iter:barry allen
next-iter:wally west
next-iter:bart allen
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;iterator-with-range&#34;&gt;Iterator with &lt;code&gt;range()&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;small_value = iter(range(3))

print(&#39;next-iter:&#39;+str(next(small_value)))
print(&#39;next-iter:&#39;+str(next(small_value)))
print(&#39;next-iter:&#39;+str(next(small_value)))

for i in range(3):
    print(&#39;for-loop:&#39;+str(i))


# Create an iterator for range(10 ** 100): googol
googol = iter(range(10 ** 100))

# Print the first 5 values from googol
print(&#39;googol:&#39;+str(next(googol)))
print(&#39;googol:&#39;+str(next(googol)))
print(&#39;googol:&#39;+str(next(googol)))
print(&#39;googol:&#39;+str(next(googol)))
print(&#39;googol:&#39;+str(next(googol)))

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;next-iter:0
next-iter:1
next-iter:2
for-loop:0
for-loop:1
for-loop:2
googol:0
googol:1
googol:2
googol:3
googol:4
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;functions-that-take-iterators-and-iterables-as-arguments&#34;&gt;Functions that take iterators and iterables as arguments&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;values = range(10,21)
print(values)


values_list = list(values)
print(values_list)


values_sum = sum(values)
print(values_sum)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;range(10, 21)
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
165
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Iterate over vector or array</title>
      <link>http://othrif.github.io/technical_note/cpp/basics/iteration/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/cpp/basics/iteration/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;iterate-over-stdvector&#34;&gt;Iterate over std::vector&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;std::vector&amp;lt;float&amp;gt; v = {7.3, 5.1, 16.3, 8.9}; // T = int, it can be anything else
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-iterators&#34;&gt;Using iterators&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;
for(std::vector&amp;lt;float&amp;gt;::iterator it = v.begin(); it != v.end(); ++it) {
    std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;quot; &amp;quot;; /* ... */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;7.3 5.1 16.3 8.9 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-indices&#34;&gt;Using indices&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;for(std::vector&amp;lt;int&amp;gt;::size_type i = 0; i != v.size(); i++) {
    std::cout &amp;lt;&amp;lt; v[i] &amp;lt;&amp;lt; &amp;quot; &amp;quot;; /* ... */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;7.3 5.1 16.3 8.9 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-range&#34;&gt;Using range&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;for(auto const&amp;amp; value: v) {
     std::cout &amp;lt;&amp;lt; value &amp;lt;&amp;lt; &amp;quot; &amp;quot;; /* ... */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;7.3 5.1 16.3 8.9 
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;iterate-over-arrays&#34;&gt;Iterate over arrays&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;double a[] = {7.3, 5.1, 16.3, 8.9, 9.1}; // T = int, it can be anything else
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-indices-1&#34;&gt;Using indices&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;for(std::size_t i = 0; i != (sizeof a / sizeof *a); i++) {
    std::cout &amp;lt;&amp;lt; a[i] &amp;lt;&amp;lt; &amp;quot; &amp;quot;; /* ... */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;7.3 5.1 16.3 8.9 9.1 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-range-1&#34;&gt;Using range&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;for(auto const&amp;amp; value: a) {
     std::cout &amp;lt;&amp;lt; value &amp;lt;&amp;lt; &amp;quot; &amp;quot;; /* ... */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;7.3 5.1 16.3 8.9 9.1 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Join strings</title>
      <link>http://othrif.github.io/technical_note/python/basics/join/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/join/</guid>
      <description>&lt;h3 id=&#34;basic-join&#34;&gt;Basic join&lt;/h3&gt;
&lt;p&gt;Syntax: &lt;code&gt;str.join(iterable)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = [&amp;quot;First&amp;quot;, &amp;quot;Second&amp;quot;, &amp;quot;Third&amp;quot;]
&#39;_&#39;.join(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;First_Second_Third&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;num = &#39;12345&#39;
&#39;-&#39;.join(num)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;1-2-3-4-5&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;let = &#39;abcdefg&#39;
&#39;.&#39;.join(let)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;a.b.c.d.e.f.g&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Jupyter shortcuts and installation</title>
      <link>http://othrif.github.io/technical_note/scripting/jupyter/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/scripting/jupyter/</guid>
      <description>&lt;h1 id=&#34;jupyter-shortcuts&#34;&gt;Jupyter shortcuts&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;cell format -&amp;gt; code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;m&lt;/td&gt;
&lt;td&gt;cell format -&amp;gt; Markdown&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;Add cell above&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;Add cell below&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;copy cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v&lt;/td&gt;
&lt;td&gt;paste cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;cut cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;d d&lt;/td&gt;
&lt;td&gt;delete cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;z&lt;/td&gt;
&lt;td&gt;undo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;shift+z&lt;/td&gt;
&lt;td&gt;redo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;space&amp;gt;&amp;lt;space&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;new line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;---&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;horizontal line&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;jupyter-kernels-in-macos&#34;&gt;Jupyter kernels in MacOS&lt;/h1&gt;
&lt;p&gt;Jupyter kernels are located in: &lt;code&gt;~/Library/Jupyter/kernels&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;List all kernels with: &lt;code&gt;jupyter kernelspec list&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;jupyter-installation-with-c&#34;&gt;Jupyter installation with C++&lt;/h1&gt;
&lt;p&gt;C++ kernel for Jupyter is available via &lt;code&gt;xeus-cling&lt;/code&gt;. Here is the documentaiton: 
&lt;a href=&#34;https://xeus.readthedocs.io/en/latest/installation.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xeus.readthedocs.io&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download a &lt;code&gt;miniconda&lt;/code&gt; from here: &lt;a href=&#34;https://docs.conda.io/en/latest/miniconda.html&#34;&gt;https://docs.conda.io/en/latest/miniconda.html&lt;/a&gt; and installed it.&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;xeus-cling&lt;/code&gt; with &lt;code&gt;conda&lt;/code&gt;: &lt;code&gt;conda install -c conda-forge xeus-cling&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Installation of &lt;code&gt;miniconda&lt;/code&gt; will alter your &lt;code&gt;python&lt;/code&gt; environment to &lt;code&gt;conda&lt;/code&gt;. I removed it from the path by only keeping &lt;code&gt;source ~/.bashrc&lt;/code&gt; in &lt;code&gt;~/.bash_profile&lt;/code&gt; and removing all other lines changing the &lt;code&gt;PATH&lt;/code&gt; to &lt;code&gt;conda&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added the correct kernels:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo jupyter kernelspec install /Users/othmanerifki/opt/miniconda3/share/jupyter/kernels/xcpp11 --sys-prefix 
sudo jupyter kernelspec install /Users/othmanerifki/opt/miniconda3/share/jupyter/kernels/xcpp14 --sys-prefix 
sudo jupyter kernelspec install /Users/othmanerifki/opt/miniconda3/share/jupyter/kernels/xcpp17 --sys-prefix 
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;jupyter-installation-with-java&#34;&gt;Jupyter installation with Java&lt;/h1&gt;
&lt;p&gt;Java kernel was easier.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install the Java Devleopment Kit (JDK) from &lt;a href=&#34;https://www.oracle.com/java/technologies/javase-jdk14-downloads.html&#34;&gt;https://www.oracle.com/java/technologies/javase-jdk14-downloads.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Then do:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/SpencerPark/IJava.git
cd IJava/
./gradlew installKernel
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Lambda functions and map(), filter(), reduce()</title>
      <link>http://othrif.github.io/technical_note/python/basics/lambda/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/lambda/</guid>
      <description>&lt;h3 id=&#34;basic-syntax&#34;&gt;Basic syntax&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lambda arguments : &amp;lt;do something&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;myfunc = lambda a: a+&#39;!!!&#39;
myfunc(&#39;hello&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;hello!!!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;converting-a-function-to-lambda&#34;&gt;Converting a function to lambda&lt;/h3&gt;
&lt;p&gt;Compare the two functions and how &lt;code&gt;lambda&lt;/code&gt; is much more concise&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def echo_word_def(word1, echo):
    &amp;quot;&amp;quot;&amp;quot;Concatenate echo copies of word1.&amp;quot;&amp;quot;&amp;quot;
    words = word1 * echo
    return words
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;echo_word_lambda = (lambda word1, echo: word1*echo)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(echo_word_def(&#39;hey&#39;,5))
print(echo_word_lambda(&#39;hey&#39;,5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;heyheyheyheyhey
heyheyheyheyhey
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;map-and-lambda-functions&#34;&gt;&lt;code&gt;Map()&lt;/code&gt; and lambda functions&lt;/h3&gt;
&lt;p&gt;map() applies a function over an object, such as a list. The syntax follows &lt;code&gt; map(func, list)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nums = [2, 4, 6, 8, 10]

result = map(lambda a: a ** 2, nums)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in this example, a lambda function, which raises a value &lt;code&gt;a&lt;/code&gt; to the power of 2, is passed to &lt;code&gt;map()&lt;/code&gt; alongside a list of numbers, &lt;code&gt;nums&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list(result)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[4, 16, 36, 64, 100]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;filter-and-lambda-functions&#34;&gt;&lt;code&gt;Filter()&lt;/code&gt; and lambda functions&lt;/h3&gt;
&lt;p&gt;The function &lt;code&gt;filter()&lt;/code&gt; offers a way to filter out elements from a list that don&amp;rsquo;t satisfy certain criteria.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fellowship = [&#39;frodo&#39;, &#39;samwise&#39;, &#39;merry&#39;, &#39;pippin&#39;, &#39;aragorn&#39;, &#39;boromir&#39;, &#39;legolas&#39;, &#39;gimli&#39;, &#39;gandalf&#39;]
result = filter(lambda a: len(a)&amp;gt;6, fellowship)
result_list = list(result)
print(result_list)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;samwise&#39;, &#39;aragorn&#39;, &#39;boromir&#39;, &#39;legolas&#39;, &#39;gandalf&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;reduce-and-lambda-functions&#34;&gt;&lt;code&gt;Reduce()&lt;/code&gt; and lambda functions&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;reduce()&lt;/code&gt; function is useful for performing some computation on a list and, unlike &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;filter()&lt;/code&gt;, returns a single value as a result. To use reduce(), you must import it from the functools module.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import reduce 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;stark = [&#39;robb&#39;, &#39;sansa&#39;, &#39;arya&#39;, &#39;brandon&#39;, &#39;rickon&#39;]
result = reduce(lambda item1,item2: item1+item2 , stark)
print(result)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;robbsansaaryabrandonrickon
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Linux system commands</title>
      <link>http://othrif.github.io/technical_note/linux/basics/system/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/linux/basics/system/</guid>
      <description>&lt;p&gt;Linux is a free and open source operating system. There are many variants of Linux out there. They are typically called Linux distribution. Suse, OpenSUSE, Debian, Ubuntu, CentOS, Arch, Fedora, RHEL, Scientific Linux (SLC), all are common Linux distribution names. Knowing your os version and name can be very useful for security patches.&lt;/p&gt;
&lt;h3 id=&#34;print-linux-kernel-version&#34;&gt;print Linux kernel version&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;uname -r&lt;/code&gt;&lt;br&gt;
or
&lt;code&gt;cat /proc/version&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;find-os-name-and-version-in-linux&#34;&gt;find os name and version in Linux&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cat /etc/os-release&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;query-the-system-hostname-and-related-settings&#34;&gt;query the system hostname and related settings&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;hostnamectl&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;gives-lsb-linux-standard-base-and-distribution-specific-information-on-the-cli&#34;&gt;gives LSB (Linux Standard Base) and distribution-specific information on the CLI&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;lsb_release -a&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>List comprehension and generator expressions</title>
      <link>http://othrif.github.io/technical_note/python/performance/generator/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/performance/generator/</guid>
      <description>&lt;h3 id=&#34;list-comprehension&#34;&gt;List comprehension&lt;/h3&gt;
&lt;p&gt;It more compact notation, compare the following for-loops expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lst=[[1,2,3],[4,5,6]]
for row_idx, row_val in enumerate(lst):
    for col_idx, col_val in enumerate(row_val): 
        lst[row_idx][col_idx] += 1
lst
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[2, 3, 4], [5, 6, 7]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with the list comprehension expression, the above for loops simplifies greatly:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lst=[[1,2,3],[4,5,6]]
[[cell + 1 for cell in row] for row in lst]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[2, 3, 4], [5, 6, 7]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the following summation code will build a full list of squares in memory, iterate over those values, and, when the reference is no longer needed, delete the list:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sum([x*x for x in range(10)])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;285
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;generator-expressions&#34;&gt;Generator expressions&lt;/h3&gt;
&lt;p&gt;Many of the use cases do not need to have a full list created in memory. Instead, they only need to iterate over the elements one at a time. Memory is conserved by using a generator expression instead:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sum(x*x for x in range(10))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;285
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;more-examples&#34;&gt;More examples&lt;/h3&gt;
&lt;p&gt;Check here &lt;a href=&#34;https://www.python.org/dev/peps/pep-0289/&#34;&gt;https://www.python.org/dev/peps/pep-0289/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>List comprehesion</title>
      <link>http://othrif.github.io/technical_note/python/pandas/list_comprehesion/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/list_comprehesion/</guid>
      <description>&lt;h3 id=&#34;list-comprehesion&#34;&gt;List comprehesion&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[output expression for iterator variable in iterable]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;doctor = [&#39;house&#39;, &#39;cuddy&#39;, &#39;chase&#39;, &#39;thirteen&#39;, &#39;wilson&#39;]
new_doctor = [doc[0] for doc in doctor]
print(new_doctor)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;h&#39;, &#39;c&#39;, &#39;c&#39;, &#39;t&#39;, &#39;w&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;squares = [i**2 for i in range(10)]
print(squares)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;nested-list-comprehesion&#34;&gt;Nested list comprehesion&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[[output expression] for iterator variable in iterable]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create a 5 x 5 matrix using a list of lists
matrix = [[col for col in range(5)] for row in range(5)]
print(matrix)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4]]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;conditional-list-comprehesion&#34;&gt;Conditional list comprehesion&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[ output expression for iterator variable in iterable if predicate expression ].
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create a list of strings: fellowship
fellowship = [&#39;frodo&#39;, &#39;samwise&#39;, &#39;merry&#39;, &#39;aragorn&#39;, &#39;legolas&#39;, &#39;boromir&#39;, &#39;gimli&#39;]

# Create list comprehension: new_fellowship
new_fellowship = [fellow for fellow in fellowship if len(fellow)&amp;gt;=7]

# Print the new list
print(new_fellowship)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;samwise&#39;, &#39;aragorn&#39;, &#39;legolas&#39;, &#39;boromir&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;if-else-conditional-on-output-expression&#34;&gt;if-else conditional on output expression&lt;/h3&gt;
&lt;p&gt;In the previous example, you used an if conditional statement in the predicate expression part of a list comprehension to evaluate an iterator variable. In this exercise, you will use an if-else statement on the output expression of the list.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[ output expression true if condition else output expression false for iterator variable in iterable if predicate expression ].
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create a list of strings: fellowship
fellowship = [&#39;frodo&#39;, &#39;samwise&#39;, &#39;merry&#39;, &#39;aragorn&#39;, &#39;legolas&#39;, &#39;boromir&#39;, &#39;gimli&#39;]

# Create list comprehension: new_fellowship
new_fellowship = [member if len(member)&amp;gt;=7 else &#39;&#39; for member in fellowship]

# Print the new list
print(new_fellowship)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;&#39;, &#39;samwise&#39;, &#39;&#39;, &#39;aragorn&#39;, &#39;legolas&#39;, &#39;boromir&#39;, &#39;&#39;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Lists, Tuples</title>
      <link>http://othrif.github.io/technical_note/python/basics/lists/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/lists/</guid>
      <description>&lt;h3 id=&#34;lists&#34;&gt;Lists&lt;/h3&gt;
&lt;p&gt;Lists are mutable&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [&#39;Hello world!&#39;, &#39;banans&#39;, &#39;apples&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.append(&#39;add one more&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Hello world!&#39;, &#39;banans&#39;, &#39;apples&#39;, &#39;add one more&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.extend([&#39;another&#39;,&#39;even more&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Hello world!&#39;, &#39;banans&#39;, &#39;apples&#39;, &#39;add one more&#39;, &#39;another&#39;, &#39;even more&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;access-an-element&#34;&gt;Access an element&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;apples&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(my_list)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;list
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;subsetting-a-list&#34;&gt;Subsetting a list&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;list[inclusive:exluive]&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[1:3]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;banans&#39;, &#39;apples&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;del-element&#34;&gt;Del element&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Hello world!&#39;, &#39;banans&#39;, &#39;apples&#39;, &#39;add one more&#39;, &#39;another&#39;, &#39;even more&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;del(my_list[1])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Hello world!&#39;, &#39;apples&#39;, &#39;add one more&#39;, &#39;another&#39;, &#39;even more&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;copy-list-with-list&#34;&gt;Copy list with &lt;code&gt;list()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list1 = list0&lt;/code&gt; allows the list to point to the same memory area. Any changes to &lt;code&gt;list1&lt;/code&gt; will affect &lt;code&gt;list0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To copy &lt;code&gt;list()&lt;/code&gt; or &lt;code&gt;[:]&lt;/code&gt;, use the syntax: &lt;code&gt;list1=list(list0)&lt;/code&gt; or &lt;code&gt;list1=list0[:]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create list areas
areas = [11.25, 18.0, 20.0, 10.75, 9.50]
print(f&#39;before after: {areas}&#39;)

# Create areas_copy
areas_copy1 = areas
areas_copy2 = list(areas)
areas_copy3 = areas[:]

# Change areas_copy
areas_copy1[0] = 1.0
areas_copy2[0] = 2.0
areas_copy3[0] = 3.0

# Print areas
print(f&#39;areas after: {areas}&#39;)
print(f&#39;areas_copy1 after: {areas_copy1}&#39;)
print(f&#39;areas_copy2 after: {areas_copy2}&#39;)
print(f&#39;areas_copy3 after: {areas_copy3}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;before after: [11.25, 18.0, 20.0, 10.75, 9.5]
areas after: [1.0, 18.0, 20.0, 10.75, 9.5]
areas_copy1 after: [1.0, 18.0, 20.0, 10.75, 9.5]
areas_copy2 after: [2.0, 18.0, 20.0, 10.75, 9.5]
areas_copy3 after: [3.0, 18.0, 20.0, 10.75, 9.5]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;tuples&#34;&gt;Tuples&lt;/h3&gt;
&lt;p&gt;Tuples are immutable&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;t = (0,1,2,3,4)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;access-an-element-1&#34;&gt;Access an element&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;t[2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(t)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;special-cases&#34;&gt;Special cases&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;single = (1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(single)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;int
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;single = (1,)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(single)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;appending&#34;&gt;Appending&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo = ([&#39;test&#39;],)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;([&#39;test&#39;],)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo[0].append(&#39;another test&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;([&#39;test&#39;, &#39;another test&#39;],)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo[0].append(&#39;yet another test&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;([&#39;test&#39;, &#39;another test&#39;, &#39;yet another test&#39;],)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but this is not possible&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;galileo[0] = [&#39;reset&#39;,&#39;can\&#39;t be done&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-34-e195864df4a2&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 galileo[0] = [&#39;reset&#39;,&#39;can\&#39;t be done&#39;]


TypeError: &#39;tuple&#39; object does not support item assignment
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;packing-and-unpacking&#34;&gt;Packing and unpacking&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;date = 6,5,2020
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(date)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;day,month,year = date
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;day={day}, month={month}, year={year}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;day=6, month=5, year=2020
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(day,month,year) = date
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;swap-variables-using-unpacking&#34;&gt;Swap variables using unpacking&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x,y = 1,2
x,y = y,x
print(f&#39;x={x}, y={y}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;x=2, y=1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;remainder&#34;&gt;Remainder&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;first, *rest = (1,2,3,4,5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;first={first} rest={rest}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;first=1 rest=[2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;first, *middle, last = (1,2,3,4,5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(middle)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;first={first} middle={middle} last={last}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;first=1 middle=[2, 3, 4] last=5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;first, *middle, last = [1,2,3,4,5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;first={first} middle={middle} last={last}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;first=1 middle=[2, 3, 4] last=5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a, *b, c = &#39;HELLOWORLD&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;E&#39;, &#39;L&#39;, &#39;L&#39;, &#39;O&#39;, &#39;W&#39;, &#39;O&#39;, &#39;R&#39;, &#39;L&#39;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Load data in chunks</title>
      <link>http://othrif.github.io/technical_note/python/basics/iterators_file/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/iterators_file/</guid>
      <description>&lt;h3 id=&#34;loading-data-in-chunks&#34;&gt;Loading data in chunks&lt;/h3&gt;
&lt;p&gt;the data we have to process reaches a size that is too much for a computer&amp;rsquo;s memory to handle. A solution to this is to process an entire data source chunk by chunk, instead of a single go all at once.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
counts_dict = {}
csv_url=&#39;../datasets/tweets.csv&#39;
pd.set_option(&#39;display.max_colwidth&#39;,-1)
# Iterate over the file chunk by chunk
for chunk in pd.read_csv(csv_url, chunksize=10):
    print(chunk[&#39;text&#39;])
    # Iterate over the column in DataFrame
    for entry in chunk[&#39;lang&#39;]:
        if entry in counts_dict.keys():
            counts_dict[entry] += 1
        else:
            counts_dict[entry] = 1

# Print the populated dictionary
print(counts_dict)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0    RT @bpolitics: .@krollbondrating&#39;s Christopher Whalen says Clinton is the weakest Dem candidate in 50 years https://t.co/pLk7rvoRSn https:/…
1    RT @HeidiAlpine: @dmartosko Cruz video found.....racing from the scene.... #cruzsexscandal https://t.co/zuAPZfQDk3                          
2    Njihuni me Zonjën Trump !!! | Ekskluzive https://t.co/4KmsQi47VD                                                                            
3    Your an idiot she shouldn&#39;t have tried to grab trump after the fact she&#39;s an idiot https://t.co/lpASyeNVpG                                  
4    RT @AlanLohner: The anti-American D.C. elites despise Trump for his America-first foreign policy. Trump threatens their gravy train. https:…
5    RT @BIackPplTweets: Young Donald trump meets his neighbor  https://t.co/RFlu17Z1eE                                                          
6    RT @trumpresearch: @WaitingInBagdad @thehill Trump supporters have selective amnisia.                                                       
7    RT @HouseCracka: 29,000+ PEOPLE WATCHING TRUMP LIVE ON ONE STREAM!!!\n\nhttps://t.co/7QCFz9ehNe                                             
8    RT @urfavandtrump: RT for Brendon Urie\nFav for Donald Trump https://t.co/PZ5vS94lOg                                                        
9    RT @trapgrampa: This is how I see #Trump every time he speaks. https://t.co/fYSiHNS0nT                                                      
Name: text, dtype: object
10    RT @trumpresearch: @WaitingInBagdad @thehill Trump supporters have selective amnisia.                                                        
11    RT @Pjw20161951: NO KIDDING: #SleazyDonald just attacked Scott Walker for NOT RAISING TAXES in WI! #LyinTrump\n#NeverTrump  #CruzCrew  https…
12    RT @urfavandtrump: RT for Brendon Urie\nFav for Donald Trump https://t.co/PZ5vS94lOg                                                         
13    RT @ggreenwald: The media spent all day claiming @SusanSarandon said she might vote for Trump. A total fabrication, but whatever... https:/… 
14    RT @Pjw20161951: NO KIDDING: #SleazyDonald just attacked Scott Walker for NOT RAISING TAXES in WI! #LyinTrump\n#NeverTrump  #CruzCrew  https…
15    RT @trapgrampa: This is how I see #Trump every time he speaks. https://t.co/fYSiHNS0nT                                                       
16    RT @mitchellvii: So let me get this straight.  Any reporter can assault Mr Trump at any time and Corey can do nothing?  Michelle is clearly… 
17    Your an idiot she shouldn&#39;t have tried to grab trump after the fact she&#39;s an idiot https://t.co/lpASyeNVpG                                   
18    RT @paulbenedict7: How #Trump Sacks RINO Strongholds by Hitting Positions Held by Dems and GOP https://t.co/D7ulnAJhis   #tcot #PJNET https… 
19    RT @DRUDGE_REPORT: VIDEO:  Trump emotional moment with Former Miss Wisconsin who has terminal illness... https://t.co/qt06aG9inT             
Name: text, dtype: object
20    #HillYes #ImWithHer #RollHillary @HillaryClinton  https://t.co/OwYXKIalyn                                                                   
21    RT @ggreenwald: The media spent all day claiming @SusanSarandon said she might vote for Trump. A total fabrication, but whatever... https:/…
22    RT @DennisApgar: Thank God I seen Trump at first stop in Wisconsin media doesn&#39;t know how great he is, advice watch live streaming https://…
23    RT @paulbenedict7: How #Trump Sacks RINO Strongholds by Hitting Positions Held by Dems and GOP https://t.co/D7ulnAJhis   #tcot #PJNET https…
24    RT @DRUDGE_REPORT: VIDEO:  Trump emotional moment with Former Miss Wisconsin who has terminal illness... https://t.co/qt06aG9inT            
25    RT @DennisApgar: Thank God I seen Trump at first stop in Wisconsin media doesn&#39;t know how great he is, advice watch live streaming https://…
26    RT @mitchellvii: So let me get this straight.  Any reporter can assault Mr Trump at any time and Corey can do nothing?  Michelle is clearly…
27    Trump won&#39;t do a yes ma&#39;am for this.  https://t.co/r3WkGZDjPH                                                                               
28    RT @sciam: Trump&#39;s idiosyncratic patterns of speech are why people tend either to love or hate him https://t.co/QXwquVgs3c https://t.co/P9N…
29    #HillYes #ImWithHer #RollHillary @HillaryClinton  https://t.co/OwYXKIalyn                                                                   
Name: text, dtype: object
30    RT @Norsu2: Nightmare WI poll for Ted Cruz has Kasich surging: Trump 29, Kasich 27, Cruz 25. https://t.co/lJsgbLYY1P #NeverTrump                
31    RT @thehill: WATCH: Protester pepper-sprayed point blank at Trump rally https://t.co/B5f65Al9ld https://t.co/skAfByXuQc                         
32    RT @sciam: Trump&#39;s idiosyncratic patterns of speech are why people tend either to love or hate him https://t.co/QXwquVgs3c https://t.co/P9N…    
33    RT @ggreenwald: The media spent all day claiming @SusanSarandon said she might vote for Trump. A total fabrication, but whatever... https:/…    
34    Opinion: The big story is -- Sanders https://t.co/9Z9ZVnZ1Zi                                                                                    
35    GOP speechwriter: By November, Ivanka will be voting for Clinton | TheHill https://t.co/tUT7LpEHak                                              
36    This dude must have some serious issues  https://t.co/ojYaDpnSoe                                                                                
37    RT @DebbieStout5: Wow! Last I checked it was just 12 points &amp;amp;amp; that wasn&#39;t more than a day ago. Oh boy Trump ppl might want to rethink🤔 http…
38    RT @tyleroakley: i&#39;m a messy bitch, but at least i&#39;m not voting for trump                                                                       
39    RT @vandives: Trump supporters r tired of justice NOT being served. There&#39;s no justice anymore. Hardworking Americans get screwed. That&#39;s n…    
Name: text, dtype: object
40    Opinion: The big story is -- Sanders https://t.co/9Z9ZVnZ1Zi                                                                                  
41    RT @AP: BREAKING: Trump vows to stand by campaign manager charged with battery, says he does not discard people.                              
42    It Cometh from the Pit. And Hath a Knout https://t.co/iyF5HPDJNU\n#Trump\n#Election2016 https://t.co/W4ZXQfUHi8                               
43    RT @AP: BREAKING: Trump vows to stand by campaign manager charged with battery, says he does not discard people.                              
44    @footlooseracer @hautedamn @z0mgItsHutch So much sadness and pure stupidity from the people who support Trump. Very sad.                      
45    RT @urfavandtrump: RT for Jerrie (Little Mix)\nFav for Donald Trump https://t.co/nEVxElW6iG                                                   
46    RT @urfavandtrump: RT for Jerrie (Little Mix)\nFav for Donald Trump https://t.co/nEVxElW6iG                                                   
47    PSA: @piersmorgan is a asshole. https://t.co/2Gjp2NPo0w                                                                                       
48    RT @NoahCRothman: When Walker was fighting for reforms, Trump was defending unions and collective bargaining privileges https://t.co/e1UWNN…  
49    RT @RedheadAndRight: Report: Secret Service Says Michelle Fields Touched Trump https://t.co/c5c2sD8VO2\n\nThis is the only article you will n…
Name: text, dtype: object
50    Me listening to DONALD TRUMP saying that he has no small hands ( allegedly ) https://t.co/LhUYdi8Vgf https://t.co/IwD9Lg84HY                  
51    RT @AIIAmericanGirI: VIDEO=&amp;amp;gt; Anti-Trump Protester SLUGS Elderly Trump Supporter in the Face\nhttps://t.co/GeEryMDuDY                       
52    RT @NoahCRothman: When Walker was fighting for reforms, Trump was defending unions and collective bargaining privileges https://t.co/e1UWNN…  
53    PSA: @piersmorgan is a asshole. https://t.co/2Gjp2NPo0w                                                                                       
54    RT @JusticeRanger1: @realDonaldTrump @Pudingtane @DanScavino @GOP @infowars @EricTrump \nURGENT PUBLIC TRUMP ALERT:\nCOVERT KILL MEANS https:…
55    RT @AIIAmericanGirI: VIDEO=&amp;amp;gt; Anti-Trump Protester SLUGS Elderly Trump Supporter in the Face\nhttps://t.co/GeEryMDuDY                       
56    Susan Sarandon Shares Interesting Opinion on Donald Trump https://t.co/Gjzkpr5mrH                                                             
57    RT @RedheadAndRight: Report: Secret Service Says Michelle Fields Touched Trump https://t.co/c5c2sD8VO2\n\nThis is the only article you will n…
58    @jbrading dude you are annoying af. Deion sanders fucking hates you guys.                                                                     
59    RT @JusticeRanger1: @realDonaldTrump @Pudingtane @DanScavino @GOP @infowars @EricTrump \nURGENT PUBLIC TRUMP ALERT:\nCOVERT KILL MEANS https:…
Name: text, dtype: object
60    RT @Schneider_CM: Trump says nobody had ever heard of executive orders before Obama started signing them. Never heard of the Emancipation P…
61    RT @RonBasler1: @DavidWhitDennis @realDonaldTrump @tedcruz \n\nCRUZ SCREWS HOOKERS\n\nCRUZ / CLINTON                                        
62    Susan Sarandon Shares Interesting Opinion on Donald Trump https://t.co/Gjzkpr5mrH                                                           
63    @realDonaldTrump Its too bad Cruz doesn&#39;t have enough brains to realize he&#39;s being led down the primrose lane to be neutered by the Elites!!
64    RT @DonaldsAngel: Former Ms. WI just said that she is terminally ill but because of Trump pageant, her 7 yr. old son has his college educat…
65    Photo: #Donald #Trump #Protest in #Milwaukee ahead of CNN GOP #Town #Hall with #Trump, Ted #Cruz, ... https://t.co/8NOguZUSCK               
66    RT @Schneider_CM: Trump says nobody had ever heard of executive orders before Obama started signing them. Never heard of the Emancipation P…
67    @jbrading dude you are annoying af. Deion sanders fucking hates you guys.                                                                   
68    RT @DonaldsAngel: Former Ms. WI just said that she is terminally ill but because of Trump pageant, her 7 yr. old son has his college educat…
69    Photo: #Donald #Trump #Protest in #Milwaukee ahead of CNN GOP #Town #Hall with #Trump, Ted #Cruz, ... https://t.co/8NOguZUSCK               
Name: text, dtype: object
70    RT @Dodarey: @DR8801 @SykesCharlie Charlie, let&#39;s see you get a straight &amp;quot;yes&amp;quot; or &amp;quot;no&amp;quot; answer from Cruz a/b being unfaithful to his wife @T… 
71    RT @RonBasler1: @DavidWhitDennis @realDonaldTrump @tedcruz \n\nCRUZ SCREWS HOOKERS\n\nCRUZ / CLINTON                                         
72    RT @RockCliffOne: Remember when the idea of a diabolical moron holding the world hostage was an idea for a funny movie? #Trump #GOP https:/… 
73    RT @HillaryClinton: &amp;quot;Every day, another Republican bemoans the rise of Donald Trump... but [he] didn’t come out of nowhere.&amp;quot; —Hillary\nhttps…
74    @realDonaldTrump @MELANIATRUMP Get Them Good Mr.Trump ,Great Picture of You and The First Lady                                               
75    @realDonaldTrump Its too bad Cruz doesn&#39;t have enough brains to realize he&#39;s being led down the primrose lane to be neutered by the Elites!! 
76    I just saw this. I&#39;m speechless.  https://t.co/cmUYxtrX0Y                                                                                    
77    RT @Dodarey: @DR8801 @SykesCharlie Charlie, let&#39;s see you get a straight &amp;quot;yes&amp;quot; or &amp;quot;no&amp;quot; answer from Cruz a/b being unfaithful to his wife @T… 
78    I just saw this. I&#39;m speechless.  https://t.co/cmUYxtrX0Y                                                                                    
79    Trump campaign chief charged with battery https://t.co/SpIukqj3Rb                                                                            
Name: text, dtype: object
80    RT @HillaryClinton: &amp;quot;Every day, another Republican bemoans the rise of Donald Trump... but [he] didn’t come out of nowhere.&amp;quot; —Hillary\nhttps…
81    @realDonaldTrump @MELANIATRUMP Get Them Good Mr.Trump ,Great Picture of You and The First Lady                                               
82    RT @RockCliffOne: Remember when the idea of a diabolical moron holding the world hostage was an idea for a funny movie? #Trump #GOP https:/… 
83    RT @immigrant4trump: @immigrant4trump msm, cable news attacking trump all day, from 8am to 10pm today, then the reruns come on, repeating t… 
84    @ErinBurnett @Bakari_Sellers @benfergusonshow @BernieSanders Again @CNN allows Jeff Lord far too much time to spin wacky Trump.              
85    RT @immigrant4trump: @immigrant4trump msm, cable news attacking trump all day, from 8am to 10pm today, then the reruns come on, repeating t… 
86    @ErinBurnett @Bakari_Sellers @benfergusonshow @BernieSanders Again @CNN allows Jeff Lord far too much time to spin wacky Trump.              
87    @noreallyhowcome @TVineberg Learn about Bernie https://t.co/bhaUnQ4jrr Learn about Hillary https://t.co/eAbfWrAG4G https://t.co/W53JJCkDFv   
88    RT @GlendaJazzey: Donald Trump’s Campaign Financing Dodge, @rrotunda https://t.co/L8flI4lswG via @VerdictJustia                              
89    Trump who prides himself on the ability to spot a good deal missed out on a big one in Louisiana. C&#39;est la vie.  https://t.co/MZrvWwTWZV     
Name: text, dtype: object
90    Judicial Watch: Obama Administration Withholds Draft Whitewater Indictment of Hillary Clinton https://t.co/EuW9J1WVm1                       
91    I don&#39;t understand how anyone can support a hateful person like @realDonaldTrump  https://t.co/BbYMxRWadC                                   
92    RT @TUSK81: LOUDER FOR THE PEOPLE IN THE BACK https://t.co/hlPVyNLXzx                                                                       
93    RT @loopzoop: Well...put it back https://t.co/8Yb7BDT5VM                                                                                    
94    Donald Trump: Victim. https://t.co/qvK17ZnUTZ                                                                                               
95    RT @claytoncubitt: Stop asking Bernie supporters if they’ll vote for Hillary against Trump. We got a plan to beat Trump already. Called Ber…
96    Kasich is gonna fuck this up for Ted Cruz  https://t.co/JYYok5qx7R                                                                          
97    RT @akaMaude13: Seriously can&#39;t make this up. What a joke. #NeverTrump  https://t.co/JkTx6mdRgC                                             
98    Kasich is gonna fuck this up for Ted Cruz  https://t.co/JYYok5qx7R                                                                          
99    @marklevinshow try reporting this truth. https://t.co/z76fZzCRK3                                                                            
Name: text, dtype: object
{&#39;en&#39;: 97, &#39;et&#39;: 1, &#39;und&#39;: 2}


/Users/othmanerifki/Library/Python/3.7/lib/python/site-packages/ipykernel_launcher.py:4: FutureWarning: Passing a negative integer is deprecated in version 1.0 and will not be supported in future version. Instead, use None to not limit the column width.
  after removing the cwd from sys.path.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Load data in chunks</title>
      <link>http://othrif.github.io/technical_note/python/pandas/file_chunks/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/file_chunks/</guid>
      <description>&lt;h3 id=&#34;loading-data-in-chunks&#34;&gt;Loading data in chunks&lt;/h3&gt;
&lt;p&gt;the data we have to process reaches a size that is too much for a computer&amp;rsquo;s memory to handle. A solution to this is to process an entire data source chunk by chunk, instead of a single go all at once.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
def count_entries(csv_file, c_size, colname):
    &amp;quot;&amp;quot;&amp;quot;Return a dictionary with counts of
    occurrences as value for each key.&amp;quot;&amp;quot;&amp;quot;
    
    # Initialize an empty dictionary: counts_dict
    counts_dict = {}

    # Iterate over the file chunk by chunk
    for chunk in pd.read_csv(csv_file, chunksize=c_size):

        # Iterate over the column in DataFrame
        for entry in chunk[colname]:
            if entry in counts_dict.keys():
                counts_dict[entry] += 1
            else:
                counts_dict[entry] = 1

    # Return counts_dict
    return counts_dict
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;result_counts = count_entries(csv_file=&#39;../datasets/tweets.csv&#39;,c_size=10, colname=&#39;lang&#39;)
print(result_counts)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;en&#39;: 97, &#39;et&#39;: 1, &#39;und&#39;: 2}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Loading a pickled file</title>
      <link>http://othrif.github.io/technical_note/python/basics/loadpickle/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/loadpickle/</guid>
      <description>&lt;h3 id=&#34;concept&#34;&gt;Concept&lt;/h3&gt;
&lt;p&gt;if you merely want to be able to import them into Python, you can serialize them. All this means is converting the object into a sequence of bytes, or a bytestream.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import pickle package
import pickle

# Open pickle file and load data: d
with open(&#39;data.pkl&#39;, &#39;rb&#39;) as file:
    d = pickle.load(file)

# Print d
print(d)

# Print datatype of d
print(type(d))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

FileNotFoundError                         Traceback (most recent call last)

&amp;lt;ipython-input-1-7b211b6854e7&amp;gt; in &amp;lt;module&amp;gt;
      3 
      4 # Open pickle file and load data: d
----&amp;gt; 5 with open(&#39;data.pkl&#39;, &#39;rb&#39;) as file:
      6     d = pickle.load(file)
      7 


FileNotFoundError: [Errno 2] No such file or directory: &#39;data.pkl&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Loading an excel file</title>
      <link>http://othrif.github.io/technical_note/python/basics/loadexcel/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/loadexcel/</guid>
      <description>&lt;h3 id=&#34;concept&#34;&gt;Concept&lt;/h3&gt;
&lt;p&gt;use pandas to import Excel spreadsheets and how to list the names of the sheets in any loaded .xlsx file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import pandas
import pandas as pd

# Assign spreadsheet filename: file
file = &#39;battledeath.xlsx&#39;

# Load spreadsheet: xls
xls = pd.ExcelFile(file)

# Print sheet names
print(xls.sheet_names)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;2002&#39;, &#39;2004&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Load a sheet into a DataFrame by name: df1
df1 = xls.parse(&#39;2004&#39;)
print(df1.head())

# Load a sheet into a DataFrame by index: df2
df2 = xls.parse(0)
print(df2.head())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  War(country)      2004
0  Afghanistan  9.451028
1      Albania  0.130354
2      Algeria  3.407277
3      Andorra  0.000000
4       Angola  2.597931
  War, age-adjusted mortality due to       2002
0                        Afghanistan  36.083990
1                            Albania   0.128908
2                            Algeria  18.314120
3                            Andorra   0.000000
4                             Angola  18.964560
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;customize-the-spreadsheet-import&#34;&gt;Customize the spreadsheet import&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Parse the first sheet and rename the columns: df1, skip first row and rename columns
df1 = xls.parse(0, skiprows=[0], names=[&#39;Country&#39;,&#39;AAM due to War (2002)&#39;])

# Print the head of the DataFrame df1
print(df1.head())

# Parse the first column of the second sheet and rename the column: df2
df2 = xls.parse(1, usecols=[0], skiprows=[0], names=[&#39;Country&#39;])

# Print the head of the DataFrame df2
print(df2.head())

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;               Country  AAM due to War (2002)
0              Albania               0.128908
1              Algeria              18.314120
2              Andorra               0.000000
3               Angola              18.964560
4  Antigua and Barbuda               0.000000
               Country
0              Albania
1              Algeria
2              Andorra
3               Angola
4  Antigua and Barbuda
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Look-elsewhere effect</title>
      <link>http://othrif.github.io/technical_note/math/stats/look_elsewhere/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/math/stats/look_elsewhere/</guid>
      <description>&lt;p&gt;The probability of encountering an error is still extremely high. This is where the Bonferroni correction comes in. While a bit conservative, it controls the family-wise error rate for circumstances like these to avoid the high probability of a Type I error.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Print error rate for 60 tests with 5% significance
error_rate = 1 - (.95**(60))
print(error_rate)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.953930201013048
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Print error rate for 30 tests with 5% significance
error_rate = 1 - (.95**(30))
print(error_rate)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.7853612360570628
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Print error rate for 10 tests with 5% significance
error_rate = 1 - (.95**(10))
print(error_rate)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.4012630607616213
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;bonferroni-correction&#34;&gt;Bonferroni correction&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s implement multiple hypothesis tests using the Bonferroni correction approach that we discussed in the slides. You&amp;rsquo;ll use the imported &lt;code&gt;multipletests()&lt;/code&gt; function in order to achieve this.&lt;/p&gt;
&lt;p&gt;Use a single-test significance level of .05 and observe how the Bonferroni correction affects our sample list of p-values already created.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from statsmodels.sandbox.stats.multicomp import multipletests
pvals = [.01, .05, .10, .50, .99]

# Create a list of the adjusted p-values
p_adjusted = multipletests(pvals, alpha=0.05, method=&#39;bonferroni&#39;)

# Print the resulting conclusions
print(p_adjusted[0])

# Print the adjusted p-values themselves 
print(p_adjusted[1])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[ True False False False False]
[0.05 0.25 0.5  1.   1.  ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the Bonferroni correction did it&amp;rsquo;s job and corrected the family-wise error rate for our 5 hypothesis test results. In the end, only one of the tests remained signficant. There are other methods to do tjhis test:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sidak correction&lt;/li&gt;
&lt;li&gt;Step-based procedures&lt;/li&gt;
&lt;li&gt;Tukey’s procedure&lt;/li&gt;
&lt;li&gt;Dunnet’s correction&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Loop over maps, numpy arrays</title>
      <link>http://othrif.github.io/technical_note/python/matplotlib/loop/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlib/loop/</guid>
      <description>&lt;h3 id=&#34;loop-over-maps&#34;&gt;Loop over maps&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition of dictionary
europe = {&#39;spain&#39;:&#39;madrid&#39;, &#39;france&#39;:&#39;paris&#39;, &#39;germany&#39;:&#39;berlin&#39;,
          &#39;norway&#39;:&#39;oslo&#39;, &#39;italy&#39;:&#39;rome&#39;, &#39;poland&#39;:&#39;warsaw&#39;, &#39;austria&#39;:&#39;vienna&#39; }
          
# Iterate over europe
for k,v in europe.items():
    print(&#39;the capital of &#39; + str(k) +&#39; is &#39; + str(v))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;the capital of spain is madrid
the capital of france is paris
the capital of germany is berlin
the capital of norway is oslo
the capital of italy is rome
the capital of poland is warsaw
the capital of austria is vienna
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;loop-over-1d-numpy-array&#34;&gt;Loop over 1D Numpy array&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
np_height = [1.2,32,23.2,23.1]
# For loop over np_height
for x in np_height:
    print(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1.2
32
23.2
23.1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;loop-over-2d-numpy-array&#34;&gt;Loop over 2D Numpy array&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
baseball = [[180, 78.4],
            [215, 102.7],
            [210, 98.5],
            [188, 75.2]]
np_baseball = np.array(baseball)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# flatten, printing rows sequentially
for x in np.nditer(np_baseball):
    print(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;180.0
78.4
215.0
102.7
210.0
98.5
188.0
75.2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Loop over maps, numpy arrays</title>
      <link>http://othrif.github.io/technical_note/python/numpy/loop/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/numpy/loop/</guid>
      <description>&lt;h3 id=&#34;loop-over-maps&#34;&gt;Loop over maps&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Definition of dictionary
europe = {&#39;spain&#39;:&#39;madrid&#39;, &#39;france&#39;:&#39;paris&#39;, &#39;germany&#39;:&#39;berlin&#39;,
          &#39;norway&#39;:&#39;oslo&#39;, &#39;italy&#39;:&#39;rome&#39;, &#39;poland&#39;:&#39;warsaw&#39;, &#39;austria&#39;:&#39;vienna&#39; }
          
# Iterate over europe
for k,v in europe.items():
    print(&#39;the capital of &#39; + str(k) +&#39; is &#39; + str(v))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;the capital of spain is madrid
the capital of france is paris
the capital of germany is berlin
the capital of norway is oslo
the capital of italy is rome
the capital of poland is warsaw
the capital of austria is vienna
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;loop-over-1d-numpy-array&#34;&gt;Loop over 1D Numpy array&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
np_height = [1.2,32,23.2,23.1]
# For loop over np_height
for x in np_height:
    print(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1.2
32
23.2
23.1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;loop-over-2d-numpy-array&#34;&gt;Loop over 2D Numpy array&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
baseball = [[180, 78.4],
            [215, 102.7],
            [210, 98.5],
            [188, 75.2]]
np_baseball = np.array(baseball)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# flatten, printing rows sequentially
for x in np.nditer(np_baseball):
    print(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;180.0
78.4
215.0
102.7
210.0
98.5
188.0
75.2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Loops with DataFrames</title>
      <link>http://othrif.github.io/technical_note/python/pandas/loops/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/loops/</guid>
      <description>&lt;h4 id=&#34;generate-some-data&#34;&gt;Generate some data&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

# Build cars DataFrame
names = [&#39;United States&#39;, &#39;Australia&#39;, &#39;Japan&#39;, &#39;India&#39;, &#39;Russia&#39;, &#39;Morocco&#39;, &#39;Egypt&#39;]
dr =  [True, False, False, False, True, True, True]
cpc = [809, 731, 588, 18, 200, 70, 45]
row_labels = [&#39;US&#39;, &#39;AUS&#39;, &#39;JPN&#39;, &#39;IN&#39;, &#39;RU&#39;, &#39;MOR&#39;, &#39;EG&#39;]
cars_dict = {&#39;country&#39;:names, &#39;drives_right&#39;:dr, &#39;cars_per_cap&#39;:cpc }
cars = pd.DataFrame(cars_dict)
cars.index = row_labels
cars2 = cars
print(cars)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;           country  drives_right  cars_per_cap
US   United States          True           809
AUS      Australia         False           731
JPN          Japan         False           588
IN           India         False            18
RU          Russia          True           200
MOR        Morocco          True            70
EG           Egypt          True            45
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;loop-over-dataframe&#34;&gt;Loop over DataFrame&lt;/h3&gt;
&lt;p&gt;Iterating over a Pandas DataFrame is typically done with the &lt;code&gt;iterrows()&lt;/code&gt;  &lt;br&gt;
On every run, a Pandas Series is generated.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for lab, row in cars.iterrows() :
    print(lab)
    print(row)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;US
country         United States
drives_right             True
cars_per_cap              809
Name: US, dtype: object
AUS
country         Australia
drives_right        False
cars_per_cap          731
Name: AUS, dtype: object
JPN
country         Japan
drives_right    False
cars_per_cap      588
Name: JPN, dtype: object
IN
country         India
drives_right    False
cars_per_cap       18
Name: IN, dtype: object
RU
country         Russia
drives_right      True
cars_per_cap       200
Name: RU, dtype: object
MOR
country         Morocco
drives_right       True
cars_per_cap         70
Name: MOR, dtype: object
EG
country         Egypt
drives_right     True
cars_per_cap       45
Name: EG, dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pick a specific element in the series
for lab, row in cars.iterrows() :
    print(lab+&#39;:&#39;+str(row[&#39;cars_per_cap&#39;]))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;US:809
AUS:731
JPN:588
IN:18
RU:200
MOR:70
EG:45
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;add-a-new-column-with-for-loop&#34;&gt;Add a new column with for-loop&lt;/h3&gt;
&lt;p&gt;Adding a new column with for-loop is not very efficient. On every iteration, you&amp;rsquo;re creating a new Pandas Series.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for lab,row in cars.iterrows():
    cars.loc[lab,&#39;COUNTRY&#39;] = row[&#39;country&#39;].upper()
print(cars)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;           country  drives_right  cars_per_cap        COUNTRY
US   United States          True           809  UNITED STATES
AUS      Australia         False           731      AUSTRALIA
JPN          Japan         False           588          JAPAN
IN           India         False            18          INDIA
RU          Russia          True           200         RUSSIA
MOR        Morocco          True            70        MOROCCO
EG           Egypt          True            45          EGYPT
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars2[&#39;COUNTRY&#39;] = cars[&#39;country&#39;].apply(str.upper)
print(cars)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;           country  drives_right  cars_per_cap        COUNTRY
US   United States          True           809  UNITED STATES
AUS      Australia         False           731      AUSTRALIA
JPN          Japan         False           588          JAPAN
IN           India         False            18          INDIA
RU          Russia          True           200         RUSSIA
MOR        Morocco          True            70        MOROCCO
EG           Egypt          True            45          EGYPT
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars2[&#39;Length&#39;] = cars[&#39;country&#39;].apply(len)
print(cars)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;           country  drives_right  cars_per_cap        COUNTRY  Length
US   United States          True           809  UNITED STATES      13
AUS      Australia         False           731      AUSTRALIA       9
JPN          Japan         False           588          JAPAN       5
IN           India         False            18          INDIA       5
RU          Russia          True           200         RUSSIA       6
MOR        Morocco          True            70        MOROCCO       7
EG           Egypt          True            45          EGYPT       5
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Make comnparison histograms</title>
      <link>http://othrif.github.io/technical_note/python/matplotlibtmp/histplot/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlibtmp/histplot/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
import pandas as pd

summer2016 = pd.read_csv(&#39;summer2016.csv&#39;, index_col=0)
mens_rowing = summer2016[summer2016[&#39;Sport&#39;] == &#39;Rowing&#39;]
mens_gymnastics = summer2016[summer2016[&#39;Sport&#39;] == &#39;Gymnastics&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots()

# Plot a histogram of &amp;quot;Weight&amp;quot; for mens_rowing
ax.hist(mens_rowing[&#39;Weight&#39;], label=&#39;Rowing&#39;, histtype=&#39;step&#39;, bins=5)

# Compare to histogram of &amp;quot;Weight&amp;quot; for mens_gymnastics
ax.hist(mens_gymnastics[&#39;Weight&#39;], label=&#39;Gymnastics&#39;, histtype=&#39;step&#39;, bins=5)

ax.set_xlabel(&amp;quot;Weight (kg)&amp;quot;)
ax.set_ylabel(&amp;quot;# of observations&amp;quot;)

# Add the legend and show the Figure
ax.legend()
plt.show()

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;histplot_2_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Make stacked bar plot</title>
      <link>http://othrif.github.io/technical_note/python/matplotlibtmp/stackplot/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlibtmp/stackplot/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
import pandas as pd

medals = pd.read_csv(&#39;medals_by_country_2016.csv&#39;, index_col=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots()

# Add bars for &amp;quot;Gold&amp;quot; with the label &amp;quot;Gold&amp;quot;
ax.bar(medals.index, medals[&#39;Gold&#39;], label=&#39;Gold&#39;)

# Stack bars for &amp;quot;Silver&amp;quot; on top with label &amp;quot;Silver&amp;quot;
ax.bar(medals.index, medals[&#39;Silver&#39;], bottom=medals[&#39;Gold&#39;], label=&#39;Silver&#39;)

# Stack bars for &amp;quot;Bronze&amp;quot; on top of that with label &amp;quot;Bronze&amp;quot;
ax.bar(medals.index, medals[&#39;Bronze&#39;], bottom=medals[&#39;Gold&#39;]+medals[&#39;Silver&#39;], label=&#39;Bronze&#39;)

# Set the x-axis tick labels to the country names
ax.set_xticklabels(medals.index, rotation=90)

# Display the legend
ax.legend()

plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;stackplot_2_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Manipulation, indexing, and slicing</title>
      <link>http://othrif.github.io/technical_note/python/basics/strings/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/strings/</guid>
      <description>&lt;h3 id=&#34;access-elements&#34;&gt;Access elements&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt = &#39;Hello world!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;H&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[4]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;o&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;substrings&#34;&gt;Substrings&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[0:5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Hello&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;backwards&#34;&gt;Backwards&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[-1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[-5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;o&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;skip-over&#34;&gt;Skip over&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[::2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Hlowrd&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;reverse&#34;&gt;Reverse&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt[::-1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;!dlrow olleH&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;concatenation&#34;&gt;Concatenation&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;language = &#39;Python&#39;
language + &#39; is great!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Python is great!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;repetition&#34;&gt;Repetition&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;.&#39;*100
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;....................................................................................................&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;100*&#39;.&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;....................................................................................................&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;length&#34;&gt;Length&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(language)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;escape-characters&#34;&gt;Escape Characters&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;\N{GREEK CAPITAL LETTER DELTA}&#39;)
print(&#39;\u0394&#39;) # unicode 16-bit hex
print(&#39;\U00000394&#39;)# unicode 32-bit hex
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Δ
Δ
Δ
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;txt = &#39;Hello World&#39;
print(f&#39;Particular element: {txt[0]}&#39;)
print(f&#39;substring: {txt[0:5]}&#39;)
print(f&#39;substring: {txt[:5]}&#39;)
print(f&#39;substring: {txt[0:-6]}&#39;)
print(f&#39;substring: {txt[6:]}&#39;)
print(f&#39;skip 2: {txt[::2]}&#39;)
print(f&#39;skip 3: {txt[::3]}&#39;)
print(f&#39;Invert order: {txt[::-1]}&#39;)
print(f&#39;String length: {len(txt)}&#39;)
print(f&#39;Repetition: {&amp;quot;.&amp;quot;*10}&#39;)
print(f&#39;Concatenation: {txt+&amp;quot; from Hamburg!&amp;quot;}&#39;)
print(f&#39;Escape characters...&#39;)
print(f&#39;few examples in this line: \&#39;\&amp;quot;123\b \thorizontal&#39;)
print(f&#39;1234567 carriage return \rXXX&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Particular element: H
substring: Hello
substring: Hello
substring: Hello
substring: World
skip 2: HloWrd
skip 3: HlWl
Invert order: dlroW olleH
String length: 11
Repetition: ..........
Concatenation: Hello World from Hamburg!
Escape characters...
few examples in this line: &#39;&amp;quot;12 	horizontal
XXX4567 carriage return 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;strings-are-immutable&#34;&gt;Strings are immutable&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;language[9]=-1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-45-4d8be7846d5d&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 language[9]=-1


TypeError: &#39;str&#39; object does not support item assignment
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you cannot change the values inside of string&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;~1


&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;-2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Markdown Cheatsheet</title>
      <link>http://othrif.github.io/technical_note/scripting/markdown/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/scripting/markdown/</guid>
      <description>&lt;h1 id=&#34;markdown-cheatsheet&#34;&gt;Markdown Cheatsheet&lt;/h1&gt;
&lt;hr&gt;
&lt;h3 id=&#34;headings-size&#34;&gt;Headings size&lt;/h3&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;Heading 1&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;Markup :  # Heading 1
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;Heading 2&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Markup :  ## Heading 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;heading-3&#34;&gt;Heading 3&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Markup :  ### Heading 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;heading-4&#34;&gt;Heading 4&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Markup :  #### Heading 4
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;heading-5&#34;&gt;Heading 5&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;Markup :  ##### Heading 5
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;heading-6&#34;&gt;Heading 6&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;Markup :  ###### Heading 6
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;text-formatting&#34;&gt;Text formatting&lt;/h3&gt;
&lt;p&gt;Common text&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Markup :  Common text
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Emphasized text&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Markup :  _Emphasized text_ or *Emphasized text*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;del&gt;Strikethrough text&lt;/del&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Markup :  ~~Strikethrough text~~
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Strong text&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Markup :  __Strong text__ or **Strong text**
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Strong emphasized text&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Markup :  ___Strong emphasized text___ or ***Strong emphasized text***
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;lists&#34;&gt;Lists&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Bullet list
&lt;ul&gt;
&lt;li&gt;Nested bullet
&lt;ul&gt;
&lt;li&gt;Sub-nested bullet etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bullet list item 2&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt; Markup : * Bullet list
              * Nested bullet
                  * Sub-nested bullet etc
          * Bullet list item 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;ndash; unordered list&lt;br&gt;
&amp;ndash; unordered list&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Markup: -- unordered list  
        -- unordered list  
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;A numbered list
&lt;ol&gt;
&lt;li&gt;A nested numbered list&lt;/li&gt;
&lt;li&gt;Which is numbered&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Which is numbered&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt; Markup : 1. A numbered list
              1. A nested numbered list
              2. Which is numbered
          2. Which is numbered
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; An uncompleted task&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; A completed task&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt; Markup : - [ ] An uncompleted task
          - [x] A completed task
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;web-links&#34;&gt;Web links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;http://www.google.fr/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Named Link&lt;/a&gt; and &lt;a href=&#34;http://www.google.fr/&#34;&gt;http://www.google.fr/&lt;/a&gt; or &lt;a href=&#34;http://example.com/&#34;&gt;http://example.com/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Markup :  [Named Link](http://www.google.fr/) and http://www.google.fr/ or &amp;lt;http://example.com/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Image with alt :&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;thethaw_header.jpg&#34; alt=&#34;picture alt&#34; title=&#34;Title is optional&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Markup : ![picture alt](thethaw_header.jpg &amp;quot;Title is optional&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;table-formatting&#34;&gt;Table formatting&lt;/h3&gt;
&lt;p&gt;Table, like this one :&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Header&lt;/th&gt;
&lt;th&gt;Second Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code&gt;First Header  | Second Header
------------- | -------------
Content Cell  | Content Cell
Content Cell  | Content Cell
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;code-and-quotes&#34;&gt;Code and quotes&lt;/h3&gt;
&lt;p&gt;Parellel views: &lt;code&gt;right click&lt;/code&gt; + &lt;code&gt;New View for Notebook&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;blockquote&lt;br&gt;
many lines&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nested blockquote&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;Markup :  &amp;gt; Blockquote
          &amp;gt;&amp;gt; Nested Blockquote
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Type some &lt;code&gt;inline code&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Markup :  `code()`
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;code blocks between 3 backticks
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    var specificLanguage_code = 
    {
        &amp;quot;data&amp;quot;: {
            &amp;quot;lookedUpPlatform&amp;quot;: 1,
            &amp;quot;query&amp;quot;: &amp;quot;Kasabian+Test+Transmission&amp;quot;,
            &amp;quot;lookedUpItem&amp;quot;: {
                &amp;quot;name&amp;quot;: &amp;quot;Test Transmission&amp;quot;,
                &amp;quot;artist&amp;quot;: &amp;quot;Kasabian&amp;quot;,
                &amp;quot;album&amp;quot;: &amp;quot;Kasabian&amp;quot;,
                &amp;quot;picture&amp;quot;: null,
                &amp;quot;link&amp;quot;: &amp;quot;http://open.spotify.com/track/5jhJur5n4fasblLSCOcrTp&amp;quot;
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Markup : ```javascript
         ```
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;line&#34;&gt;Line&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Horizontal line :&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;Markup : --- or - - - (latter under title)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;foldable-text&#34;&gt;Foldable text&lt;/h3&gt;
&lt;details&gt;
  &lt;summary&gt;Title 1&lt;/summary&gt;
  &lt;p&gt;Content 1 Content 1 Content 1 Content 1 Content 1&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
  &lt;summary&gt;Title 2&lt;/summary&gt;
  &lt;p&gt;Content 2 Content 2 Content 2 Content 2 Content 2&lt;/p&gt;
&lt;/details&gt;
&lt;pre&gt;&lt;code&gt;Markup : &amp;lt;details&amp;gt;
           &amp;lt;summary&amp;gt;Title 1&amp;lt;/summary&amp;gt;
           &amp;lt;p&amp;gt;Content 1 Content 1 Content 1 Content 1 Content 1&amp;lt;/p&amp;gt;
         &amp;lt;/details&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;keys-and-shortcuts&#34;&gt;Keys and shortcuts&lt;/h3&gt;
&lt;p&gt;&lt;kbd&gt;⌘F&lt;/kbd&gt;&lt;/p&gt;
&lt;p&gt;&lt;kbd&gt;⇧⌘F&lt;/kbd&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Markup : &amp;lt;kbd&amp;gt;⌘F&amp;lt;/kbd&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hotkey list:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Option&lt;/td&gt;
&lt;td&gt;⌥&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Control&lt;/td&gt;
&lt;td&gt;⌃&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Command&lt;/td&gt;
&lt;td&gt;⌘&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift&lt;/td&gt;
&lt;td&gt;⇧&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Caps Lock&lt;/td&gt;
&lt;td&gt;⇪&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tab&lt;/td&gt;
&lt;td&gt;⇥&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Esc&lt;/td&gt;
&lt;td&gt;⎋&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Power&lt;/td&gt;
&lt;td&gt;⌽&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Return&lt;/td&gt;
&lt;td&gt;↩&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Delete&lt;/td&gt;
&lt;td&gt;⌫&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Up&lt;/td&gt;
&lt;td&gt;↑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Down&lt;/td&gt;
&lt;td&gt;↓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Left&lt;/td&gt;
&lt;td&gt;←&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Right&lt;/td&gt;
&lt;td&gt;→&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;emoji&#34;&gt;Emoji&lt;/h3&gt;
&lt;p&gt;❗ Use emoji icons to enhance text. 👍  Look up emoji codes at 
&lt;a href=&#34;http://emoji-cheat-sheet.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;emoji-cheat-sheet.com&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Markup : Code appears between colons :EMOJICODE:
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;math&#34;&gt;Math&lt;/h3&gt;
&lt;p&gt;Some math $\int x^2 dx$&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$\int x^2 dx$ 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Matplotlib with pandas</title>
      <link>http://othrif.github.io/technical_note/python/pandas/plotpandas/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/plotpandas/</guid>
      <description>&lt;h3 id=&#34;get-data-from-csv&#34;&gt;Get data from csv&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
avocados = pd.read_csv(&#39;avocado.csv&#39;,index_col=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;avocados.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Date&lt;/th&gt;
      &lt;th&gt;AveragePrice&lt;/th&gt;
      &lt;th&gt;Total Volume&lt;/th&gt;
      &lt;th&gt;4046&lt;/th&gt;
      &lt;th&gt;4225&lt;/th&gt;
      &lt;th&gt;4770&lt;/th&gt;
      &lt;th&gt;Total Bags&lt;/th&gt;
      &lt;th&gt;Small Bags&lt;/th&gt;
      &lt;th&gt;Large Bags&lt;/th&gt;
      &lt;th&gt;XLarge Bags&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;region&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2015-12-27&lt;/td&gt;
      &lt;td&gt;1.33&lt;/td&gt;
      &lt;td&gt;64236.62&lt;/td&gt;
      &lt;td&gt;1036.74&lt;/td&gt;
      &lt;td&gt;54454.85&lt;/td&gt;
      &lt;td&gt;48.16&lt;/td&gt;
      &lt;td&gt;8696.87&lt;/td&gt;
      &lt;td&gt;8603.62&lt;/td&gt;
      &lt;td&gt;93.25&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;conventional&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;Albany&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2015-12-20&lt;/td&gt;
      &lt;td&gt;1.35&lt;/td&gt;
      &lt;td&gt;54876.98&lt;/td&gt;
      &lt;td&gt;674.28&lt;/td&gt;
      &lt;td&gt;44638.81&lt;/td&gt;
      &lt;td&gt;58.33&lt;/td&gt;
      &lt;td&gt;9505.56&lt;/td&gt;
      &lt;td&gt;9408.07&lt;/td&gt;
      &lt;td&gt;97.49&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;conventional&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;Albany&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2015-12-13&lt;/td&gt;
      &lt;td&gt;0.93&lt;/td&gt;
      &lt;td&gt;118220.22&lt;/td&gt;
      &lt;td&gt;794.70&lt;/td&gt;
      &lt;td&gt;109149.67&lt;/td&gt;
      &lt;td&gt;130.50&lt;/td&gt;
      &lt;td&gt;8145.35&lt;/td&gt;
      &lt;td&gt;8042.21&lt;/td&gt;
      &lt;td&gt;103.14&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;conventional&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;Albany&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2015-12-06&lt;/td&gt;
      &lt;td&gt;1.08&lt;/td&gt;
      &lt;td&gt;78992.15&lt;/td&gt;
      &lt;td&gt;1132.00&lt;/td&gt;
      &lt;td&gt;71976.41&lt;/td&gt;
      &lt;td&gt;72.58&lt;/td&gt;
      &lt;td&gt;5811.16&lt;/td&gt;
      &lt;td&gt;5677.40&lt;/td&gt;
      &lt;td&gt;133.76&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;conventional&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;Albany&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2015-11-29&lt;/td&gt;
      &lt;td&gt;1.28&lt;/td&gt;
      &lt;td&gt;51039.60&lt;/td&gt;
      &lt;td&gt;941.48&lt;/td&gt;
      &lt;td&gt;43838.39&lt;/td&gt;
      &lt;td&gt;75.78&lt;/td&gt;
      &lt;td&gt;6183.95&lt;/td&gt;
      &lt;td&gt;5986.26&lt;/td&gt;
      &lt;td&gt;197.69&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;conventional&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;Albany&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;avocados.columns
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Index([&#39;Date&#39;, &#39;AveragePrice&#39;, &#39;Total Volume&#39;, &#39;4046&#39;, &#39;4225&#39;, &#39;4770&#39;,
       &#39;Total Bags&#39;, &#39;Small Bags&#39;, &#39;Large Bags&#39;, &#39;XLarge Bags&#39;, &#39;type&#39;, &#39;year&#39;,
       &#39;region&#39;],
      dtype=&#39;object&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;plot-data-with-bar&#34;&gt;Plot data with bar&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
# Get the total number of avocados sold of each size
nb_sold_by_type = avocados.groupby(&#39;type&#39;)[&#39;Total Volume&#39;].sum()

# Create a bar plot of the number of avocados sold by size
nb_sold_by_type.plot(kind=&#39;bar&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x1163b2a58&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;plotPandas_6_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;plot-data-with-line&#34;&gt;Plot data with line&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Get the total number of avocados sold on each date
nb_sold_by_date = avocados.groupby(&#39;Date&#39;)[&#39;Total Bags&#39;].sum()

# Create a line plot of the number of avocados sold by date
nb_sold_by_date.plot(kind=&#39;line&#39;)

# Show the plot
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;plotPandas_8_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;plot-with-scatter&#34;&gt;Plot with scatter&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Scatter plot of nb_sold vs avg_price with title
avocados.plot(x=&#39;Total Volume&#39;, y=&#39;AveragePrice&#39;, kind=&#39;scatter&#39;, title=&#39;Number of avocados sold vs. average price&#39;)

# Show the plot
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;plotPandas_10_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;plot-with-histograms&#34;&gt;Plot with histograms&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Histogram of conventional avg_price 
avocados[avocados[&#39;type&#39;]==&#39;conventional&#39;][&#39;AveragePrice&#39;].hist(alpha=0.7, bins=20)

# Histogram of organic avg_price
avocados[avocados[&#39;type&#39;]==&#39;organic&#39;][&#39;AveragePrice&#39;].hist(alpha=0.7, bins=20)

# Add a legend
plt.legend([&#39;conventional&#39;,&#39;organic&#39;])

# Show the plot
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;plotPandas_12_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Merging DataFrames with merge() and join()</title>
      <link>http://othrif.github.io/technical_note/python/pandas/mergingdf/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/mergingdf/</guid>
      <description>&lt;h3 id=&#34;merging-with-specific-columns&#34;&gt;Merging with specific columns&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

gold = pd.read_csv(&#39;SummerOlympic/Gold.csv&#39;)
bronze = pd.read_csv(&#39;SummerOlympic/Bronze.csv&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;gold.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;NOC&lt;/th&gt;
      &lt;th&gt;Country&lt;/th&gt;
      &lt;th&gt;Total&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;USA&lt;/td&gt;
      &lt;td&gt;United States&lt;/td&gt;
      &lt;td&gt;2088.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;URS&lt;/td&gt;
      &lt;td&gt;Soviet Union&lt;/td&gt;
      &lt;td&gt;838.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;GBR&lt;/td&gt;
      &lt;td&gt;United Kingdom&lt;/td&gt;
      &lt;td&gt;498.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;FRA&lt;/td&gt;
      &lt;td&gt;France&lt;/td&gt;
      &lt;td&gt;378.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;GER&lt;/td&gt;
      &lt;td&gt;Germany&lt;/td&gt;
      &lt;td&gt;407.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bronze.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;NOC&lt;/th&gt;
      &lt;th&gt;Country&lt;/th&gt;
      &lt;th&gt;Total&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;USA&lt;/td&gt;
      &lt;td&gt;United States&lt;/td&gt;
      &lt;td&gt;1052.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;URS&lt;/td&gt;
      &lt;td&gt;Soviet Union&lt;/td&gt;
      &lt;td&gt;584.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;GBR&lt;/td&gt;
      &lt;td&gt;United Kingdom&lt;/td&gt;
      &lt;td&gt;505.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;FRA&lt;/td&gt;
      &lt;td&gt;France&lt;/td&gt;
      &lt;td&gt;475.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;GER&lt;/td&gt;
      &lt;td&gt;Germany&lt;/td&gt;
      &lt;td&gt;454.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;combine = pd.merge(gold, bronze, on=[&#39;NOC&#39;,&#39;Country&#39;], suffixes=[&#39;_gold&#39;,&#39;_bronze&#39;])
print(combine)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     NOC               Country  Total_gold  Total_bronze
0    USA         United States      2088.0        1052.0
1    URS          Soviet Union       838.0         584.0
2    GBR        United Kingdom       498.0         505.0
3    FRA                France       378.0         475.0
4    GER               Germany       407.0         454.0
..   ...                   ...         ...           ...
133  SEN               Senegal         NaN           NaN
134  SUD                 Sudan         NaN           NaN
135  TGA                 Tonga         NaN           NaN
136  BDI               Burundi         1.0           NaN
137  UAE  United Arab Emirates         1.0           NaN

[138 rows x 4 columns]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;merging-on-columns-with-non-matching-labelsspecifying-columns-to-merge&#34;&gt;Merging on columns with non-matching labelsSpecifying columns to merge&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;revenue = pd.read_csv(&#39;Sales/revenue.csv&#39;, delim_whitespace=True)
managers = pd.read_csv(&#39;Sales/managers.csv&#39;, delim_whitespace=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;revenue
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;city&lt;/th&gt;
      &lt;th&gt;branch_id&lt;/th&gt;
      &lt;th&gt;state&lt;/th&gt;
      &lt;th&gt;revenue&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Austin&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;TX&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Denver&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;CO&lt;/td&gt;
      &lt;td&gt;83&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Springfield&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;IL&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Mendocino&lt;/td&gt;
      &lt;td&gt;47&lt;/td&gt;
      &lt;td&gt;CA&lt;/td&gt;
      &lt;td&gt;200&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;managers
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;branch&lt;/th&gt;
      &lt;th&gt;branch_id&lt;/th&gt;
      &lt;th&gt;state&lt;/th&gt;
      &lt;th&gt;manager&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Austin&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;TX&lt;/td&gt;
      &lt;td&gt;Charlers&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Denver&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;CO&lt;/td&gt;
      &lt;td&gt;Joel&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Mendocino&lt;/td&gt;
      &lt;td&gt;47&lt;/td&gt;
      &lt;td&gt;CA&lt;/td&gt;
      &lt;td&gt;Brett&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Springfield&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;MO&lt;/td&gt;
      &lt;td&gt;Sally&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;combine = pd.merge(revenue, managers, left_on=&#39;city&#39;, right_on=&#39;branch&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;combine
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;city&lt;/th&gt;
      &lt;th&gt;branch_id_x&lt;/th&gt;
      &lt;th&gt;state_x&lt;/th&gt;
      &lt;th&gt;revenue&lt;/th&gt;
      &lt;th&gt;branch&lt;/th&gt;
      &lt;th&gt;branch_id_y&lt;/th&gt;
      &lt;th&gt;state_y&lt;/th&gt;
      &lt;th&gt;manager&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Austin&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;TX&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;Austin&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;TX&lt;/td&gt;
      &lt;td&gt;Charlers&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Denver&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;CO&lt;/td&gt;
      &lt;td&gt;83&lt;/td&gt;
      &lt;td&gt;Denver&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;CO&lt;/td&gt;
      &lt;td&gt;Joel&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Springfield&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;IL&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Springfield&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;MO&lt;/td&gt;
      &lt;td&gt;Sally&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Mendocino&lt;/td&gt;
      &lt;td&gt;47&lt;/td&gt;
      &lt;td&gt;CA&lt;/td&gt;
      &lt;td&gt;200&lt;/td&gt;
      &lt;td&gt;Mendocino&lt;/td&gt;
      &lt;td&gt;47&lt;/td&gt;
      &lt;td&gt;CA&lt;/td&gt;
      &lt;td&gt;Brett&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;merging-with-innerouter-join&#34;&gt;Merging with inner/outer join&lt;/h3&gt;
&lt;p&gt;inner join is the default behavior.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;gold = gold.sort_values(&#39;Total&#39;,ascending=False).iloc[:5]
bronze = bronze.sort_values(&#39;Total&#39;,ascending=False).iloc[:5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;combine = pd.merge(gold, bronze, on=[&#39;NOC&#39;,&#39;Country&#39;], suffixes=[&#39;_gold&#39;,&#39;_bronze&#39;], how=&#39;inner&#39;)
print(combine.head())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   NOC         Country  Total_gold  Total_bronze
0  USA   United States      2088.0        1052.0
1  URS    Soviet Union       838.0         584.0
2  GBR  United Kingdom       498.0         505.0
3  GER         Germany       407.0         454.0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;combine = pd.merge(gold, bronze, on=[&#39;NOC&#39;,&#39;Country&#39;], suffixes=[&#39;_gold&#39;,&#39;_bronze&#39;], how=&#39;outer&#39;)
print(combine.head())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   NOC         Country  Total_gold  Total_bronze
0  USA   United States      2088.0        1052.0
1  URS    Soviet Union       838.0         584.0
2  GBR  United Kingdom       498.0         505.0
3  ITA           Italy       460.0           NaN
4  GER         Germany       407.0         454.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;merging-with-leftright-join-default&#34;&gt;Merging with left/right join (Default)&lt;/h3&gt;
&lt;p&gt;Notice that Italy was picked up from &lt;code&gt;gold&lt;/code&gt; but since it does not appear in &lt;code&gt;bronze&lt;/code&gt;, it gets a Not a Number (NaN) value.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;combine = pd.merge(gold, bronze, on=[&#39;NOC&#39;,&#39;Country&#39;], suffixes=[&#39;_gold&#39;,&#39;_bronze&#39;], how=&#39;left&#39;)
print(combine.head())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   NOC         Country  Total_gold  Total_bronze
0  USA   United States      2088.0        1052.0
1  URS    Soviet Union       838.0         584.0
2  GBR  United Kingdom       498.0         505.0
3  ITA           Italy       460.0           NaN
4  GER         Germany       407.0         454.0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;combine = pd.merge(gold, bronze, on=[&#39;NOC&#39;,&#39;Country&#39;], suffixes=[&#39;_gold&#39;,&#39;_bronze&#39;], how=&#39;right&#39;)
print(combine.head())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   NOC         Country  Total_gold  Total_bronze
0  USA   United States      2088.0        1052.0
1  URS    Soviet Union       838.0         584.0
2  GBR  United Kingdom       498.0         505.0
3  GER         Germany       407.0         454.0
4  FRA          France         NaN         475.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-join&#34;&gt;Using .join()&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;gold
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;NOC&lt;/th&gt;
      &lt;th&gt;Country&lt;/th&gt;
      &lt;th&gt;Total&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;USA&lt;/td&gt;
      &lt;td&gt;United States&lt;/td&gt;
      &lt;td&gt;2088.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;URS&lt;/td&gt;
      &lt;td&gt;Soviet Union&lt;/td&gt;
      &lt;td&gt;838.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;GBR&lt;/td&gt;
      &lt;td&gt;United Kingdom&lt;/td&gt;
      &lt;td&gt;498.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;ITA&lt;/td&gt;
      &lt;td&gt;Italy&lt;/td&gt;
      &lt;td&gt;460.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;GER&lt;/td&gt;
      &lt;td&gt;Germany&lt;/td&gt;
      &lt;td&gt;407.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bronze
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;NOC&lt;/th&gt;
      &lt;th&gt;Country&lt;/th&gt;
      &lt;th&gt;Total&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;USA&lt;/td&gt;
      &lt;td&gt;United States&lt;/td&gt;
      &lt;td&gt;1052.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;URS&lt;/td&gt;
      &lt;td&gt;Soviet Union&lt;/td&gt;
      &lt;td&gt;584.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;GBR&lt;/td&gt;
      &lt;td&gt;United Kingdom&lt;/td&gt;
      &lt;td&gt;505.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;FRA&lt;/td&gt;
      &lt;td&gt;France&lt;/td&gt;
      &lt;td&gt;475.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;GER&lt;/td&gt;
      &lt;td&gt;Germany&lt;/td&gt;
      &lt;td&gt;454.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;gold.join(bronze, lsuffix=&#39;_gold&#39;, rsuffix=&#39;_bronze&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;NOC_gold&lt;/th&gt;
      &lt;th&gt;Country_gold&lt;/th&gt;
      &lt;th&gt;Total_gold&lt;/th&gt;
      &lt;th&gt;NOC_bronze&lt;/th&gt;
      &lt;th&gt;Country_bronze&lt;/th&gt;
      &lt;th&gt;Total_bronze&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;USA&lt;/td&gt;
      &lt;td&gt;United States&lt;/td&gt;
      &lt;td&gt;2088.0&lt;/td&gt;
      &lt;td&gt;USA&lt;/td&gt;
      &lt;td&gt;United States&lt;/td&gt;
      &lt;td&gt;1052.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;URS&lt;/td&gt;
      &lt;td&gt;Soviet Union&lt;/td&gt;
      &lt;td&gt;838.0&lt;/td&gt;
      &lt;td&gt;URS&lt;/td&gt;
      &lt;td&gt;Soviet Union&lt;/td&gt;
      &lt;td&gt;584.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;GBR&lt;/td&gt;
      &lt;td&gt;United Kingdom&lt;/td&gt;
      &lt;td&gt;498.0&lt;/td&gt;
      &lt;td&gt;GBR&lt;/td&gt;
      &lt;td&gt;United Kingdom&lt;/td&gt;
      &lt;td&gt;505.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;ITA&lt;/td&gt;
      &lt;td&gt;Italy&lt;/td&gt;
      &lt;td&gt;460.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;GER&lt;/td&gt;
      &lt;td&gt;Germany&lt;/td&gt;
      &lt;td&gt;407.0&lt;/td&gt;
      &lt;td&gt;GER&lt;/td&gt;
      &lt;td&gt;Germany&lt;/td&gt;
      &lt;td&gt;454.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h4 id=&#34;left--right-merging-on-multiple-columns&#34;&gt;Left &amp;amp; right merging on multiple columns&lt;/h4&gt;
&lt;p&gt;In addition to the revenue and managers DataFrames from prior exercises, you have a DataFrame sales that summarizes units sold from specific branches (identified by city and state but not branch_id).&lt;/p&gt;
&lt;p&gt;Once again, the managers DataFrame uses the label branch in place of city as in the other two DataFrames. Your task here is to employ left and right merges to preserve data and identify where data is missing.&lt;/p&gt;
&lt;p&gt;By merging revenue and sales with a right merge, you can identify the missing revenue values. Here, you don&amp;rsquo;t need to specify left_on or right_on because the columns to merge on have matching labels.&lt;/p&gt;
&lt;p&gt;By merging sales and managers with a left merge, you can identify the missing manager. Here, the columns to merge on have conflicting labels, so you must specify left_on and right_on. In both cases, you&amp;rsquo;re looking to figure out how to connect the fields in rows containing Springfield.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

revenue = pd.read_csv(&#39;Sales/revenue.csv&#39;, delim_whitespace=True)
managers = pd.read_csv(&#39;Sales/managers.csv&#39;, delim_whitespace=True)
sales = pd.read_csv(&#39;Sales/sales.csv&#39;, delim_whitespace=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;revenue.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;city&lt;/th&gt;
      &lt;th&gt;branch_id&lt;/th&gt;
      &lt;th&gt;state&lt;/th&gt;
      &lt;th&gt;revenue&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Austin&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;TX&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Denver&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;CO&lt;/td&gt;
      &lt;td&gt;83&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Springfield&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;IL&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Mendocino&lt;/td&gt;
      &lt;td&gt;47&lt;/td&gt;
      &lt;td&gt;CA&lt;/td&gt;
      &lt;td&gt;200&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;managers.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;branch&lt;/th&gt;
      &lt;th&gt;branch_id&lt;/th&gt;
      &lt;th&gt;state&lt;/th&gt;
      &lt;th&gt;manager&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Austin&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;TX&lt;/td&gt;
      &lt;td&gt;Charlers&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Denver&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;CO&lt;/td&gt;
      &lt;td&gt;Joel&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Mendocino&lt;/td&gt;
      &lt;td&gt;47&lt;/td&gt;
      &lt;td&gt;CA&lt;/td&gt;
      &lt;td&gt;Brett&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Springfield&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;MO&lt;/td&gt;
      &lt;td&gt;Sally&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sales.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;city&lt;/th&gt;
      &lt;th&gt;state&lt;/th&gt;
      &lt;th&gt;units&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Mendocino&lt;/td&gt;
      &lt;td&gt;CA&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Denver&lt;/td&gt;
      &lt;td&gt;CO&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Austin&lt;/td&gt;
      &lt;td&gt;TX&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Springfield&lt;/td&gt;
      &lt;td&gt;MO&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Springfield&lt;/td&gt;
      &lt;td&gt;IL&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Merge revenue and sales: revenue_and_sales
revenue_and_sales = pd.merge(revenue,sales, how=&#39;right&#39;, on=[&#39;city&#39;,&#39;state&#39;])

# Print revenue_and_sales
print(revenue_and_sales)

# Merge sales and managers: sales_and_managers
sales_and_managers = pd.merge(sales, managers, how=&#39;left&#39;, left_on=[&#39;city&#39;,&#39;state&#39;], right_on=[&#39;branch&#39;,&#39;state&#39;])

# Print sales_and_managers
print(sales_and_managers)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;          city  branch_id state  revenue  units
0       Austin       10.0    TX    100.0      2
1       Denver       20.0    CO     83.0      4
2  Springfield       30.0    IL      4.0      1
3    Mendocino       47.0    CA    200.0      1
4  Springfield        NaN    MO      NaN      5
          city state  units       branch  branch_id   manager
0    Mendocino    CA      1    Mendocino       47.0     Brett
1       Denver    CO      4       Denver       20.0      Joel
2       Austin    TX      2       Austin       10.0  Charlers
3  Springfield    MO      5  Springfield       31.0     Sally
4  Springfield    IL      1          NaN        NaN       NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;special-care-needed-with-innerouter-join&#34;&gt;Special care needed with inner/outer join&lt;/h3&gt;
&lt;p&gt;Notice how the default merge drops the Springfield rows, while the default outer merge includes them twice.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Perform the first merge: merge_default
merge_default = pd.merge(sales_and_managers, revenue_and_sales)

# Print merge_default
print(merge_default)

# Perform the second merge: merge_outer
merge_outer = pd.merge(sales_and_managers, revenue_and_sales, how=&#39;outer&#39;)

# Print merge_outer
print(merge_outer)

# Perform the third merge: merge_outer_on
merge_outer_on = pd.merge(sales_and_managers, revenue_and_sales, how=&#39;outer&#39;, on=[&#39;city&#39;,&#39;state&#39;])

# Print merge_outer_on
print(merge_outer_on)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;        city state  units     branch  branch_id   manager  revenue
0  Mendocino    CA      1  Mendocino       47.0     Brett    200.0
1     Denver    CO      4     Denver       20.0      Joel     83.0
2     Austin    TX      2     Austin       10.0  Charlers    100.0
          city state  units       branch  branch_id   manager  revenue
0    Mendocino    CA      1    Mendocino       47.0     Brett    200.0
1       Denver    CO      4       Denver       20.0      Joel     83.0
2       Austin    TX      2       Austin       10.0  Charlers    100.0
3  Springfield    MO      5  Springfield       31.0     Sally      NaN
4  Springfield    IL      1          NaN        NaN       NaN      NaN
5  Springfield    IL      1          NaN       30.0       NaN      4.0
6  Springfield    MO      5          NaN        NaN       NaN      NaN
          city state  units_x       branch  branch_id_x   manager  \
0    Mendocino    CA        1    Mendocino         47.0     Brett   
1       Denver    CO        4       Denver         20.0      Joel   
2       Austin    TX        2       Austin         10.0  Charlers   
3  Springfield    MO        5  Springfield         31.0     Sally   
4  Springfield    IL        1          NaN          NaN       NaN   

   branch_id_y  revenue  units_y  
0         47.0    200.0        1  
1         20.0     83.0        4  
2         10.0    100.0        2  
3          NaN      NaN        5  
4         30.0      4.0        1  
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Method belonging to a class object</title>
      <link>http://othrif.github.io/technical_note/python/basics/class_method/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/class_method/</guid>
      <description>&lt;h1 id=&#34;working-with-class-and-methods&#34;&gt;Working with Class and methods&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Vehicle:
  def __init__(self,color):
    self.color=color
  def start(self):
    print(&amp;quot;Starting engine&amp;quot;)
  def showcolor(self):
    print(f&amp;quot;I am {self.color}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;car=Vehicle(&#39;black&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;car.start()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Starting engine
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;car.showcolor()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;I am black
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyCounter:
    &amp;quot;&amp;quot;&amp;quot;Here is the doc string!&amp;quot;&amp;quot;&amp;quot;
    def __init__(self, n=10):
        self.count = n
        
    def set_count(self,n):
        print()

me = MyCounter()
me.set_count(10)
print(me.count)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;10
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Missing data with pandas</title>
      <link>http://othrif.github.io/technical_note/python/pandas/missingdata/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/missingdata/</guid>
      <description>&lt;p&gt;This deals with &lt;code&gt;NaN&lt;/code&gt; = Not a Number&lt;/p&gt;
&lt;h3 id=&#34;get-data-from-csv&#34;&gt;Get data from csv&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
avocados = pd.read_csv(&#39;avocado.csv&#39;,index_col=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;artifically-delete-some-data&#34;&gt;artifically delete some data&lt;/h3&gt;
&lt;p&gt;Delete 100 &lt;code&gt;AveragePrice&lt;/code&gt; values at random rows&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
for i in range(100):
    idx=np.random.randint(0,avocados.shape[0])
    avocados.iloc[idx,1]=np.NaN
    avocados.iloc[idx,-4]=np.NaN

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;check-for-missing-values-with-isna&#34;&gt;Check for missing values with &lt;code&gt;isna()&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;avocados.isna()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Date&lt;/th&gt;
      &lt;th&gt;AveragePrice&lt;/th&gt;
      &lt;th&gt;Total Volume&lt;/th&gt;
      &lt;th&gt;4046&lt;/th&gt;
      &lt;th&gt;4225&lt;/th&gt;
      &lt;th&gt;4770&lt;/th&gt;
      &lt;th&gt;Total Bags&lt;/th&gt;
      &lt;th&gt;Small Bags&lt;/th&gt;
      &lt;th&gt;Large Bags&lt;/th&gt;
      &lt;th&gt;XLarge Bags&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;region&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;11&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;18249 rows × 13 columns&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&#34;add-any&#34;&gt;Add &lt;code&gt;any()&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;avocados.isna().any()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Date            False
AveragePrice     True
Total Volume    False
4046            False
4225            False
4770            False
Total Bags      False
Small Bags      False
Large Bags      False
XLarge Bags      True
type            False
year            False
region          False
dtype: bool
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;use-counts&#34;&gt;Use counts&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;avocados.isna().sum()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Date              0
AveragePrice    100
Total Volume      0
4046              0
4225              0
4770              0
Total Bags        0
Small Bags        0
Large Bags        0
XLarge Bags     100
type              0
year              0
region            0
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;plot-it&#34;&gt;Plot it!&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
avocados.isna().sum().plot(kind=&#39;bar&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;missingdata_13_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;remove-the-rows-that-have-nan&#34;&gt;Remove the rows that have NaN&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;avocados.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(18249, 13)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;avocados_drop=avocados.dropna()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;avocados_drop.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(18149, 13)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;replace-the-nan-with-a-value&#34;&gt;Replace the NaN with a value&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;avocados_rep=avocados.fillna(0)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;avocados_rep.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(18249, 13)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Modifying variables outside local scope: global, nonlocal</title>
      <link>http://othrif.github.io/technical_note/python/basics/function_scope/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/function_scope/</guid>
      <description>&lt;h3 id=&#34;global&#34;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Sometimes your functions will need to modify a variable that is outside of the local scope of that function. While it&amp;rsquo;s generally not best practice to do so, it&amp;rsquo;s still good to know-how in case you need to do it. Update these functions so they can modify variables that would usually be outside of their scope.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;call_count = 0

def my_function():
  # Use a keyword that lets us update call_count 
  global call_count
  call_count += 1
  
  print(&amp;quot;You&#39;ve called my_function() {} times!&amp;quot;.format(
    call_count
  ))
  
for _ in range(20):
  my_function()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;You&#39;ve called my_function() 1 times!
You&#39;ve called my_function() 2 times!
You&#39;ve called my_function() 3 times!
You&#39;ve called my_function() 4 times!
You&#39;ve called my_function() 5 times!
You&#39;ve called my_function() 6 times!
You&#39;ve called my_function() 7 times!
You&#39;ve called my_function() 8 times!
You&#39;ve called my_function() 9 times!
You&#39;ve called my_function() 10 times!
You&#39;ve called my_function() 11 times!
You&#39;ve called my_function() 12 times!
You&#39;ve called my_function() 13 times!
You&#39;ve called my_function() 14 times!
You&#39;ve called my_function() 15 times!
You&#39;ve called my_function() 16 times!
You&#39;ve called my_function() 17 times!
You&#39;ve called my_function() 18 times!
You&#39;ve called my_function() 19 times!
You&#39;ve called my_function() 20 times!
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;nonlocal&#34;&gt;&lt;code&gt;nonlocal&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def read_files():
  file_contents = None
  
  def save_contents(filename):
    # Add a keyword that lets us modify file_contents
    nonlocal file_contents
    if file_contents is None:
      file_contents = []
    with open(filename) as fin:
      file_contents.append(fin.read())
      
  for filename in [&#39;1984.txt&#39;, &#39;MobyDick.txt&#39;, &#39;CatsEye.txt&#39;]:
    save_contents(filename)
    
  return file_contents
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Music recommender system with full pipeline</title>
      <link>http://othrif.github.io/technical_note/python/sklearn/recommender/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/sklearn/recommender/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
from scipy.sparse import csr_matrix
df = pd.read_csv(&#39;artists/scrobbler-small-sample.csv&#39;, index_col=0)
artists = csr_matrix(df.transpose())
artist_names = [x.strip(&#39;\n&#39;).split(&#39; &#39;)[0] for x in open(&#39;artists/artists.csv&#39;).readlines()]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;computed the normalized NMF features:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Perform the necessary imports
from sklearn.decomposition import NMF
from sklearn.preprocessing import Normalizer, MaxAbsScaler
from sklearn.pipeline import make_pipeline

# Create a MaxAbsScaler: scaler
scaler = MaxAbsScaler()

# Create an NMF model: nmf
nmf = NMF(n_components=20)

# Create a Normalizer: normalizer
normalizer = Normalizer()

# Create a pipeline: pipeline
pipeline = make_pipeline(scaler, nmf, normalizer)

# Apply fit_transform to artists: norm_features
norm_features = pipeline.fit_transform(artists)
norm_features
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[0.00000000e+00, 0.00000000e+00, 4.34316939e-01, 2.88405912e-01,
        3.35804758e-01, 0.00000000e+00, 9.58344722e-02, 4.31840755e-01,
        2.20635850e-01, 1.32500967e-01, 2.21954101e-01, 0.00000000e+00,
        0.00000000e+00, 1.91923347e-01, 3.10995073e-01, 8.17897722e-02,
        3.94469409e-02, 2.29707948e-01, 2.94175098e-01, 1.52158259e-01],
       [8.96329209e-01, 3.05802585e-01, 5.40945254e-02, 4.56602807e-02,
        8.00709336e-02, 1.50733837e-01, 6.70677029e-03, 2.80649683e-04,
        3.77263930e-02, 4.57270986e-02, 3.64936967e-02, 1.18623583e-01,
        1.46168774e-01, 1.33650249e-01, 3.53962415e-02, 2.21133351e-02,
        7.07914479e-02, 1.96741509e-02, 0.00000000e+00, 6.00404816e-02]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import pandas
import pandas as pd

# Create a DataFrame: df
df = pd.DataFrame(norm_features, index=artist_names)
display(df)
# Select row of &#39;Bruce Springsteen&#39;: artist
artist = df.loc[&#39;Bruce Springsteen&#39;]

# Compute cosine similarities: similarities
similarities = df.dot(artist)

# Display those with highest cosine similarity
print(similarities.nlargest())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

~/Library/Python/3.7/lib/python/site-packages/pandas/core/internals/managers.py in create_block_manager_from_blocks(blocks, axes)
   1656 
-&amp;gt; 1657         mgr = BlockManager(blocks, axes)
   1658         mgr._consolidate_inplace()


~/Library/Python/3.7/lib/python/site-packages/pandas/core/internals/managers.py in __init__(self, blocks, axes, do_integrity_check)
    138         if do_integrity_check:
--&amp;gt; 139             self._verify_integrity()
    140 


~/Library/Python/3.7/lib/python/site-packages/pandas/core/internals/managers.py in _verify_integrity(self)
    333             if block._verify_integrity and block.shape[1:] != mgr_shape[1:]:
--&amp;gt; 334                 construction_error(tot_items, block.shape[1:], self.axes)
    335         if len(self.items) != tot_items:


~/Library/Python/3.7/lib/python/site-packages/pandas/core/internals/managers.py in construction_error(tot_items, block_shape, axes, e)
   1693         raise ValueError(&amp;quot;Empty data passed with indices specified.&amp;quot;)
-&amp;gt; 1694     raise ValueError(f&amp;quot;Shape of passed values is {passed}, indices imply {implied}&amp;quot;)
   1695 


ValueError: Shape of passed values is (2, 20), indices imply (111, 20)


During handling of the above exception, another exception occurred:


ValueError                                Traceback (most recent call last)

&amp;lt;ipython-input-218-62a834bc3aab&amp;gt; in &amp;lt;module&amp;gt;
      3 
      4 # Create a DataFrame: df
----&amp;gt; 5 df = pd.DataFrame(norm_features, index=artist_names)
      6 display(df)


~/Library/Python/3.7/lib/python/site-packages/pandas/core/frame.py in __init__(self, data, index, columns, dtype, copy)
    462                 mgr = init_dict({data.name: data}, index, columns, dtype=dtype)
    463             else:
--&amp;gt; 464                 mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)
    465 
    466         # For data is list-like, or Iterable (will consume into list)


~/Library/Python/3.7/lib/python/site-packages/pandas/core/internals/construction.py in init_ndarray(values, index, columns, dtype, copy)
    208         block_values = [values]
    209 
--&amp;gt; 210     return create_block_manager_from_blocks(block_values, [columns, index])
    211 
    212 


~/Library/Python/3.7/lib/python/site-packages/pandas/core/internals/managers.py in create_block_manager_from_blocks(blocks, axes)
   1662         blocks = [getattr(b, &amp;quot;values&amp;quot;, b) for b in blocks]
   1663         tot_items = sum(b.shape[0] for b in blocks)
-&amp;gt; 1664         construction_error(tot_items, blocks[0].shape[1:], axes, e)
   1665 
   1666 


~/Library/Python/3.7/lib/python/site-packages/pandas/core/internals/managers.py in construction_error(tot_items, block_shape, axes, e)
   1692     if block_shape[0] == 0:
   1693         raise ValueError(&amp;quot;Empty data passed with indices specified.&amp;quot;)
-&amp;gt; 1694     raise ValueError(f&amp;quot;Shape of passed values is {passed}, indices imply {implied}&amp;quot;)
   1695 
   1696 


ValueError: Shape of passed values is (2, 20), indices imply (111, 20)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Nested functions, keyword nonlocal</title>
      <link>http://othrif.github.io/technical_note/python/basics/nested/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/nested/</guid>
      <description>&lt;h3 id=&#34;nested-function&#34;&gt;Nested function&lt;/h3&gt;
&lt;p&gt;To avoid writing out the same computations within functions repeatedly.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def three_shouts(word1, word2, word3):
    &amp;quot;&amp;quot;&amp;quot;Returns a tuple of strings
    concatenated with &#39;!!!&#39;.&amp;quot;&amp;quot;&amp;quot;

    # Define inner
    def inner(word):
        &amp;quot;&amp;quot;&amp;quot;Returns a string concatenated with &#39;!!!&#39;.&amp;quot;&amp;quot;&amp;quot;
        return word + &#39;!!!&#39;

    # Return a tuple of strings
    return (inner(word1), inner(word2), inner(word3))

print(three_shouts(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(&#39;a!!!&#39;, &#39;b!!!&#39;, &#39;c!!!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;closure&#34;&gt;Closure&lt;/h3&gt;
&lt;p&gt;The nested or inner function remembers the state of its enclosing scope when called. Thus, anything defined locally in the enclosing scope is available to the inner function even when the outer function has finished execution.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def echo(n):
    &amp;quot;&amp;quot;&amp;quot;Return the inner_echo function.&amp;quot;&amp;quot;&amp;quot;

    def inner_echo(word1):
        &amp;quot;&amp;quot;&amp;quot;Concatenate n copies of word1.&amp;quot;&amp;quot;&amp;quot;
        echo_word = word1 * n
        return echo_word

    return inner_echo

# Call echo: twice
twice = echo(2)

# Call echo: thrice
thrice = echo(3)

# Call twice() and thrice() then print
print(twice(&#39;hello&#39;), thrice(&#39;hello&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;hellohello hellohellohello
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;keyword-nonlocal&#34;&gt;Keyword &lt;code&gt;nonlocal&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;nonlocal within a nested function alters the value of a variable defined in the enclosing scope&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Define echo_shout()
def echo_shout(word):
    &amp;quot;&amp;quot;&amp;quot;Change the value of a nonlocal variable&amp;quot;&amp;quot;&amp;quot;
    
    # Concatenate word with itself: echo_word
    echo_word = word+word
    
    # Print echo_word
    print(echo_word)
    
    # Define inner function shout()
    def shout():
        &amp;quot;&amp;quot;&amp;quot;Alter a variable in the enclosing scope&amp;quot;&amp;quot;&amp;quot;    
        # Use echo_word in nonlocal scope
        nonlocal echo_word
        
        # Change echo_word to echo_word concatenated with &#39;!!!&#39;
        echo_word = word
    
    # Call function shout()
    shout()
    
    # Print echo_word
    print(echo_word)

# Call function echo_shout() with argument &#39;hello&#39;
echo_shout(&#39;hello&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;hellohello
hello
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Numpy summary statistics</title>
      <link>http://othrif.github.io/technical_note/python/matplotlib/stat/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlib/stat/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;generate-some-data&#34;&gt;Generate some data&lt;/h3&gt;
&lt;p&gt;Randomly sample from a nomral distribution 5000 times with give mean and standard deviation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;height = np.round(np.random.normal(1.75, 0.20, 5000), 2)
weight = np.round(np.random.normal(60.32, 15, 5000), 2)
np_city = np.column_stack((height, weight))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np_city.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(5000, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;basics-staistics&#34;&gt;Basics staistics&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.round(np.mean(np_city[:,0]),2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1.75
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.round(np.mean(np_city[:,1]),2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;60.43
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(np.round(np.mean(np_city,axis=0),2))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[ 1.75 60.43]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(np.round(np.median(np_city,axis=0),2))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[ 1.76 60.56]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(np.round(np.std(np_city,axis=0),2))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[ 0.2  14.84]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;correlation-coefficient&#34;&gt;Correlation coefficient&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.corrcoef(np_city[:,0], np_city[:,1])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1.        , 0.00446188],
       [0.00446188, 1.        ]])
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Numpy summary statistics</title>
      <link>http://othrif.github.io/technical_note/python/numpy/stat/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/numpy/stat/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;generate-some-data&#34;&gt;Generate some data&lt;/h3&gt;
&lt;p&gt;Randomly sample from a nomral distribution 5000 times with give mean and standard deviation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;height = np.round(np.random.normal(1.75, 0.20, 5000), 2)
weight = np.round(np.random.normal(60.32, 15, 5000), 2)
np_city = np.column_stack((height, weight))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np_city.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(5000, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;basics-staistics&#34;&gt;Basics staistics&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.round(np.mean(np_city[:,0]),2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1.75
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.round(np.mean(np_city[:,1]),2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;60.43
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(np.round(np.mean(np_city,axis=0),2))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[ 1.75 60.43]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(np.round(np.median(np_city,axis=0),2))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[ 1.76 60.56]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(np.round(np.std(np_city,axis=0),2))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[ 0.2  14.84]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;correlation-coefficient&#34;&gt;Correlation coefficient&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.corrcoef(np_city[:,0], np_city[:,1])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1.        , 0.00446188],
       [0.00446188, 1.        ]])
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Numpy syntax</title>
      <link>http://othrif.github.io/technical_note/python/matplotlib/syntax/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlib/syntax/</guid>
      <description>&lt;h3 id=&#34;numpy-array-data-structure&#34;&gt;NumPy array data structure&lt;/h3&gt;
&lt;p&gt;Python interface for working with multi-dimensional array data structures efficiently&lt;br&gt;
NumPy array data structure is called &lt;code&gt;ndarray&lt;/code&gt;, which is short for n-dimensional array&lt;/p&gt;
&lt;h3 id=&#34;advantage&#34;&gt;Advantage&lt;/h3&gt;
&lt;p&gt;NumPy arrays use contiguous blocks of memory that can be efficiently cached by the CPU. While Python lists are arrays of pointers to objects in random locations in memory, leading to a more expensive memory-look-up.&lt;/p&gt;
&lt;h3 id=&#34;disadvantage&#34;&gt;Disadvantage&lt;/h3&gt;
&lt;p&gt;NumPy arrays have a fixed size and are homogenous, which means that all elements must have the same type&lt;br&gt;
Adding and removing elements from the end of a Python list is very efficient, altering the size of a NumPy array is very expensive since it requires creating a new array and carrying over the contents of the old array&lt;/p&gt;
&lt;h3 id=&#34;n-dimenstional-arrays&#34;&gt;N-dimenstional Arrays&lt;/h3&gt;
&lt;p&gt;NumPy arrays can have up to 32 dimensions&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;array-function&#34;&gt;&lt;code&gt;array&lt;/code&gt; function&lt;/h4&gt;
&lt;p&gt;Create a NumPy array from a list of lists&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lstint = [[1,2,3],
      [4,5,6]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2dint = np.array(lstint)
ary2dint
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6]])
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;data-type-function-dtype&#34;&gt;Data type function &lt;code&gt;dtype&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;All data types defined here: &lt;a href=&#34;https://numpy.org/doc/stable/user/basics.types.html&#34;&gt;https://numpy.org/doc/stable/user/basics.types.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2dint.dtype
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dtype(&#39;int64&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Numpy array sees what type will work for all elements of the list before creating it&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lstfloat = [[1,2.3,3],
      [4,5,6]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2df = np.array(lstfloat)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2df.dtype
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dtype(&#39;float64&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cast-array-type-with-astype&#34;&gt;Cast array type with &lt;code&gt;astype&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2dint.dtype
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dtype(&#39;int64&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2dintTOfloat = ary2dint.astype(np.float)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2dintTOfloat.dtype
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dtype(&#39;float64&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;size-in-byte-with-itemsize&#34;&gt;Size in byte with &lt;code&gt;itemsize&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Returns size of each element in the array (remember that ndarrays are homogeneous)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2dintTOfloat.itemsize
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;each element takes up 8 bytes * 8 bits/byte = 64 bits in memory&lt;/p&gt;
&lt;h4 id=&#34;size-of-array-with-size&#34;&gt;Size of array with &lt;code&gt;size&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2dintTOfloat.size
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;dimension-of-array-with-ndim&#34;&gt;Dimension of array with &lt;code&gt;ndim&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;number of dimensions of an array, similar to a rank of a tensor&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2dintTOfloat.ndim
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;elements-of-each-dim-with-shape&#34;&gt;Elements of each dim with &lt;code&gt;shape&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;number of elements along each array dimension (in the context of NumPy arrays, we may also refer to them as axes)&lt;br&gt;
Returns a tuple &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary_shape = ary2dintTOfloat.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(ary_shape)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.array([1, 2, 3]).shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(3,)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;scalar = np.array(5)
scalar
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array(5)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Numpy syntax</title>
      <link>http://othrif.github.io/technical_note/python/numpy/syntax/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/numpy/syntax/</guid>
      <description>&lt;h3 id=&#34;numpy-array-data-structure&#34;&gt;NumPy array data structure&lt;/h3&gt;
&lt;p&gt;Python interface for working with multi-dimensional array data structures efficiently&lt;br&gt;
NumPy array data structure is called &lt;code&gt;ndarray&lt;/code&gt;, which is short for n-dimensional array&lt;/p&gt;
&lt;h3 id=&#34;advantage&#34;&gt;Advantage&lt;/h3&gt;
&lt;p&gt;NumPy arrays use contiguous blocks of memory that can be efficiently cached by the CPU. While Python lists are arrays of pointers to objects in random locations in memory, leading to a more expensive memory-look-up.&lt;/p&gt;
&lt;h3 id=&#34;disadvantage&#34;&gt;Disadvantage&lt;/h3&gt;
&lt;p&gt;NumPy arrays have a fixed size and are homogenous, which means that all elements must have the same type&lt;br&gt;
Adding and removing elements from the end of a Python list is very efficient, altering the size of a NumPy array is very expensive since it requires creating a new array and carrying over the contents of the old array&lt;/p&gt;
&lt;h3 id=&#34;n-dimenstional-arrays&#34;&gt;N-dimenstional Arrays&lt;/h3&gt;
&lt;p&gt;NumPy arrays can have up to 32 dimensions&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;array-function&#34;&gt;&lt;code&gt;array&lt;/code&gt; function&lt;/h4&gt;
&lt;p&gt;Create a NumPy array from a list of lists&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lstint = [[1,2,3],
      [4,5,6]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2dint = np.array(lstint)
ary2dint
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6]])
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;data-type-function-dtype&#34;&gt;Data type function &lt;code&gt;dtype&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;All data types defined here: &lt;a href=&#34;https://numpy.org/doc/stable/user/basics.types.html&#34;&gt;https://numpy.org/doc/stable/user/basics.types.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2dint.dtype
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dtype(&#39;int64&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Numpy array sees what type will work for all elements of the list before creating it&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lstfloat = [[1,2.3,3],
      [4,5,6]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2df = np.array(lstfloat)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2df.dtype
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dtype(&#39;float64&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cast-array-type-with-astype&#34;&gt;Cast array type with &lt;code&gt;astype&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2dint.dtype
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dtype(&#39;int64&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2dintTOfloat = ary2dint.astype(np.float)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2dintTOfloat.dtype
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dtype(&#39;float64&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;size-in-byte-with-itemsize&#34;&gt;Size in byte with &lt;code&gt;itemsize&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Returns size of each element in the array (remember that ndarrays are homogeneous)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2dintTOfloat.itemsize
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;each element takes up 8 bytes * 8 bits/byte = 64 bits in memory&lt;/p&gt;
&lt;h4 id=&#34;size-of-array-with-size&#34;&gt;Size of array with &lt;code&gt;size&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2dintTOfloat.size
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;dimension-of-array-with-ndim&#34;&gt;Dimension of array with &lt;code&gt;ndim&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;number of dimensions of an array, similar to a rank of a tensor&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary2dintTOfloat.ndim
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;elements-of-each-dim-with-shape&#34;&gt;Elements of each dim with &lt;code&gt;shape&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;number of elements along each array dimension (in the context of NumPy arrays, we may also refer to them as axes)&lt;br&gt;
Returns a tuple &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ary_shape = ary2dintTOfloat.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(ary_shape)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.array([1, 2, 3]).shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(3,)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;scalar = np.array(5)
scalar
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array(5)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Operators</title>
      <link>http://othrif.github.io/technical_note/python/basics/operators/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/operators/</guid>
      <description>&lt;h3 id=&#34;bitwise-operation&#34;&gt;Bitwise operation&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x=3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(bin(x))
print(bin(~x))
~x # = -(x+1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b11
-0b100





-4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(bin(6))
print(bin(3))
print(bin(6 | 3))
6 | 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b110
0b11
0b111





7
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;bitwise-xor&#34;&gt;Bitwise XOR&lt;/h3&gt;
&lt;p&gt;each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(bin(6))
print(bin(3))
print(bin(6 ^ 3))
6 ^ 3

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b110
0b11
0b101





5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;use XOR as a short-cut to setting the value of a register to zero&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;6 ^ 6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;shift-operators&#34;&gt;Shift operators&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(bin(1))
print(bin(1 &amp;lt;&amp;lt; 5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b1
0b100000
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(bin(5))
print(bin(5 &amp;lt;&amp;lt; 1))
print(5 &amp;lt;&amp;lt; 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b101
0b1010
10
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(bin(2))
print(bin(2 &amp;lt;&amp;lt; 3))
print(2 &amp;lt;&amp;lt; 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0b10
0b10000
16
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Outer and inner joins</title>
      <link>http://othrif.github.io/technical_note/python/pandas/concat_join/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/concat_join/</guid>
      <description>&lt;h3 id=&#34;joins&#34;&gt;Joins&lt;/h3&gt;
&lt;p&gt;Joining tables: Combining rows of multiple tables&lt;/p&gt;
&lt;h4 id=&#34;outer-join&#34;&gt;Outer join&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Missing fields filled with NaN&lt;/li&gt;
&lt;li&gt;Union of index sets (all labels, no repetition)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;inner-join&#34;&gt;Inner join&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Intersection of index sets (only common labels)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

bronze = pd.read_csv(&#39;SummerOlypmic/bronze_top5.csv&#39;)
silver = pd.read_csv(&#39;SummerOlypmic/silver_top5.csv&#39;)
gold = pd.read_csv(&#39;SummerOlypmic/gold_top5.csv&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;inner-join-1&#34;&gt;Inner join&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create the list of DataFrames: medal_list
medal_list = [bronze, silver, gold]

# Concatenate medal_list horizontally using an inner join: medals
medals = pd.concat(medal_list, axis=1, keys=[&#39;bronze&#39;,&#39;silver&#39;, &#39;gold&#39;], join=&#39;inner&#39;)

# Print medals
print(medals)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;           bronze                  silver                    gold        
          Country   Total         Country   Total         Country   Total
0   United States  1052.0   United States  1195.0   United States  2088.0
1    Soviet Union   584.0    Soviet Union   627.0    Soviet Union   838.0
2  United Kingdom   505.0  United Kingdom   591.0  United Kingdom   498.0
3          France   475.0          France   461.0           Italy   460.0
4         Germany   454.0           Italy   394.0         Germany   407.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;outer-join-1&#34;&gt;Outer join&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create the list of DataFrames: medal_list
medal_list = [bronze, silver, gold]

# Concatenate medal_list horizontally using an inner join: medals
medals = pd.concat(medal_list, axis=1, keys=[&#39;bronze&#39;,&#39;silver&#39;, &#39;gold&#39;], join=&#39;outer&#39;)

# Print medals
print(medals)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;           bronze                  silver                    gold        
          Country   Total         Country   Total         Country   Total
0   United States  1052.0   United States  1195.0   United States  2088.0
1    Soviet Union   584.0    Soviet Union   627.0    Soviet Union   838.0
2  United Kingdom   505.0  United Kingdom   591.0  United Kingdom   498.0
3          France   475.0          France   461.0           Italy   460.0
4         Germany   454.0           Italy   394.0         Germany   407.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;more-advanced-resampling--concatenating&#34;&gt;More advanced resampling &amp;amp; concatenating&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;china = pd.read_csv(&#39;GDP/gdp_china.csv&#39;, parse_dates=True, index_col=0, )
us = pd.read_csv(&#39;GDP/gdp_usa.csv&#39;, parse_dates=True, index_col=0)
print(china.head()) # need to change GDP &amp;gt; China 
print(us.head()) # need to change VALUE &amp;gt; US
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                  GDP
Year                 
1960-01-01  59.184116
1961-01-01  49.557050
1962-01-01  46.685179
1963-01-01  50.097303
1964-01-01  59.062255
            VALUE
DATE             
1947-01-01  243.1
1947-04-01  246.3
1947-07-01  250.1
1947-10-01  260.3
1948-01-01  266.2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Resample and tidy china: china_annual
china_annual = china.resample(&#39;A&#39;).last().pct_change(10).dropna()

# Resample and tidy us: us_annual
us_annual = us.resample(&#39;A&#39;).last().pct_change(10).dropna()

# Concatenate china_annual and us_annual: gdp
gdp = pd.concat([china_annual, us_annual], join=&#39;inner&#39;, axis=1)

# Resample gdp and print
print(gdp.resample(&#39;10A&#39;).last())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                 GDP     VALUE
Year                          
1970-12-31  0.546128  1.017187
1980-12-31  1.072537  1.742556
1990-12-31  0.892820  1.012126
2000-12-31  2.357522  0.738632
2010-12-31  4.011081  0.454332
2020-12-31  3.789936  0.361780
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Overload comparison operators</title>
      <link>http://othrif.github.io/technical_note/python/basics/overload_eq/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/overload_eq/</guid>
      <description>&lt;h3 id=&#34;overloading-equality&#34;&gt;Overloading equality&lt;/h3&gt;
&lt;p&gt;When comparing two objects of a custom class using &lt;code&gt;==&lt;/code&gt;, Python by default compares just the object references, not the data contained in the objects. To override this behavior, the class can implement the special &lt;code&gt;__eq__()&lt;/code&gt; method, which accepts two arguments &amp;ndash; the objects to be compared &amp;ndash; and returns True or False. This method will be implicitly called when two objects are compared.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class BankAccount:
    def __init__(self, number, balance=0):
        self.balance = balance
        self.number = number
      
    def withdraw(self, amount):
        self.balance -= amount 
    
    # Define __eq__ that returns True if the number attributes are equal 
    def __eq__ (self, other):
        if type(self) == type(other):
            return (self.number == other.number)
        else:
            return False

# Create accounts and compare them       
acct1 = BankAccount(123, 1000)
acct2 = BankAccount(123, 1000)
acct3 = BankAccount(456, 1000)
print(acct1 == acct2)
print(acct1 == acct3)
    
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
False
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Overload comparison operators</title>
      <link>http://othrif.github.io/technical_note/python/basics/overload_repr/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/overload_repr/</guid>
      <description>&lt;h3 id=&#34;string-representation-of-objects&#34;&gt;String representation of objects&lt;/h3&gt;
&lt;p&gt;There are two special methods in Python that return a string representation of an object. &lt;code&gt;__str__()&lt;/code&gt; is called when you use print() or str() on an object, and &lt;code&gt;__repr__()&lt;/code&gt; is called when you use &lt;code&gt;repr()&lt;/code&gt; on an object, print the object in the console without calling print(), or instead of &lt;code&gt;__str__()&lt;/code&gt; if &lt;code&gt;__str__()&lt;/code&gt; is not defined.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__str__()&lt;/code&gt; is supposed to provide a &amp;ldquo;user-friendly&amp;rdquo; output describing an object, and &lt;code&gt;__repr__()&lt;/code&gt; should return the expression that, when evaluated, will return the same object, ensuring the reproducibility of your code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Employee:
    def __init__(self, name, salary=30000):
        self.name, self.salary = name, salary
      
    def __str__(self):
        s = &amp;quot;Employee name: {name}\nEmployee salary: {salary}&amp;quot;.format(name=self.name, salary=self.salary)      
        return s
      
    # Add the __repr__method  
    def __repr__(self):
        emp_repr = f&#39;Employee(&amp;quot;{self.name}&amp;quot;,{self.salary})&#39;
        return emp_repr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Employee name: Amar Howard
Employee salary: 30000
Employee(&amp;quot;Carolyn Ramirez&amp;quot;,35000)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;emp1 = Employee(&amp;quot;Amar Howard&amp;quot;, 30000)
print(emp1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Employee name: Amar Howard
Employee salary: 30000
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;emp2 = Employee(&amp;quot;Carolyn Ramirez&amp;quot;, 35000)
print(repr(emp2))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Employee(&amp;quot;Carolyn Ramirez&amp;quot;,35000)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Parsing command line options</title>
      <link>http://othrif.github.io/technical_note/python/basics/parse_commandline/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/parse_commandline/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import argparse

parser = argparse.ArgumentParser(description=&#39;Program to analyze something.&#39;)
parser.add_argument(dest=&#39;filenames&#39;, metavar=&#39;filename&#39;, nargs=&#39;*&#39;)
parser.add_argument(&#39;-i&#39;, &#39;--input&#39;, metavar=&#39;input_file&#39;, required=False, dest=&#39;input_file&#39;, action=&#39;store&#39;, default=&#39;./input/dummy.csv&#39;, help=&#39;Input csv file&#39;)
parser.add_argument(&#39;-o&#39;, &#39;--output&#39;, metavar=&#39;output_file&#39;, required=False, dest=&#39;output_file&#39;, action=&#39;store&#39;, default=&#39;./output/out_dummy.csv&#39;, help=&#39;Output csv file with results&#39;)
parser.add_argument(&#39;--choice&#39;, dest=&#39;mychoice&#39;, action=&#39;store&#39;, choices=&#39;{&#39;slow&#39;,&#39;fast&#39;}&#39;, default=&#39;slow&#39;, help=&#39;my speed choice&#39;)
parser.add_argument(&#39;-p&#39;, &#39;--pat&#39;, metavar=&#39;pattern&#39;, required=True, dest=&#39;mychoice&#39;, action=&#39;append&#39;, help=&#39;can append to the list of arguments here&#39;)
parser.add_argument(&#39;-v&#39;, &#39;--verbose&#39;, dest=&#39;verbose&#39;, action=&#39;store_true&#39;, help=&#39;Verbose mode&#39;)
args = parser.parse_args()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Pass arguments to decorators </title>
      <link>http://othrif.github.io/technical_note/python/basics/arguments_decorator/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/arguments_decorator/</guid>
      <description>&lt;h3 id=&#34;pass-argument-to-decorator&#34;&gt;Pass argument to decorator&lt;/h3&gt;
&lt;p&gt;You cannot pass arguments to decorator, since it is only supposed to take-in a function to be decorated as an argument. Instead, you created a function that returns a decorator. Then the &lt;code&gt;@&lt;/code&gt; is applied to the decorator returned by the function with an argument. See below for an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def run_n_times(n):
  &amp;quot;&amp;quot;&amp;quot;Define and return a decorator&amp;quot;&amp;quot;&amp;quot;
  def decorator(func):
    def wrapper(*args, **kwargs):
      for i in range(n):
        func(*args, **kwargs)
    return wrapper
  return decorator
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@run_n_times(5)
def multiply(a,b):
    print(a*b)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;multiply(2,4)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;8
8
8
8
8
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Perform a t-test</title>
      <link>http://othrif.github.io/technical_note/math/stats/ttest/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/math/stats/ttest/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
laptops = pd.read_csv(&#39;laptops.csv&#39; , encoding=&#39;latin-1&#39;, index_col=0) # added encoding because of errors
laptops = laptops.loc[laptops[&#39;Company&#39;].isin([&#39;Asus&#39;, &#39;Toshiba&#39;])]
laptops = laptops[[&#39;Company&#39;,&#39;Price_euros&#39;]]
laptops.columns = [&#39;Company&#39;, &#39;Price&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Display the mean price for each group
prices = laptops.groupby(&#39;Company&#39;).mean()
print(prices)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;               Price
Company             
Asus     1104.169367
Toshiba  1267.812500
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Assign the prices of each group
asus = laptops[laptops[&#39;Company&#39;] == &#39;Asus&#39;][&#39;Price&#39;]
toshiba = laptops[laptops[&#39;Company&#39;] == &#39;Toshiba&#39;][&#39;Price&#39;]

# Run the t-test
from scipy.stats import ttest_ind
tstat, pval = ttest_ind(asus, toshiba)
print(&#39;{0:0.3f}&#39;.format(pval))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.133
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With a p-value of .133, we cannot reject the null hypothesis! There&amp;rsquo;s not enough evidence here to conclude that Toshiba laptops are significantly more expensive than Asus. With that being said, .133 is fairly close to reasonable significance so we may want to run another test or examine this further.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perform a z-test</title>
      <link>http://othrif.github.io/technical_note/math/stats/ztest/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/math/stats/ztest/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from statsmodels.stats.proportion import proportions_ztest
count = 5
nobs = 83
value = .05
stat, pval = proportions_ztest(count, nobs, value)
print(f&#39;p-value={pval:0.3f}, sig={stat:0.3f} sigma&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;p-value=0.695, sig=0.392 sigma
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
from statsmodels.stats.proportion import proportions_ztest
count = np.array([5, 12])
nobs = np.array([83, 99])
stat, pval = proportions_ztest(count, nobs)
print(f&#39;p-value={pval:0.3f}, sig={stat:0.3f} sigma&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;p-value=0.159, sig=-1.408 sigma
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
results = pd.read_csv(&#39;ab_data.csv&#39; , encoding=&#39;latin-1&#39;, index_col=0) # added encoding because of errors
results = results[[&#39;group&#39;,&#39;converted&#39;]]
results.columns = [&#39;Group&#39;,&#39;Converted&#39;]
# Assign and print the conversion rate for each group
conv_rates = results.groupby(&#39;Group&#39;).mean()
print(conv_rates)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;           Converted
Group               
control     0.120399
treatment   0.118920
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Assign the number of conversions and total trials
num_control = results[results[&#39;Group&#39;] == &#39;control&#39;][&#39;Converted&#39;].sum()
total_control = len(results[results[&#39;Group&#39;] == &#39;control&#39;])

# Assign the number of conversions and total trials
num_treat = results[results[&#39;Group&#39;] == &#39;treatment&#39;][&#39;Converted&#39;].sum()
total_treat = len(results[results[&#39;Group&#39;] == &#39;treatment&#39;])

import numpy as np
from statsmodels.stats.proportion import proportions_ztest
count = np.array([num_treat, num_control]) 
nobs = np.array([total_treat, total_control])

# Run the z-test and print the result 
stat, pval = proportions_ztest(count, nobs, alternative=&amp;quot;larger&amp;quot;)
print(f&#39;p-value={pval:0.3f}, sig={stat:0.3f} sigma&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;p-value=0.892, sig=-1.237 sigma
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;p-value &amp;gt; 0.05, cannot reject the null hypothesis&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Polymorphysm methods</title>
      <link>http://othrif.github.io/technical_note/python/basics/polymorphism/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/polymorphism/</guid>
      <description>&lt;h3 id=&#34;polymorphism-and-instances&#34;&gt;Polymorphism and instances&lt;/h3&gt;
&lt;p&gt;Polymorphism ensures that the exact method called is determined dynamically based on the instance.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Parent:
    def talk(self):
        print(&amp;quot;Parent talking!&amp;quot;)     

class Child(Parent):
    def talk(self):
        print(&amp;quot;Child talking!&amp;quot;)


class TalkativeChild(Parent):
    def talk(self):
        print(&amp;quot;TalkativeChild talking!&amp;quot;)
        Parent.talk(self)


p, c, tc = Parent(), Child(), TalkativeChild()

for obj in (p, c, tc):
    obj.talk()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Parent talking!
Parent talking!
TalkativeChild talking!
Parent talking!
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;liskov-substitution-principal&#34;&gt;Liskov Substitution Principal&lt;/h3&gt;
&lt;p&gt;the substitution principle requires the substitution to preserve the oversall state of the program.&lt;/p&gt;
&lt;h4 id=&#34;violations-of-lsp-square-rectangle-problem&#34;&gt;Violations of LSP: Square-Rectangle problem&lt;/h4&gt;
&lt;p&gt;it seems like you should be able to define a class Rectangle, with attributes h and w (for height and width), and then define a class Square that inherits from the Rectangle. After all, a square &amp;ldquo;is-a&amp;rdquo; rectangle!&lt;/p&gt;
&lt;p&gt;Unfortunately, this intuition doesn&amp;rsquo;t apply to object-oriented design.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Define a Rectangle class
class Rectangle:
    def __init__(self, h, w):
      self.h, self.w = h, w

# Define a Square class
class Square(Rectangle):
    def __init__(self, w):
      self.h, self.w = w, w  

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Print statements</title>
      <link>http://othrif.github.io/technical_note/java/basics/print/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/java/basics/print/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;String out = &amp;quot;Hello World! First time in Java&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;out
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Hello World! First time in Java
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Print statements</title>
      <link>http://othrif.github.io/technical_note/python/basics/print/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/print/</guid>
      <description>&lt;h3 id=&#34;simple-printing&#34;&gt;Simple printing&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;Printing example!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Printing example!
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;f-string-formatting&#34;&gt;f-string formatting:&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f &#39; &amp;lt;text&amp;gt; { &amp;lt;expression&amp;gt; &amp;lt;optional !s, !r, or !a&amp;gt; &amp;lt;optional : format specifier&amp;gt; } &amp;lt;text&amp;gt; ... &#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where &lt;code&gt;&amp;lt;optional !s, !r, or !a&amp;gt;&lt;/code&gt; mean &lt;code&gt;!s (str), !r (repr), and !a (ascii)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import datetime
name = &#39;Othmane&#39;
age = 30
anniversary = datetime.date(1989, 2, 6)
print(f&#39;My name is {name.lower()}, my age next year is {age+1}, my anniversary is {anniversary:%A, %B %d, %Y}.&#39;)
print(f&#39;He said his name is {name!r}.&#39;) # !r for repr
print(r&#39;Raw output: /Users/othmanerifki&#39;) # r for raw output
message = (
    f&#39;Hi {name}.&#39;
    f&#39;Your age is {age}.&#39;
)
print(message)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;In lower case:  othmane
My name is othmane, my age next year is 31, my anniversary is Monday, February 06, 1989.
He said his name is &#39;Othmane&#39;.
Raw output: /Users/othmanerifki
Hi Othmane.Your age is 30.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;quotation-braces&#34;&gt;Quotation, braces:&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&#39;Using quotation {name}.&#39;)
print(f&#39;Using quotation &amp;quot;{name}&amp;quot;.&#39;)
print(f&#39;Using quotation \&#39;{name}\&#39;.&#39;)
print(f&#39;Without braces {74}&#39;)
print(f&#39;With braces {{74}}&#39;)
print(f&#39;to show more {{{{74}}}}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Using quotation Othmane.
Using quotation &amp;quot;Othmane&amp;quot;.
Using quotation &#39;Othmane&#39;.
Without braces 74
With braces {74}
to show more {{74}}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;number-formatting&#34;&gt;Number formatting&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;python f&#39;{value:{width}.{precision}&amp;lt;type&amp;gt;}&#39;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;type&amp;gt;&lt;/code&gt;: s(string), f(float), d(decimal), x(hex), X(HEX), e(exponent scientific notation), E(same as e with &amp;lsquo;E&amp;rsquo;), g(general, it rounds and format to scientific or fixed decimals), G(same as g but E), %(x100 and percent sign)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;weight = 83.1
print(f&#39;With float is {weight:.2f}kg&#39;)
print(f&#39;With percentage is {20/100:.2%}&#39;)
print(f&#39;With scientific notation is {10**-6:.2E}&#39;)
print(f&#39;With general notation is {10**-6:g}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;With float is 83.10kg
With percentage is 20.00%
With scientific notation is 1.00E-06
With general notation is 1e-06
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;formatting-columns-with-text&#34;&gt;Formatting columns with text&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;some_number=23
some_other_number = 2.23432
print(f&#39;{&amp;quot;d1=0:&amp;quot;:&amp;lt;20} limit = {some_number:.3f} \timpact = {some_other_number:.3%}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;d1=0:                limit = 23.000 	impact = 223.432%
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;casting&#34;&gt;Casting&lt;/h3&gt;
&lt;p&gt;Same as above, not related to printing but gives a good illustration&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x=&amp;quot;10&amp;quot;
y=&amp;quot;7.1&amp;quot;
print(f&#39;Test with x+y where x={x}, y={y}&#39;)
print(f&#39;No casting: x+y={x+y}&#39;)
print(f&#39;Casting to float: x+y={float(x)+float(y)}&#39;)
print(f&#39;Casting to int: x+y={int(x)+int(float(y))}&#39;) # int(7.1) give error
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Test with x+y where x=10, y=7.1
No casting: x+y=107.1
Casting to float: x+y=17.1
Casting to int: x+y=17
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Print statements</title>
      <link>http://othrif.github.io/technical_note/template/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/template/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Python 3 in MacOS</title>
      <link>http://othrif.github.io/technical_note/python/basics/macos_env/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/macos_env/</guid>
      <description>&lt;h3 id=&#34;change-python-to-point-to-python3-by-default&#34;&gt;Change python to point to python3 by default&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls -l /usr/local/bin/python*
ln -s -f /usr/local/bin/python3.7 /usr/local/bin/python
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;which-python-version&#34;&gt;Which Python version&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -V
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;install-package&#34;&gt;Install package&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install SomePackage            # latest version
pip install SomePackage==1.0.4     # specific version
pip install &#39;SomePackage&amp;gt;=1.0.4&#39;     # minimum version
pip install SomePackage&amp;gt;=2.0.0,&amp;lt;3.0.0 # Install the latest 2.x release 
pip install SomePackage[extras] # Install package and extras
pip install SomeProject@git+https://git.repo/some_pkg.git@1.3.1 # from version control system
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;upgrade-package&#34;&gt;Upgrade package&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install SomePackage --upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;main-packages-used&#34;&gt;Main packages used&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install numpy
pip install scipy
pip install scikit-learn
pip install matplotlib
pip install pandas
pip install jupyter notebook
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;upgrade-pip&#34;&gt;Upgrade pip&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m pip --version # check version
python -m pip install --user --upgrade pip
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;working-with-virtual-environment-with-venv&#34;&gt;Working with virtual environment with &lt;code&gt;venv&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;It is recommended to work in virtual environment to not have comflicts between different packages. This can be done using &lt;code&gt;venv&lt;/code&gt;. The second argument &lt;code&gt;env&lt;/code&gt; is the location to create the virtual environment in that folder. Generally, you can just create this in your project and call it env. Make sure to add it to &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m venv env
source env/bin/activate
which python # should point to the virtual environment env/bin/python
deactivate # leave virtual environment
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Installing packages in &lt;code&gt;venv&lt;/code&gt; is similar to the above:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install SomePackage 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More importantly it allows you to specify which version to install:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install SomePackage

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using requirements file &lt;code&gt;requirements.txt&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;requests==2.18.4
google-auth==1.1.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Freeze dependencies after completing all installation of packages (a way to get the requirement file):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip freeze
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python classes</title>
      <link>http://othrif.github.io/technical_note/python/basics/classes/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/classes/</guid>
      <description>&lt;h3 id=&#34;self-in-python-class&#34;&gt;Self in Python class&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class car(): 
      
    # init method or constructor 
    def __init__(self, model, color): 
        self.model = model 
        self.color = color 
          
    def show(self): 
        print(&amp;quot;Model is&amp;quot;, self.model ) 
        print(&amp;quot;color is&amp;quot;, self.color ) 
          
# both objects have different self which  
# contain their attributes 
audi = car(&amp;quot;audi a4&amp;quot;, &amp;quot;blue&amp;quot;) 
ferrari = car(&amp;quot;ferrari 488&amp;quot;, &amp;quot;green&amp;quot;) 
  
audi.show()     # same output as car.show(audi) 
ferrari.show()  # same output as car.show(ferrari) 
  
# Behind the scene, in every instance method  
# call, python sends the instances also with 
# that method call like car.show(audi)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Model is audi a4
color is blue
Model is ferrari 488
color is green
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python conventions</title>
      <link>http://othrif.github.io/technical_note/python/basics/conventions/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/conventions/</guid>
      <description>&lt;h3 id=&#34;import-packages-and-modules&#34;&gt;Import packages and modules&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Querying relational databases in Python</title>
      <link>http://othrif.github.io/technical_note/python/basics/sql_engine/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/sql_engine/</guid>
      <description>&lt;h3 id=&#34;relational-database-101&#34;&gt;Relational database 101&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Import packages and functions&lt;/li&gt;
&lt;li&gt;Create the database engine&lt;/li&gt;
&lt;li&gt;Connect to the engine&lt;/li&gt;
&lt;li&gt;Query the database&lt;/li&gt;
&lt;li&gt;Save query results to a DataFrame&lt;/li&gt;
&lt;li&gt;Close the connection&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;queries&#34;&gt;Queries&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SELECT&lt;/li&gt;
&lt;li&gt;WHERE&lt;/li&gt;
&lt;li&gt;JOIN&lt;/li&gt;
&lt;li&gt;ORDER BY&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import packages
from sqlalchemy import create_engine
import pandas as pd

# Create engine: engine
engine = create_engine(&#39;sqlite:///Chinook.sqlite&#39;)

# Execute query and store records in DataFrame: df
df = pd.read_sql_query(&#39;SELECT * FROM PlaylistTrack INNER JOIN Track on PlaylistTrack.TrackId = Track.TrackId WHERE Milliseconds &amp;lt; 250000&#39;, engine)

# Print head of DataFrame
print(df.head())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   PlaylistId  TrackId  TrackId              Name  AlbumId  MediaTypeId  \
0           1     3390     3390  One and the Same      271            2   
1           1     3392     3392     Until We Fall      271            2   
2           1     3393     3393     Original Fire      271            2   
3           1     3394     3394       Broken City      271            2   
4           1     3395     3395          Somedays      271            2   

   GenreId Composer  Milliseconds    Bytes  UnitPrice  
0       23     None        217732  3559040       0.99  
1       23     None        230758  3766605       0.99  
2       23     None        218916  3577821       0.99  
3       23     None        228366  3728955       0.99  
4       23     None        213831  3497176       0.99  
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Open engine in context manager
# Perform query and save results to DataFrame: df
with engine.connect() as con:
    rs = con.execute(&#39;SELECT Title, Name FROM Album INNER JOIN Artist ON Album.ArtistID = Artist.ArtistID&#39;)
    df = pd.DataFrame(rs.fetchall())
    df.columns = rs.keys()

# Print head of DataFrame df
print(df.head())

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                                   Title       Name
0  For Those About To Rock We Salute You      AC/DC
1                      Balls to the Wall     Accept
2                      Restless and Wild     Accept
3                      Let There Be Rock      AC/DC
4                               Big Ones  Aerosmith
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note 4 lines of code from context manager can be condensed to one line of code from &lt;code&gt;Pandas&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;educational-intro-below&#34;&gt;Educational intro below&lt;/h1&gt;
&lt;h3 id=&#34;import-packages&#34;&gt;Import packages&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# import necessary module
from sqlalchemy import create_engine
import pandas as pd
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-a-database-engine&#34;&gt;Create a database engine&lt;/h3&gt;
&lt;p&gt;Creating the first SQL engine. You&amp;rsquo;ll create an engine to connect to the SQLite database &lt;code&gt;Chinook.sqlite&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#39;sqlite:///Northwind.sqlite&#39;&lt;/code&gt; is called the connection string to the SQLite database &lt;code&gt;Chinook.sqlite&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create engine: engine
engine = create_engine(&#39;sqlite:///Chinook.sqlite&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;what-are-the-tables-in-the-database&#34;&gt;What are the tables in the database?&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Save the table names to a list: table_names
table_names = engine.table_names()

# Print the table names to the shell
print(table_names)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Album&#39;, &#39;Artist&#39;, &#39;Customer&#39;, &#39;Employee&#39;, &#39;Genre&#39;, &#39;Invoice&#39;, &#39;InvoiceLine&#39;, &#39;MediaType&#39;, &#39;Playlist&#39;, &#39;PlaylistTrack&#39;, &#39;Track&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;query-database-and-close-engine-connection&#34;&gt;Query database and close engine connection&lt;/h3&gt;
&lt;p&gt;The Hello World of SQL queries, &lt;code&gt;SELECT&lt;/code&gt;, in order to retrieve all columns of the table &lt;code&gt;Album&lt;/code&gt; in the Chinook database. The query &lt;code&gt;SELECT *&lt;/code&gt; selects all columns.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Open engine connection: con
con = engine.connect()

# Perform query: rs
rs = con.execute(&#39;SELECT * FROM Album&#39;)

# Save results of the query to DataFrame: df
df = pd.DataFrame(rs.fetchall())

# Set the proper names of the columns
df.columns = rs.keys()

# Close connection
con.close()

# Print head of DataFrame df
print(df.head())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   AlbumId                                  Title  ArtistId
0        1  For Those About To Rock We Salute You         1
1        2                      Balls to the Wall         2
2        3                      Restless and Wild         2
3        4                      Let There Be Rock         1
4        5                               Big Ones         3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;customize-the-query-and-use-context-manager&#34;&gt;Customize the query and use context manager&lt;/h3&gt;
&lt;p&gt;Customize your query in order to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select specified columns from a table&lt;/li&gt;
&lt;li&gt;Select a specified number of rows&lt;/li&gt;
&lt;li&gt;Import column names from the database table&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Open engine in context manager
# Perform query and save results to DataFrame: df
with engine.connect() as con:
    rs = con.execute(&#39;SELECT LastName, Title FROM Employee&#39;)
    df = pd.DataFrame(rs.fetchmany(3))
    df.columns = rs.keys()

# Print the length of the DataFrame df
print(len(df))

# Print the head of the DataFrame df
print(df.head())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3
  LastName                Title
0    Adams      General Manager
1  Edwards        Sales Manager
2  Peacock  Sales Support Agent
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;filtering-your-database-records-using-sqls-where&#34;&gt;Filtering your database records using SQL&amp;rsquo;s WHERE&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create engine: engine
engine = create_engine(&#39;sqlite:///Chinook.sqlite&#39;)

# Open engine in context manager
# Perform query and save results to DataFrame: df
with engine.connect() as con:
    rs = con.execute(&#39;SELECT * FROM Employee WHERE EmployeeId &amp;gt;= 6&#39;)
    df = pd.DataFrame(rs.fetchall())
    df.columns = rs.keys()

# Print the head of the DataFrame df
print(df.head())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   EmployeeId  LastName FirstName       Title  ReportsTo            BirthDate  \
0           6  Mitchell   Michael  IT Manager          1  1973-07-01 00:00:00   
1           7      King    Robert    IT Staff          6  1970-05-29 00:00:00   
2           8  Callahan     Laura    IT Staff          6  1968-01-09 00:00:00   

              HireDate                      Address        City State Country  \
0  2003-10-17 00:00:00         5827 Bowness Road NW     Calgary    AB  Canada   
1  2004-01-02 00:00:00  590 Columbia Boulevard West  Lethbridge    AB  Canada   
2  2004-03-04 00:00:00                  923 7 ST NW  Lethbridge    AB  Canada   

  PostalCode              Phone                Fax                    Email  
0    T3B 0C5  +1 (403) 246-9887  +1 (403) 246-9899  michael@chinookcorp.com  
1    T1K 5N8  +1 (403) 456-9986  +1 (403) 456-8485   robert@chinookcorp.com  
2    T1H 1Y8  +1 (403) 467-3351  +1 (403) 467-8772    laura@chinookcorp.com  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ordering-your-sql-records-with-order-by&#34;&gt;Ordering your SQL records with ORDER BY&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create engine: engine
engine = create_engine(&#39;sqlite:///Chinook.sqlite&#39;)

# Open engine in context manager
with engine.connect() as con:
    rs = con.execute(&#39;SELECT * FROM Employee ORDER BY BirthDate&#39;)
    df = pd.DataFrame(rs.fetchall())

    # Set the DataFrame&#39;s column names
    df.columns = rs.keys()

# Print head of DataFrame
print(df.head())

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   EmployeeId  LastName FirstName                Title  ReportsTo  \
0           4      Park  Margaret  Sales Support Agent        2.0   
1           2   Edwards     Nancy        Sales Manager        1.0   
2           1     Adams    Andrew      General Manager        NaN   
3           5   Johnson     Steve  Sales Support Agent        2.0   
4           8  Callahan     Laura             IT Staff        6.0   

             BirthDate             HireDate              Address        City  \
0  1947-09-19 00:00:00  2003-05-03 00:00:00     683 10 Street SW     Calgary   
1  1958-12-08 00:00:00  2002-05-01 00:00:00         825 8 Ave SW     Calgary   
2  1962-02-18 00:00:00  2002-08-14 00:00:00  11120 Jasper Ave NW    Edmonton   
3  1965-03-03 00:00:00  2003-10-17 00:00:00         7727B 41 Ave     Calgary   
4  1968-01-09 00:00:00  2004-03-04 00:00:00          923 7 ST NW  Lethbridge   

  State Country PostalCode              Phone                Fax  \
0    AB  Canada    T2P 5G3  +1 (403) 263-4423  +1 (403) 263-4289   
1    AB  Canada    T2P 2T3  +1 (403) 262-3443  +1 (403) 262-3322   
2    AB  Canada    T5K 2N1  +1 (780) 428-9482  +1 (780) 428-3457   
3    AB  Canada    T3B 1Y7   1 (780) 836-9987   1 (780) 836-9543   
4    AB  Canada    T1H 1Y8  +1 (403) 467-3351  +1 (403) 467-8772   

                      Email  
0  margaret@chinookcorp.com  
1     nancy@chinookcorp.com  
2    andrew@chinookcorp.com  
3     steve@chinookcorp.com  
4     laura@chinookcorp.com  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;pandas-for-sql-queries&#34;&gt;Pandas for SQL Queries&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Random numbers</title>
      <link>http://othrif.github.io/technical_note/python/matplotlib/rand/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlib/rand/</guid>
      <description>&lt;h3 id=&#34;generate-between-0-and-1&#34;&gt;Generate between 0 and 1&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
np.random.rand()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.719150310154773
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;generate-either-0-and-1&#34;&gt;Generate either 0 and 1&lt;/h3&gt;
&lt;p&gt;This changes every time i run this code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(5):
    print(np.random.randint(0,2)) # generate 0 or 1, not [0,2) upper boundary is exclusive
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0
1
0
0
0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;reproducibility-with-seed&#34;&gt;Reproducibility with &lt;code&gt;seed()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Insure reproducibility of the resutls by setting a seed. The sequence of random generated will be the same, everytime you run your program. this is why this is a &lt;em&gt;pseudo random generator&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.random.seed(123)
for i in range(5):
    print(np.random.randint(0,2)) # generate 0 or 1

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0
1
0
0
0
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Random numbers</title>
      <link>http://othrif.github.io/technical_note/python/numpy/rand/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/numpy/rand/</guid>
      <description>&lt;h3 id=&#34;generate-between-0-and-1&#34;&gt;Generate between 0 and 1&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
np.random.rand()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.719150310154773
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;generate-either-0-and-1&#34;&gt;Generate either 0 and 1&lt;/h3&gt;
&lt;p&gt;This changes every time i run this code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(5):
    print(np.random.randint(0,2)) # generate 0 or 1, not [0,2) upper boundary is exclusive
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0
1
0
0
0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;reproducibility-with-seed&#34;&gt;Reproducibility with &lt;code&gt;seed()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Insure reproducibility of the resutls by setting a seed. The sequence of random generated will be the same, everytime you run your program. this is why this is a &lt;em&gt;pseudo random generator&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.random.seed(123)
for i in range(5):
    print(np.random.randint(0,2)) # generate 0 or 1

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0
1
0
0
0
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Read and write a file</title>
      <link>http://othrif.github.io/technical_note/python/basics/read_write_file/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/read_write_file/</guid>
      <description>&lt;h3 id=&#34;read-a-file&#34;&gt;Read a file&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Open &amp;quot;alice.txt&amp;quot; and assign the file to &amp;quot;file&amp;quot;
with open(&#39;alice.txt&#39;) as file:
  text = file.read()

print(text)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;this is alice.txt counting how many CATS i have. yes i said cAts . Not just one cat , but many catS !
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Reading and writing CSVs</title>
      <link>http://othrif.github.io/technical_note/python/pandas/handlecsv/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/handlecsv/</guid>
      <description>&lt;p&gt;CSV = comma-seperated-values&lt;/p&gt;
&lt;h4 id=&#34;csv-to-dataframe&#34;&gt;CSV to DataFrame&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
cars = pd.read_csv(&#39;cars.csv&#39;,index_col=0)
print(cars)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;         country  drives_right  cars_per_cap
0  United States          True           809
1      Australia         False           731
2          Japan         False           588
3          India         False            18
4         Russia          True           200
5        Morocco          True            70
6          Egypt          True            45
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;manipulate-dataframe&#34;&gt;Manipulate DataFrame&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
cars[&#39;cars_rand&#39;] = cars[&#39;cars_per_cap&#39;]*np.random.randint(0,10)
print(cars)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;         country  drives_right  cars_per_cap  cars_rand
0  United States          True           809       3236
1      Australia         False           731       2924
2          Japan         False           588       2352
3          India         False            18         72
4         Russia          True           200        800
5        Morocco          True            70        280
6          Egypt          True            45        180
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;dataframe-to-csv&#34;&gt;DataFrame to csv&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars.to_csv(&#39;cars.csv&#39;)
print(cars)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;         country  drives_right  cars_per_cap  cars_rand
0  United States          True           809       3236
1      Australia         False           731       2924
2          Japan         False           588       2352
3          India         False            18         72
4         Russia          True           200        800
5        Morocco          True            70        280
6          Egypt          True            45        180
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Regression and classification in Scikit-Learn</title>
      <link>http://othrif.github.io/technical_note/python/sklearn/regression/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/sklearn/regression/</guid>
      <description>&lt;h3 id=&#34;linear-regression&#34;&gt;Linear regression&lt;/h3&gt;
&lt;p&gt;make predictions, visualize the model fit, and analyze the formula used to generate your fit.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import matplotlib.pyplot as plt
weather = pd.read_csv(&#39;weatherAUS.csv&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;prepare-your-data&#34;&gt;Prepare your data&lt;/h4&gt;
&lt;p&gt;Do I have any null values in my dataset&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;any(weather.isnull())
# For numpy
# np.any(np.isnan(mat))
# np.all(np.isfinite(mat))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#weather = weather.fillna(method=&#39;ffill&#39;) # inpute missing values
weather.dropna(inplace=True) # drop raws with null values, can loose important information
weather_train = weather.sample(n=100) 
weather_test = weather.sample(n=1000)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;weather = weather_train
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression 
X = np.array(weather[&#39;Humidity9am&#39;]).reshape(-1,1)
y = weather[&#39;Humidity3pm&#39;]


# Create and fit your linear regression model
lm = LinearRegression()
lm.fit(X, y)

# Assign and print predictions
preds = lm.predict(X)

# Plot your fit to visualize your model
plt.scatter(X, y)
plt.plot(X, preds, color=&#39;red&#39;)
plt.show()

# Assign and print coefficient 
coef = lm.coef_
print(f&#39;Coefficient: {np.round(coef,2)}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;regression_6_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Coefficient: [0.72]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that for every 1 unit of humidity in the morning, we can expect about 0.71 units of humidity in the afternoon. More practically, this information tells us that humidity drops about 29% from morning to afternoon!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# R-squared score
r2 = lm.score(X,y)
print(f&#39;R-squared score: {r2:.2f}&#39;)

# Mean squared error
from sklearn.metrics import mean_squared_error
preds = lm.predict(X)
mse = mean_squared_error(y, preds)
print(f&#39;Mean squared error: {mse:.2f}&#39;)

# Mean absolute error
from sklearn.metrics import mean_absolute_error
preds = lm.predict(X)
mae = mean_absolute_error(y, preds)
print(f&#39;Mean absolute error: {mae:.2f}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;R-squared score: 0.43
Mean squared error: 210.46
Mean absolute error: 11.54
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that our R-squared value tells us the percentage of the variance of y that X is responsible for. Which error metric would you recommend for this dataset? If you remember from when you plotted your model fit, there aren&amp;rsquo;t too many outliers, so mean squared error would be a good choice to go with!&lt;/p&gt;
&lt;h5 id=&#34;bias-variance-tradeoff&#34;&gt;Bias-Variance tradeoff&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import operator
from sklearn.preprocessing import PolynomialFeatures
polynomial_features= PolynomialFeatures(degree=10)

x_poly = polynomial_features.fit_transform(X)

lm2 = LinearRegression()
lm2.fit(x_poly, y)
preds2 = lm2.predict(x_poly)


plt.scatter(X, y)
# sort the values of x before line plot
sort_axis = operator.itemgetter(0)
sorted_zip = sorted(zip(X,preds2), key=sort_axis)
x, y_poly_pred = zip(*sorted_zip)
plt.plot(x, y_poly_pred, color=&#39;m&#39;)
plt.show()


# R-squared score
r2 = lm2.score(x_poly, preds2)
print(f&#39;R-squared score: {r2:.2f}&#39;)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;regression_11_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;R-squared score: 1.00
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;logistic-regression&#34;&gt;Logistic regression&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
from sklearn import preprocessing 
def scaleX(df):
    x = df.values #returns a numpy array
    min_max_scaler = preprocessing.MinMaxScaler()
    x_scaled = min_max_scaler.fit_transform(x)
    return pd.DataFrame(x_scaled)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;X_train = np.array(scaleX(weather_train.loc[:,[&#39;Humidity9am&#39;,&#39;Humidity3pm&#39;]])).reshape(-1,2)
y_train = np.array(weather_train[&#39;RainTomorrow&#39;])
y_train = (y_train==&#39;Yes&#39;).astype(int)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;X_test = np.array(scaleX(weather_test.loc[:,[&#39;Humidity9am&#39;,&#39;Humidity3pm&#39;]])).reshape(-1,2)
y_test = np.array(weather_test[&#39;RainTomorrow&#39;])
y_test = (y_test==&#39;Yes&#39;).astype(int)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.linear_model import LogisticRegression
# Create and fit your model
clf = LogisticRegression()
clf.fit(X_train, y_train)

# Compute and print the accuracy
acc = clf.score(X_test, y_test)
print(f&#39;Accuracy: {np.round(acc,2)}&#39;)

# Assign and print the coefficents
coefs = clf.coef_
print(f&#39;Coefficient: {np.round(coefs,2)}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Accuracy: 0.83
Coefficient: [[0.05 6.81]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since our features were normalized beforehand, we can look at the magnitude of our coefficients to tell us the importance of each independent variable. Here you can see the the second variable, Humidity3pm was much more important to our outcome than humidity from that morning. This is intuitive since we are trying to predict the rain for tomorrow!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Generate and output the confusion matrix
from sklearn.metrics import confusion_matrix
preds = clf.predict(X_test)
matrix = confusion_matrix(y_test, preds)
print(f&#39;Confusion matrix: {np.round(matrix,2)}&#39;)

# Compute and print the precision
from sklearn.metrics import precision_score
preds = clf.predict(X_test)
precision = precision_score(y_test, preds)
print(f&#39;Precision: {np.round(precision,2)}&#39;)

# Compute and print the recall
from sklearn.metrics import recall_score
preds = clf.predict(X_test)
recall = recall_score(y_test, preds)
print(f&#39;Recall: {np.round(recall,2)}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Confusion matrix: [[7508  262]
 [1440  790]]
Precision: 0.75
Recall: 0.35
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see here that the precision of our rain prediction model is higher, meaning that we didn&amp;rsquo;t make too many Type I errors. However, there were plenty of Type II errors shown in the bottom-left quadrant of the confusion matrix. This is indicated further by the low recall score, meaning that there were plenty of rainy days that we missed out on.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reindexing DataFrame from a list</title>
      <link>http://othrif.github.io/technical_note/python/pandas/reindexfromlist/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/reindexfromlist/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;months = [&#39;Apr&#39;, &#39;Jul&#39;, &#39;Jan&#39;, &#39;Oct&#39;]
temp = [61.956044, 68.934783, 32.133333, 43.434783]
mytemp = {&#39;Mean TemperatureF&#39;: temp}
weather1 = pd.DataFrame(mytemp)
weather1.index=months
print(weather1)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     Mean TemperatureF
Apr          61.956044
Jul          68.934783
Jan          32.133333
Oct          43.434783
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;year = [&#39;Jan&#39;,&#39;Feb&#39;,&#39;Mar&#39;,&#39;Apr&#39;,&#39;May&#39;,&#39;Jun&#39;,&#39;Jul&#39;,&#39;Aug&#39;,&#39;Sep&#39;,&#39;Oct&#39;,&#39;Nov&#39;,&#39;Dec&#39;]

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import pandas
import pandas as pd

# Reindex weather1 using the list year: weather2
weather2 = weather1.reindex(year)

# Print weather2
print(weather2)

# Reindex weather1 using the list year with forward-fill: weather3
weather3 = weather1.reindex(year).ffill()

# Print weather3
print(weather3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     Mean TemperatureF
Jan          32.133333
Feb                NaN
Mar                NaN
Apr          61.956044
May                NaN
Jun                NaN
Jul          68.934783
Aug                NaN
Sep                NaN
Oct          43.434783
Nov                NaN
Dec                NaN
     Mean TemperatureF
Jan          32.133333
Feb          32.133333
Mar          32.133333
Apr          61.956044
May          61.956044
Jun          61.956044
Jul          68.934783
Aug          68.934783
Sep          68.934783
Oct          43.434783
Nov          43.434783
Dec          43.434783
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Same line commands</title>
      <link>http://othrif.github.io/technical_note/python/basics/samelinecommand/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/samelinecommand/</guid>
      <description>&lt;h3 id=&#34;print-in-same-line-with-&#34;&gt;Print in same line with &lt;code&gt;;&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Same line
command1; command2

# Separate lines
command1
command2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;hello&#39;); print(&#39;again&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;hello
again
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Save figure</title>
      <link>http://othrif.github.io/technical_note/python/matplotlibtmp/savefig/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlibtmp/savefig/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
import pandas as pd

seattle_weather = pd.read_csv(&#39;seattle_weather.csv&#39;).loc[:11]
austin_weather = pd.read_csv(&#39;austin_weather.csv&#39;)
seattle_weather[&#39;MONTH&#39;] = pd.to_datetime(seattle_weather[&#39;DATE&#39;], format=&#39;%m&#39;).dt.month_name().str.slice(stop=3)
austin_weather[&#39;MONTH&#39;] = pd.to_datetime(austin_weather[&#39;DATE&#39;], format=&#39;%m&#39;).dt.month_name().str.slice(stop=3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.style.use(&#39;ggplot&#39;)
fig, ax = plt.subplots()

# Add Seattle temperature data in each month with error bars
ax.errorbar(seattle_weather[&#39;MONTH&#39;], seattle_weather[&#39;MLY-TAVG-NORMAL&#39;], yerr=seattle_weather[&#39;MLY-TAVG-STDDEV&#39;])
# Add Austin temperature data in each month with error bars
ax.errorbar(austin_weather[&#39;MONTH&#39;], austin_weather[&#39;MLY-TAVG-NORMAL&#39;], yerr=austin_weather[&#39;MLY-TAVG-STDDEV&#39;]) 

# Set the y-axis label
ax.set_ylabel(&#39;Temperature (Fahrenheit)&#39;)

# Save to file
fig.savefig(&#39;temp_timeserie.jpg&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;savefig_2_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;!ls temp_timeserie.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;temp_timeserie.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;different-file-formats&#34;&gt;Different file formats&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig.savefig(&#39;temp_timeserie.jpg&#39;, quality=50) # For website, lossy compression, less space and less BW, control quality
fig.savefig(&#39;temp_timeserie.png&#39;) # Loss-less compression, high quality, large amount of disk space and large BW
fig.savefig(&#39;temp_timeserie.svg&#39;) # vector&#39;s graphics card, gib or adobe can edit the figure after being produced
fig.savefig(&#39;temp_timeserie.png&#39;, dpi=300) # dots per inch, higher better resolution, larger file size
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;!ls temp_timeserie.*
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;temp_timeserie.jpg temp_timeserie.png temp_timeserie.svg
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;control-size&#34;&gt;control size&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig.set_size_inches([5,3]) # [width, height]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Secant method</title>
      <link>http://othrif.github.io/technical_note/python/computational/secant/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/computational/secant/</guid>
      <description>&lt;p&gt;Root-finding algorithm that has $(1+\sqrt{5})/2$ convergence.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def secant_method(f, x0, x1, iterations):
    &amp;quot;&amp;quot;&amp;quot;Return the root calculated using the secant method.&amp;quot;&amp;quot;&amp;quot;
    for i in range(iterations):
        x2 = x1 - f(x1) * (x1 - x0) / float(f(x1) - f(x0))
        x0, x1 = x1, x2
    return x2

def f_example(x):
    return x**2 - 612

root = secant_method(f_example, 10, 30, 5)

print(&amp;quot;Root: {}&amp;quot;.format(root))  # Root: 24.738633748750722
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Root: 24.738633748750722
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Show errors in bar, plot, and boxplot</title>
      <link>http://othrif.github.io/technical_note/python/matplotlibtmp/errorsplot/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlibtmp/errorsplot/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
import pandas as pd

summer2016 = pd.read_csv(&#39;summer2016.csv&#39;, index_col=0)
mens_rowing = summer2016[summer2016[&#39;Sport&#39;] == &#39;Rowing&#39;]
mens_gymnastics = summer2016[summer2016[&#39;Sport&#39;] == &#39;Gymnastics&#39;]


seattle_weather = pd.read_csv(&#39;seattle_weather.csv&#39;).loc[:11]
austin_weather = pd.read_csv(&#39;austin_weather.csv&#39;)
seattle_weather[&#39;MONTH&#39;] = pd.to_datetime(seattle_weather[&#39;DATE&#39;], format=&#39;%m&#39;).dt.month_name().str.slice(stop=3)
austin_weather[&#39;MONTH&#39;] = pd.to_datetime(austin_weather[&#39;DATE&#39;], format=&#39;%m&#39;).dt.month_name().str.slice(stop=3)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;adding-error-bars-to-a-bar-chart&#34;&gt;Adding error-bars to a bar chart&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots()

# Add a bar for the rowing &amp;quot;Height&amp;quot; column mean/std
ax.bar(&amp;quot;Rowing&amp;quot;, mens_rowing[&#39;Height&#39;].mean(), yerr=mens_rowing[&#39;Height&#39;].std())

# Add a bar for the gymnastics &amp;quot;Height&amp;quot; column mean/std
ax.bar(&amp;quot;Gymnastics&amp;quot;, mens_gymnastics[&#39;Height&#39;].mean(), yerr=mens_gymnastics[&#39;Height&#39;].std())


# Label the y-axis
ax.set_ylabel(&amp;quot;Height (cm)&amp;quot;)

plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;errorsplot_3_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;adding-error-bars-to-a-plot&#34;&gt;Adding error-bars to a plot&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots()

# Add Seattle temperature data in each month with error bars
ax.errorbar(seattle_weather[&#39;MONTH&#39;], seattle_weather[&#39;MLY-TAVG-NORMAL&#39;], yerr=seattle_weather[&#39;MLY-TAVG-STDDEV&#39;])

# Add Austin temperature data in each month with error bars
ax.errorbar(austin_weather[&#39;MONTH&#39;], austin_weather[&#39;MLY-TAVG-NORMAL&#39;], yerr=austin_weather[&#39;MLY-TAVG-STDDEV&#39;]) 

# Set the y-axis label
ax.set_ylabel(&#39;Temperature (Fahrenheit)&#39;)

plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;errorsplot_5_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;creating-boxplots&#34;&gt;Creating boxplots&lt;/h3&gt;
&lt;p&gt;Tell us what the median of the distribution is, what the inter-quartile range is and also what the expected range of approximately 99% of the data should be. Outliers beyond this range are particularly highlighted.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots()

# Add a boxplot for the &amp;quot;Height&amp;quot; column in the DataFrames
ax.boxplot([mens_rowing[&#39;Height&#39;], mens_gymnastics[&#39;Height&#39;]])

# Add x-axis tick labels:
ax.set_xticklabels([&#39;Rowing&#39;, &#39;Gymnastics&#39;])

# Add a y-axis label
ax.set_ylabel(&#39;Height (cm)&#39;)

plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;errorsplot_7_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots()
ax.hist(mens_rowing[&#39;Height&#39;], histtype=&#39;step&#39;, label=&#39;Rowing&#39;)
ax.hist(mens_gymnastics[&#39;Height&#39;], histtype=&#39;step&#39;, label=&#39;Gymnastics&#39;)
ax.legend()
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;errorsplot_8_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Show errors in bar, plot, and boxplot</title>
      <link>http://othrif.github.io/technical_note/python/matplotlibtmp/scatterplot/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlibtmp/scatterplot/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
import pandas as pd

climate_change = pd.read_csv(&#39;climate_change.csv&#39;, parse_dates=[&#39;date&#39;], index_col=&#39;date&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;adding-error-bars-to-a-bar-chart&#34;&gt;Adding error-bars to a bar chart&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots()

# Add data: &amp;quot;co2&amp;quot;, &amp;quot;relative_temp&amp;quot; as x-y, index as color
ax.scatter(climate_change[&#39;co2&#39;], climate_change[&#39;relative_temp&#39;], c=climate_change.index)

# Set the x-axis label to &amp;quot;CO2 (ppm)&amp;quot;
ax.set_xlabel(&#39;CO2 (ppm)&#39;)

# Set the y-axis label to &amp;quot;Relative temperature (C)&amp;quot;
ax.set_ylabel(&#39;Relative temperature (C)&#39;)

plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;scatterplot_3_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slicing and subsetting with .loc and .iloc</title>
      <link>http://othrif.github.io/technical_note/python/pandas/indexlociloc/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/indexlociloc/</guid>
      <description>&lt;h4 id=&#34;generate-some-data&#34;&gt;Generate some data&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import numpy as np
from pandas import Timestamp

mycols = [&#39;store&#39;, &#39;type&#39;, &#39;department&#39;, &#39;date&#39;, &#39;weekly_sales&#39;, &#39;is_holiday&#39;]
content = np.array([[1, &#39;A&#39;, 1, Timestamp(&#39;2010-02-05 00:00:00&#39;), 24924.5, False],[1, &#39;B&#39;, 1, Timestamp(&#39;2010-03-05 00:00:00&#39;), 21827.9, True],[1, &#39;A&#39;, 1, Timestamp(&#39;2010-04-02 00:00:00&#39;), 57258.43, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-05-07 00:00:00&#39;), 17413.94, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-06-04 00:00:00&#39;), 17558.09, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-07-02 00:00:00&#39;), 16333.14, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-08-06 00:00:00&#39;), 17508.41, False],[1, &#39;B&#39;, 1, Timestamp(&#39;2010-09-03 00:00:00&#39;), 16241.78, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2010-10-01 00:00:00&#39;), 20094.19, True],[1, &#39;B&#39;, 1, Timestamp(&#39;2010-11-05 00:00:00&#39;), 34238.88, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-12-03 00:00:00&#39;), 22517.56, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2011-01-07 00:00:00&#39;), 15984.24, False],[1, &#39;C&#39;, 2, Timestamp(&#39;2010-02-05 00:00:00&#39;), 50605.27, True],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-03-05 00:00:00&#39;), 48397.98, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-04-02 00:00:00&#39;), 47450.5, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-05-07 00:00:00&#39;), 47903.01, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-06-04 00:00:00&#39;), 48754.47, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-07-02 00:00:00&#39;), 47077.72, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-08-06 00:00:00&#39;), 50031.73, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-09-03 00:00:00&#39;), 49015.05, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-10-01 00:00:00&#39;), 45829.02, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-11-05 00:00:00&#39;), 46381.43, True],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-12-03 00:00:00&#39;), 44405.02, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2011-01-07 00:00:00&#39;), 43202.29, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-02-05 00:00:00&#39;), 13740.12, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-03-05 00:00:00&#39;), 12275.58, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-04-02 00:00:00&#39;), 11157.08, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-05-07 00:00:00&#39;), 9372.8, True],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-06-04 00:00:00&#39;), 8001.41, False],[1, &#39;C&#39;, 3, Timestamp(&#39;2010-07-02 00:00:00&#39;), 7857.88, True],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-08-06 00:00:00&#39;), 26719.02, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-09-03 00:00:00&#39;), 19081.8, False],[1, &#39;B&#39;, 3, Timestamp(&#39;2010-10-01 00:00:00&#39;), 9775.17, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-11-05 00:00:00&#39;), 9825.22, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-12-03 00:00:00&#39;), 10856.85, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2011-01-07 00:00:00&#39;), 15808.15, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-02-05 00:00:00&#39;), 39954.04, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-03-05 00:00:00&#39;), 38086.19, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-04-02 00:00:00&#39;), 37809.49, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-05-07 00:00:00&#39;), 37168.34, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-06-04 00:00:00&#39;), 40548.19, False],[1, &#39;B&#39;, 4, Timestamp(&#39;2010-07-02 00:00:00&#39;), 39773.71, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-08-06 00:00:00&#39;), 40973.88, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-09-03 00:00:00&#39;), 38321.88, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-10-01 00:00:00&#39;), 34912.45, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-11-05 00:00:00&#39;), 37980.55, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-12-03 00:00:00&#39;), 37110.55, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2011-01-07 00:00:00&#39;), 37947.8, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-02-05 00:00:00&#39;), 32229.38, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-03-05 00:00:00&#39;), 23082.14, False],[1, &#39;B&#39;, 5, Timestamp(&#39;2010-04-02 00:00:00&#39;), 29967.92, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-05-07 00:00:00&#39;), 19260.44, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-06-04 00:00:00&#39;), 22932.26, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-07-02 00:00:00&#39;), 18887.71, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-08-06 00:00:00&#39;), 16926.17, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-09-03 00:00:00&#39;), 15390.52, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-10-01 00:00:00&#39;), 23381.38, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-11-05 00:00:00&#39;), 23903.81, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-12-03 00:00:00&#39;), 36472.02, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2011-01-07 00:00:00&#39;), 22699.69, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-02-05 00:00:00&#39;), 5749.03, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-03-05 00:00:00&#39;), 4221.25, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-04-02 00:00:00&#39;), 4132.61, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-05-07 00:00:00&#39;), 7477.7, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-06-04 00:00:00&#39;), 5484.9, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-07-02 00:00:00&#39;), 4541.91, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-08-06 00:00:00&#39;), 4700.38, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-09-03 00:00:00&#39;), 3553.75, False],[1, &#39;B&#39;, 6, Timestamp(&#39;2010-10-01 00:00:00&#39;), 2876.19, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-11-05 00:00:00&#39;), 5036.99, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-12-03 00:00:00&#39;), 6356.96, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2011-01-07 00:00:00&#39;), 1376.15, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-02-05 00:00:00&#39;), 21084.08, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-03-05 00:00:00&#39;), 19659.7, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-04-02 00:00:00&#39;), 22427.62, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-05-07 00:00:00&#39;), 20457.62, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-06-04 00:00:00&#39;), 44563.68, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-07-02 00:00:00&#39;), 22589.0, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-08-06 00:00:00&#39;), 21842.57, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-09-03 00:00:00&#39;), 18005.65, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-10-01 00:00:00&#39;), 16481.79, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-11-05 00:00:00&#39;), 19136.58, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-12-03 00:00:00&#39;), 47406.83, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2011-01-07 00:00:00&#39;), 17516.16, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-02-05 00:00:00&#39;), 40129.01, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-03-05 00:00:00&#39;), 38776.09, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-04-02 00:00:00&#39;), 38151.58, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-05-07 00:00:00&#39;), 35393.78, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-06-04 00:00:00&#39;), 35181.47, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-07-02 00:00:00&#39;), 35580.01, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-08-06 00:00:00&#39;), 34833.35, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-09-03 00:00:00&#39;), 35562.68, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-10-01 00:00:00&#39;), 34658.25, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-11-05 00:00:00&#39;), 36182.58, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-12-03 00:00:00&#39;), 36222.74, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2011-01-07 00:00:00&#39;), 36599.46, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-02-05 00:00:00&#39;), 16930.99, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-03-05 00:00:00&#39;), 24064.7, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-04-02 00:00:00&#39;), 25435.02, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-05-07 00:00:00&#39;), 27588.34, False]])
df = pd.DataFrame(content, columns=mycols)
df[&#39;frac_sales&#39;] = df[&#39;weekly_sales&#39;]*np.random.rand()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;24924.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;2747.6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;21827.9&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;2406.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-04-02&lt;/td&gt;
      &lt;td&gt;57258.4&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;6311.98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-05-07&lt;/td&gt;
      &lt;td&gt;17413.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1919.66&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-06-04&lt;/td&gt;
      &lt;td&gt;17558.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1935.55&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;loc&#34;&gt;&lt;code&gt;loc[]&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;DataFrames can be sliced by index values using &lt;code&gt;loc[]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can only slice an index if the index is sorted (using .sort_index())&lt;/li&gt;
&lt;li&gt;To slice at the outer level, first and last can be strings&lt;/li&gt;
&lt;li&gt;To slice at inner levels, first and last should be tuples&lt;/li&gt;
&lt;li&gt;If you pass a single slice to .loc[], it will slice the rows&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_srt = df.set_index([&#39;type&#39;,&#39;department&#39;]).sort_index()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_srt.loc[&#39;A&#39;:&#39;B&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;5&#34; valign=&#34;top&#34;&gt;A&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;24924.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;2747.6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-04-02&lt;/td&gt;
      &lt;td&gt;57258.4&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;6311.98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-10-01&lt;/td&gt;
      &lt;td&gt;20094.2&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;2215.12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2011-01-07&lt;/td&gt;
      &lt;td&gt;15984.2&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1762.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;48398&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;5335.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;5&#34; valign=&#34;top&#34;&gt;B&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-11-05&lt;/td&gt;
      &lt;td&gt;34238.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;3774.38&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-10-01&lt;/td&gt;
      &lt;td&gt;9775.17&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1077.58&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-07-02&lt;/td&gt;
      &lt;td&gt;39773.7&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;4384.53&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-04-02&lt;/td&gt;
      &lt;td&gt;29967.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;3303.57&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-10-01&lt;/td&gt;
      &lt;td&gt;2876.19&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;317.062&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;93 rows × 5 columns&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_srt.loc[(&#39;A&#39;,2):(&#39;B&#39;,1)]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;8&#34; valign=&#34;top&#34;&gt;A&lt;/th&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;48398&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;5335.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-04-02&lt;/td&gt;
      &lt;td&gt;47450.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;5230.79&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-05-07&lt;/td&gt;
      &lt;td&gt;47903&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;5280.67&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-06-04&lt;/td&gt;
      &lt;td&gt;48754.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;5374.54&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-07-02&lt;/td&gt;
      &lt;td&gt;47077.7&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;5189.7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-04-02&lt;/td&gt;
      &lt;td&gt;25435&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;2803.87&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-05-07&lt;/td&gt;
      &lt;td&gt;27588.3&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;3041.25&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;3&#34; valign=&#34;top&#34;&gt;B&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;21827.9&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;2406.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-09-03&lt;/td&gt;
      &lt;td&gt;16241.8&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1790.44&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-11-05&lt;/td&gt;
      &lt;td&gt;34238.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;3774.38&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;85 rows × 5 columns&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_srt.loc[(&#39;A&#39;,2):(&#39;B&#39;,1),[&#39;weekly_sales&#39;,&#39;frac_sales&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;8&#34; valign=&#34;top&#34;&gt;A&lt;/th&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;48398&lt;/td&gt;
      &lt;td&gt;5335.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;47450.5&lt;/td&gt;
      &lt;td&gt;5230.79&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;47903&lt;/td&gt;
      &lt;td&gt;5280.67&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;48754.5&lt;/td&gt;
      &lt;td&gt;5374.54&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;47077.7&lt;/td&gt;
      &lt;td&gt;5189.7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;25435&lt;/td&gt;
      &lt;td&gt;2803.87&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;27588.3&lt;/td&gt;
      &lt;td&gt;3041.25&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;3&#34; valign=&#34;top&#34;&gt;B&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;21827.9&lt;/td&gt;
      &lt;td&gt;2406.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;16241.8&lt;/td&gt;
      &lt;td&gt;1790.44&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;34238.9&lt;/td&gt;
      &lt;td&gt;3774.38&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;85 rows × 2 columns&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_srt.loc[(&#39;A&#39;,2):(&#39;B&#39;,1),&#39;weekly_sales&#39;:&#39;frac_sales&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
      &lt;th&gt;frac_sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;8&#34; valign=&#34;top&#34;&gt;A&lt;/th&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;48398&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;5335.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;47450.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;5230.79&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;47903&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;5280.67&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;48754.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;5374.54&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;47077.7&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;5189.7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;25435&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;2803.87&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;27588.3&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;3041.25&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;3&#34; valign=&#34;top&#34;&gt;B&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;21827.9&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;2406.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;16241.8&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1790.44&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;34238.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;3774.38&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;85 rows × 3 columns&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&#34;iloc&#34;&gt;&lt;code&gt;iloc[]&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.iloc[:5,2:3]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Slicing time series</title>
      <link>http://othrif.github.io/technical_note/python/pandas/slicetimeseries/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/slicetimeseries/</guid>
      <description>&lt;p&gt;Add the date column to the index, then use &lt;code&gt;.loc[]&lt;/code&gt; to perform the subsetting. The important thing to remember is to keep your dates in ISO 8601 format, that is, &lt;code&gt;yyyy-mm-dd&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Important:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When filtering with &lt;code&gt;[]&lt;/code&gt; between &lt;code&gt;2010&lt;/code&gt; and &lt;code&gt;2012&lt;/code&gt;, the dates go from &lt;code&gt;2010-01-01&lt;/code&gt; to &lt;code&gt;2012-01-01&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When filter with &lt;code&gt;.loc[]&lt;/code&gt; is inclusive in dates, see the two cases below&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;generate-some-data&#34;&gt;Generate some data&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import numpy as np
from pandas import Timestamp

mycols = [&#39;store&#39;, &#39;type&#39;, &#39;department&#39;, &#39;date&#39;, &#39;weekly_sales&#39;, &#39;is_holiday&#39;]
content = np.array([[1, &#39;A&#39;, 1, Timestamp(&#39;2010-02-05 00:00:00&#39;), 24924.5, False],[1, &#39;B&#39;, 1, Timestamp(&#39;2010-03-05 00:00:00&#39;), 21827.9, True],[1, &#39;A&#39;, 1, Timestamp(&#39;2010-04-02 00:00:00&#39;), 57258.43, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-05-07 00:00:00&#39;), 17413.94, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-06-04 00:00:00&#39;), 17558.09, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-07-02 00:00:00&#39;), 16333.14, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-08-06 00:00:00&#39;), 17508.41, False],[1, &#39;B&#39;, 1, Timestamp(&#39;2010-09-03 00:00:00&#39;), 16241.78, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2010-10-01 00:00:00&#39;), 20094.19, True],[1, &#39;B&#39;, 1, Timestamp(&#39;2010-11-05 00:00:00&#39;), 34238.88, False],[1, &#39;C&#39;, 1, Timestamp(&#39;2010-12-03 00:00:00&#39;), 22517.56, False],[1, &#39;A&#39;, 1, Timestamp(&#39;2011-01-07 00:00:00&#39;), 15984.24, False],[1, &#39;C&#39;, 2, Timestamp(&#39;2010-02-05 00:00:00&#39;), 50605.27, True],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-03-05 00:00:00&#39;), 48397.98, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-04-02 00:00:00&#39;), 47450.5, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-05-07 00:00:00&#39;), 47903.01, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-06-04 00:00:00&#39;), 48754.47, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-07-02 00:00:00&#39;), 47077.72, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-08-06 00:00:00&#39;), 50031.73, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-09-03 00:00:00&#39;), 49015.05, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-10-01 00:00:00&#39;), 45829.02, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-11-05 00:00:00&#39;), 46381.43, True],[1, &#39;A&#39;, 2, Timestamp(&#39;2010-12-03 00:00:00&#39;), 44405.02, False],[1, &#39;A&#39;, 2, Timestamp(&#39;2011-01-07 00:00:00&#39;), 43202.29, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-02-05 00:00:00&#39;), 13740.12, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-03-05 00:00:00&#39;), 12275.58, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-04-02 00:00:00&#39;), 11157.08, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-05-07 00:00:00&#39;), 9372.8, True],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-06-04 00:00:00&#39;), 8001.41, False],[1, &#39;C&#39;, 3, Timestamp(&#39;2010-07-02 00:00:00&#39;), 7857.88, True],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-08-06 00:00:00&#39;), 26719.02, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-09-03 00:00:00&#39;), 19081.8, False],[1, &#39;B&#39;, 3, Timestamp(&#39;2010-10-01 00:00:00&#39;), 9775.17, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-11-05 00:00:00&#39;), 9825.22, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2010-12-03 00:00:00&#39;), 10856.85, False],[1, &#39;A&#39;, 3, Timestamp(&#39;2011-01-07 00:00:00&#39;), 15808.15, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-02-05 00:00:00&#39;), 39954.04, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-03-05 00:00:00&#39;), 38086.19, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-04-02 00:00:00&#39;), 37809.49, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-05-07 00:00:00&#39;), 37168.34, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-06-04 00:00:00&#39;), 40548.19, False],[1, &#39;B&#39;, 4, Timestamp(&#39;2010-07-02 00:00:00&#39;), 39773.71, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-08-06 00:00:00&#39;), 40973.88, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-09-03 00:00:00&#39;), 38321.88, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-10-01 00:00:00&#39;), 34912.45, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-11-05 00:00:00&#39;), 37980.55, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2010-12-03 00:00:00&#39;), 37110.55, False],[1, &#39;A&#39;, 4, Timestamp(&#39;2011-01-07 00:00:00&#39;), 37947.8, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-02-05 00:00:00&#39;), 32229.38, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-03-05 00:00:00&#39;), 23082.14, False],[1, &#39;B&#39;, 5, Timestamp(&#39;2010-04-02 00:00:00&#39;), 29967.92, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-05-07 00:00:00&#39;), 19260.44, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-06-04 00:00:00&#39;), 22932.26, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-07-02 00:00:00&#39;), 18887.71, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-08-06 00:00:00&#39;), 16926.17, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-09-03 00:00:00&#39;), 15390.52, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-10-01 00:00:00&#39;), 23381.38, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-11-05 00:00:00&#39;), 23903.81, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2010-12-03 00:00:00&#39;), 36472.02, False],[1, &#39;A&#39;, 5, Timestamp(&#39;2011-01-07 00:00:00&#39;), 22699.69, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-02-05 00:00:00&#39;), 5749.03, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-03-05 00:00:00&#39;), 4221.25, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-04-02 00:00:00&#39;), 4132.61, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-05-07 00:00:00&#39;), 7477.7, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-06-04 00:00:00&#39;), 5484.9, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-07-02 00:00:00&#39;), 4541.91, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-08-06 00:00:00&#39;), 4700.38, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-09-03 00:00:00&#39;), 3553.75, False],[1, &#39;B&#39;, 6, Timestamp(&#39;2010-10-01 00:00:00&#39;), 2876.19, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-11-05 00:00:00&#39;), 5036.99, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2010-12-03 00:00:00&#39;), 6356.96, False],[1, &#39;A&#39;, 6, Timestamp(&#39;2011-01-07 00:00:00&#39;), 1376.15, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-02-05 00:00:00&#39;), 21084.08, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-03-05 00:00:00&#39;), 19659.7, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-04-02 00:00:00&#39;), 22427.62, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-05-07 00:00:00&#39;), 20457.62, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-06-04 00:00:00&#39;), 44563.68, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-07-02 00:00:00&#39;), 22589.0, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-08-06 00:00:00&#39;), 21842.57, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-09-03 00:00:00&#39;), 18005.65, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-10-01 00:00:00&#39;), 16481.79, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-11-05 00:00:00&#39;), 19136.58, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2010-12-03 00:00:00&#39;), 47406.83, False],[1, &#39;A&#39;, 7, Timestamp(&#39;2011-01-07 00:00:00&#39;), 17516.16, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-02-05 00:00:00&#39;), 40129.01, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-03-05 00:00:00&#39;), 38776.09, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-04-02 00:00:00&#39;), 38151.58, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-05-07 00:00:00&#39;), 35393.78, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-06-04 00:00:00&#39;), 35181.47, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-07-02 00:00:00&#39;), 35580.01, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-08-06 00:00:00&#39;), 34833.35, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-09-03 00:00:00&#39;), 35562.68, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-10-01 00:00:00&#39;), 34658.25, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-11-05 00:00:00&#39;), 36182.58, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2010-12-03 00:00:00&#39;), 36222.74, False],[1, &#39;A&#39;, 8, Timestamp(&#39;2011-01-07 00:00:00&#39;), 36599.46, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-02-05 00:00:00&#39;), 16930.99, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-03-05 00:00:00&#39;), 24064.7, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-04-02 00:00:00&#39;), 25435.02, False],[1, &#39;A&#39;, 9, Timestamp(&#39;2010-05-07 00:00:00&#39;), 27588.34, False]])
df = pd.DataFrame(content, columns=mycols)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;24924.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-03-05&lt;/td&gt;
      &lt;td&gt;21827.9&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-04-02&lt;/td&gt;
      &lt;td&gt;57258.4&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-05-07&lt;/td&gt;
      &lt;td&gt;17413.9&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-06-04&lt;/td&gt;
      &lt;td&gt;17558.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;The time range below gives january-february, Note the real range is &lt;code&gt;2010-01-01&lt;/code&gt; to &lt;code&gt;2010-03-01&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[ (&#39;2010-01&#39; &amp;lt;= df[&#39;date&#39;]) &amp;amp; (df[&#39;date&#39;] &amp;lt; &#39;2010-03&#39;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;24924.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;50605.3&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;24&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;13740.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;36&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;39954&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;48&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;32229.4&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;60&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;5749.03&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;72&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;21084.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;84&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;40129&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;96&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;2010-02-05&lt;/td&gt;
      &lt;td&gt;16931&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_ind = df.set_index(&#39;date&#39;).sort_index()
df_ind.loc[&#39;2010-01&#39;:&#39;2010-03&#39;] # loc is inclusive in dates
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;store&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;department&lt;/th&gt;
      &lt;th&gt;weekly_sales&lt;/th&gt;
      &lt;th&gt;is_holiday&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-02-05&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;24924.5&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-02-05&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;16931&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-02-05&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;40129&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-02-05&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;21084.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-02-05&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;5749.03&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-02-05&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;32229.4&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-02-05&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;39954&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-02-05&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;50605.3&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-02-05&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;13740.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-03-05&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;24064.7&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-03-05&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;38776.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-03-05&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;19659.7&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-03-05&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;4221.25&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-03-05&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;38086.2&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-03-05&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;12275.6&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-03-05&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;23082.1&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-03-05&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;21827.9&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2010-03-05&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;48398&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Sort by size of files/directories</title>
      <link>http://othrif.github.io/technical_note/linux/basics/sortsize/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/linux/basics/sortsize/</guid>
      <description>&lt;h3 id=&#34;human-readable&#34;&gt;Human readable&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;du -sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;sort-by-size&#34;&gt;Sort by size&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;du -h -d 1 | sort -n -r
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;du -d 1 : Only the disk usage of the current level of directories and files is displayed &lt;br&gt;
sort -n -r : Sort in reverse order according to value&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sort DataFrames</title>
      <link>http://othrif.github.io/technical_note/python/pandas/sortdf/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/sortdf/</guid>
      <description>&lt;p&gt;Most common types of data manipulation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sorting rows&lt;/li&gt;
&lt;li&gt;subsetting columns&lt;/li&gt;
&lt;li&gt;subsetting rows&lt;/li&gt;
&lt;li&gt;adding new columns&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;generate-some-data&#34;&gt;Generate some data&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

# Build cars DataFrame
names = [&#39;United States&#39;, &#39;Australia&#39;, &#39;Japan&#39;, &#39;India&#39;, &#39;Russia&#39;, &#39;Morocco&#39;, &#39;Egypt&#39;]
dr =  [True, False, False, False, True, True, True]
cpc = [809, 731, 588, 18, 200, 70, 45]
row_labels = [&#39;US&#39;, &#39;AUS&#39;, &#39;JPN&#39;, &#39;IN&#39;, &#39;RU&#39;, &#39;MOR&#39;, &#39;EG&#39;]
cars_dict = {&#39;country&#39;:names, &#39;drives_right&#39;:dr, &#39;cars_per_cap&#39;:cpc }
cars = pd.DataFrame(cars_dict)
cars.index = row_labels
print(cars)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;           country  drives_right  cars_per_cap
US   United States          True           809
AUS      Australia         False           731
JPN          Japan         False           588
IN           India         False            18
RU          Russia          True           200
MOR        Morocco          True            70
EG           Egypt          True            45
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;sorting-row&#34;&gt;Sorting row&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars.sort_values(&#39;cars_per_cap&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;country&lt;/th&gt;
      &lt;th&gt;drives_right&lt;/th&gt;
      &lt;th&gt;cars_per_cap&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;IN&lt;/th&gt;
      &lt;td&gt;India&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;EG&lt;/th&gt;
      &lt;td&gt;Egypt&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;45&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MOR&lt;/th&gt;
      &lt;td&gt;Morocco&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;RU&lt;/th&gt;
      &lt;td&gt;Russia&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;200&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;JPN&lt;/th&gt;
      &lt;td&gt;Japan&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;588&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;AUS&lt;/th&gt;
      &lt;td&gt;Australia&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;731&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;US&lt;/th&gt;
      &lt;td&gt;United States&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;809&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars.sort_values([&#39;drives_right&#39;,&#39;cars_per_cap&#39;], ascending=[True,False])
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;country&lt;/th&gt;
      &lt;th&gt;drives_right&lt;/th&gt;
      &lt;th&gt;cars_per_cap&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;AUS&lt;/th&gt;
      &lt;td&gt;Australia&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;731&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;JPN&lt;/th&gt;
      &lt;td&gt;Japan&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;588&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;IN&lt;/th&gt;
      &lt;td&gt;India&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;US&lt;/th&gt;
      &lt;td&gt;United States&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;809&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;RU&lt;/th&gt;
      &lt;td&gt;Russia&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;200&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MOR&lt;/th&gt;
      &lt;td&gt;Morocco&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;EG&lt;/th&gt;
      &lt;td&gt;Egypt&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;45&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;subsetting-columns&#34;&gt;subsetting columns&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars[&#39;country&#39;].head()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;US     United States
AUS        Australia
JPN            Japan
IN             India
RU            Russia
Name: country, dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars[[&#39;country&#39;,&#39;cars_per_cap&#39;]].head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;country&lt;/th&gt;
      &lt;th&gt;cars_per_cap&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;US&lt;/th&gt;
      &lt;td&gt;United States&lt;/td&gt;
      &lt;td&gt;809&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;AUS&lt;/th&gt;
      &lt;td&gt;Australia&lt;/td&gt;
      &lt;td&gt;731&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;JPN&lt;/th&gt;
      &lt;td&gt;Japan&lt;/td&gt;
      &lt;td&gt;588&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;IN&lt;/th&gt;
      &lt;td&gt;India&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;RU&lt;/th&gt;
      &lt;td&gt;Russia&lt;/td&gt;
      &lt;td&gt;200&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;subsetting-rows&#34;&gt;subsetting rows&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars[cars[&#39;cars_per_cap&#39;]&amp;lt;100].head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;country&lt;/th&gt;
      &lt;th&gt;drives_right&lt;/th&gt;
      &lt;th&gt;cars_per_cap&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;IN&lt;/th&gt;
      &lt;td&gt;India&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MOR&lt;/th&gt;
      &lt;td&gt;Morocco&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;EG&lt;/th&gt;
      &lt;td&gt;Egypt&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;45&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h4 id=&#34;subsetting-by-categorical-variables&#34;&gt;Subsetting by categorical variables&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.isin()&lt;/code&gt; one condition instead of several &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars[cars[&#39;country&#39;].isin([&#39;Morocco&#39;,&#39;Egypt&#39;])]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;country&lt;/th&gt;
      &lt;th&gt;drives_right&lt;/th&gt;
      &lt;th&gt;cars_per_cap&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;MOR&lt;/th&gt;
      &lt;td&gt;Morocco&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;EG&lt;/th&gt;
      &lt;td&gt;Egypt&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;45&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;adding-new-columns&#34;&gt;adding new columns&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars[&#39;cars_per_cap_10&#39;] = cars[&#39;cars_per_cap&#39;]*10
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cars.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;country&lt;/th&gt;
      &lt;th&gt;drives_right&lt;/th&gt;
      &lt;th&gt;cars_per_cap&lt;/th&gt;
      &lt;th&gt;cars_per_cap_10&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;US&lt;/th&gt;
      &lt;td&gt;United States&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;809&lt;/td&gt;
      &lt;td&gt;8090&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;AUS&lt;/th&gt;
      &lt;td&gt;Australia&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;731&lt;/td&gt;
      &lt;td&gt;7310&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;JPN&lt;/th&gt;
      &lt;td&gt;Japan&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;588&lt;/td&gt;
      &lt;td&gt;5880&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;IN&lt;/th&gt;
      &lt;td&gt;India&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;180&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;RU&lt;/th&gt;
      &lt;td&gt;Russia&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;200&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Sorting</title>
      <link>http://othrif.github.io/technical_note/cpp/basics/sort/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/cpp/basics/sort/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
using namespace std;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;sort-string&#34;&gt;Sort string&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;string str = &amp;quot;hgfedcba&amp;quot;;
 string c_str(str);
 sort(c_str.begin(), c_str.end());
cout &amp;lt;&amp;lt; c_str &amp;lt;&amp;lt; endl;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;abcdefgh
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Sorting DataFrame with Index &amp; columns</title>
      <link>http://othrif.github.io/technical_note/python/pandas/sortindexcolumns/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/sortindexcolumns/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;months = [&#39;Apr&#39;, &#39;Jul&#39;, &#39;Jan&#39;, &#39;Oct&#39;]
temp = [61.956044, 68.934783, 32.133333, 43.434783]
mytemp = {&#39;Mean TemperatureF&#39;: temp}
weather1 = pd.DataFrame(mytemp)
weather1.index=months
print(weather1)

# Sort the index of weather1 in alphabetical order: weather2
weather2 = weather1.sort_index()

# Print the head of weather2
print(weather2.head())

# Sort the index of weather1 in reverse alphabetical order: weather3
weather3 = weather1.sort_index(ascending=False)

# Print the head of weather3
print(weather3.head())


# Sort weather1 numerically using the values of &#39;Max TemperatureF&#39;: weather4
weather4 = weather1.sort_values(&#39;Mean TemperatureF&#39;)

# Print the head of weather4
print(weather4.head())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;     Mean TemperatureF
Apr          61.956044
Jul          68.934783
Jan          32.133333
Oct          43.434783
     Mean TemperatureF
Apr          61.956044
Jan          32.133333
Jul          68.934783
Oct          43.434783
     Mean TemperatureF
Oct          43.434783
Jul          68.934783
Jan          32.133333
Apr          61.956044
     Mean TemperatureF
Jan          32.133333
Oct          43.434783
Apr          61.956044
Jul          68.934783
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Splitting strings</title>
      <link>http://othrif.github.io/technical_note/python/basics/splitting/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/splitting/</guid>
      <description>&lt;h3 id=&#34;basic-splitting&#34;&gt;Basic splitting&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str = &amp;quot;I am playing with;##9Strings () while testing \n how these randome ## chE@sracters worK;\nhere\\right ## there&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;splitseperatormaxsplitpositions&#34;&gt;split(seperator,maxsplit=positions)&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.split()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I&#39;,
 &#39;am&#39;,
 &#39;playing&#39;,
 &#39;with;##9Strings&#39;,
 &#39;()&#39;,
 &#39;while&#39;,
 &#39;testing&#39;,
 &#39;how&#39;,
 &#39;these&#39;,
 &#39;randome&#39;,
 &#39;##&#39;,
 &#39;chE@sracters&#39;,
 &#39;worK;here\\right&#39;,
 &#39;##&#39;,
 &#39;there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.split(&#39;##&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;&#39;,
 &#39;9Strings () while testing \n how these randome &#39;,
 &#39; chE@sracters worK;here\\right &#39;,
 &#39; there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.split(&#39;##&#39;,2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;&#39;,
 &#39;9Strings () while testing \n how these randome &#39;,
 &#39; chE@sracters worK;here\\right ## there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.split(&#39;##&#39;,maxsplit=2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;&#39;,
 &#39;9Strings () while testing \n how these randome &#39;,
 &#39; chE@sracters worK;here\\right ## there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;rsplitseperatormaxsplitpositions&#34;&gt;rsplit(seperator,maxsplit=positions)&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.rsplit(&#39;##&#39;,maxsplit=2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;##9Strings () while testing \n how these randome &#39;,
 &#39; chE@sracters worK;here\\right &#39;,
 &#39; there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;consecutive-delimiters&#34;&gt;Consecutive delimiters&lt;/h4&gt;
&lt;p&gt;Consecutive delimiters give empty strings&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.rsplit(&#39;#&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;&#39;,
 &#39;&#39;,
 &#39;9Strings () while testing \n how these randome &#39;,
 &#39;&#39;,
 &#39; chE@sracters worK;here\\right &#39;,
 &#39;&#39;,
 &#39; there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;helo  ljdk lksd   klsd&#39;.rsplit()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;helo&#39;, &#39;ljdk&#39;, &#39;lksd&#39;, &#39;klsd&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;helo  ljdk lksd   klsd&#39;.rsplit(&#39; &#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;helo&#39;, &#39;&#39;, &#39;ljdk&#39;, &#39;lksd&#39;, &#39;&#39;, &#39;&#39;, &#39;klsd&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;disasembling-strings-to-lines&#34;&gt;Disasembling strings to lines&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.splitlines()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;##9Strings () while testing &#39;,
 &#39; how these randome ## chE@sracters worK;&#39;,
 &#39;here\\right ## there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Keep end of lines by passing &lt;code&gt;True&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str.splitlines(True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;I am playing with;##9Strings () while testing \n&#39;,
 &#39; how these randome ## chE@sracters worK;\n&#39;,
 &#39;here\\right ## there&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;partition&#34;&gt;Partition&lt;/h3&gt;
&lt;p&gt;Split string at the first occurence of seperator, and return 3 tuple: (before sep, sep, after sep)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;first;second;third&#39;.partition(&#39;;&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(&#39;first&#39;, &#39;;&#39;, &#39;second;third&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;compare with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;first;second;third&#39;.split(&#39;;&#39;,1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;first&#39;, &#39;second;third&#39;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>String manipulation</title>
      <link>http://othrif.github.io/technical_note/cpp/basics/bitwiseoperations/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/cpp/basics/bitwiseoperations/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
using namespace std;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;convert-between-different-dec-and-binary&#34;&gt;Convert between different Dec and Binary&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;bitset&amp;gt;

std::bitset&amp;lt;32&amp;gt;(1).to_string()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;00000000000000000000000000000001&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;bitwise-operations&#34;&gt;Bitwise operations&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;cout &amp;lt;&amp;lt; bitset&amp;lt;32&amp;gt;(1) &amp;lt;&amp;lt; endl;
cout &amp;lt;&amp;lt; &amp;quot;================================&amp;quot; &amp;lt;&amp;lt; endl;
for (int i = 0; i &amp;lt; 32; i++)
cout &amp;lt;&amp;lt; bitset&amp;lt;32&amp;gt;(1 &amp;lt;&amp;lt; i) &amp;lt;&amp;lt; endl;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;00000000000000000000000000000001
================================
00000000000000000000000000000001
00000000000000000000000000000010
00000000000000000000000000000100
00000000000000000000000000001000
00000000000000000000000000010000
00000000000000000000000000100000
00000000000000000000000001000000
00000000000000000000000010000000
00000000000000000000000100000000
00000000000000000000001000000000
00000000000000000000010000000000
00000000000000000000100000000000
00000000000000000001000000000000
00000000000000000010000000000000
00000000000000000100000000000000
00000000000000001000000000000000
00000000000000010000000000000000
00000000000000100000000000000000
00000000000001000000000000000000
00000000000010000000000000000000
00000000000100000000000000000000
00000000001000000000000000000000
00000000010000000000000000000000
00000000100000000000000000000000
00000001000000000000000000000000
00000010000000000000000000000000
00000100000000000000000000000000
00001000000000000000000000000000
00010000000000000000000000000000
00100000000000000000000000000000
01000000000000000000000000000000
10000000000000000000000000000000
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;check-bits&#34;&gt;Check bits&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;{
    int value = 7;
    cout &amp;lt;&amp;lt; value &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; std::bitset&amp;lt;32&amp;gt;(1 ) &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; std::bitset&amp;lt;32&amp;gt;(1 &amp;lt;&amp;lt; value) &amp;lt;&amp;lt; endl;
    unsigned int checker = 0;
    cout &amp;lt;&amp;lt; std::bitset&amp;lt;32&amp;gt;(checker) &amp;lt;&amp;lt; endl;
    checker = (1 &amp;lt;&amp;lt; value);
    cout &amp;lt;&amp;lt; std::bitset&amp;lt;32&amp;gt;(checker) &amp;lt;&amp;lt; endl;
    checker |= (1 &amp;lt;&amp;lt; 3);
    cout &amp;lt;&amp;lt; std::bitset&amp;lt;32&amp;gt;(checker) &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; bool(checker &amp;amp; 1 &amp;lt;&amp;lt; value) &amp;lt;&amp;lt; endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;7
00000000000000000000000000000001
00000000000000000000000010000000
00000000000000000000000000000000
00000000000000000000000010000000
00000000000000000000000010001000
1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Subsetting Numpy arrays</title>
      <link>http://othrif.github.io/technical_note/python/matplotlib/subsetting/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlib/subsetting/</guid>
      <description>&lt;h3 id=&#34;subset-numpy-arrays&#34;&gt;Subset numpy arrays&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = [4 , 9 , 6, 3, 1]
y = np.array(x)
y[1]
high = y &amp;gt; 5
y[high]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([9, 6])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(y[high])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[9 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;indexing-similar-between-lists-and-numpy-arrays&#34;&gt;Indexing similar between lists and Numpy arrays&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;]
x[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;b&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np_x = np.array(x)
np_x[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;b&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;methods-can-be-different&#34;&gt;Methods can be different&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = [4 , 9 , 6, 3, 1]
x+x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[4, 9, 6, 3, 1, 4, 9, 6, 3, 1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.array(x)+np.array(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 8, 18, 12,  6,  2])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Subsetting Numpy arrays</title>
      <link>http://othrif.github.io/technical_note/python/numpy/subsetting/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/numpy/subsetting/</guid>
      <description>&lt;h3 id=&#34;subset-numpy-arrays&#34;&gt;Subset numpy arrays&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = [4 , 9 , 6, 3, 1]
y = np.array(x)
y[1]
high = y &amp;gt; 5
y[high]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([9, 6])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(y[high])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[9 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;indexing-similar-between-lists-and-numpy-arrays&#34;&gt;Indexing similar between lists and Numpy arrays&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;]
x[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;b&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np_x = np.array(x)
np_x[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;b&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;methods-can-be-different&#34;&gt;Methods can be different&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = [4 , 9 , 6, 3, 1]
x+x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[4, 9, 6, 3, 1, 4, 9, 6, 3, 1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.array(x)+np.array(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 8, 18, 12,  6,  2])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Template</title>
      <link>http://othrif.github.io/technical_note/python/basics/template/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/template/</guid>
      <description>&lt;h3 id=&#34;title&#34;&gt;Title&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Timeout decorator for a function that runs longer than expected</title>
      <link>http://othrif.github.io/technical_note/python/basics/timeout_decorator/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/timeout_decorator/</guid>
      <description>&lt;h3 id=&#34;pass-argument-to-decorator&#34;&gt;Pass argument to decorator&lt;/h3&gt;
&lt;p&gt;Timeout decorator for a function that runs longer than expected&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import signal

def raise_timeout(*args, **kwargs):
    raise TimeoutError(&#39;This function has timed out!!!!!&#39;)

# When an &amp;quot;alarm&amp;quot; signal goes off, call raise_timeout()
signal.signal(signalnum=signal.SIGALRM, handler=raise_timeout)
# Set off an alarm in 5 seconds
signal.alarm(5)
# Cancel the alarm
signal.alarm(0)
raise_timeout()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TimeoutError                              Traceback (most recent call last)

&amp;lt;ipython-input-47-a751c17ccd28&amp;gt; in &amp;lt;module&amp;gt;
     10 # Cancel the alarm
     11 signal.alarm(0)
---&amp;gt; 12 raise_timeout()


&amp;lt;ipython-input-47-a751c17ccd28&amp;gt; in raise_timeout(*args, **kwargs)
      2 
      3 def raise_timeout(*args, **kwargs):
----&amp;gt; 4     raise TimeoutError(&#39;This function has timed out!!!!!&#39;)
      5 
      6 # When an &amp;quot;alarm&amp;quot; signal goes off, call raise_timeout()


TimeoutError: This function has timed out!!!!!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import wraps
import time 
def timeout(n_seconds):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            # Set an alarm for n seconds
            signal.alarm(n_seconds)
            try:
                # Call the decorated func
                return func(*args,**kwargs)
            finally:
                # Cancel alarm
                signal.alarm(0)
        return wrapper
    return decorator
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@timeout(5)
def foo():
    time.sleep(10)
    print(&#39;foo!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;foo()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TimeoutError                              Traceback (most recent call last)

&amp;lt;ipython-input-50-c19b6d9633cf&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 foo()


&amp;lt;ipython-input-48-d1ae5af212c1&amp;gt; in wrapper(*args, **kwargs)
      9             try:
     10                 # Call the decorated func
---&amp;gt; 11                 return func(*args,**kwargs)
     12             finally:
     13                 # Cancel alarm


&amp;lt;ipython-input-49-b4a5c0804cd2&amp;gt; in foo()
      1 @timeout(5)
      2 def foo():
----&amp;gt; 3     time.sleep(10)
      4     print(&#39;foo!&#39;)


&amp;lt;ipython-input-47-a751c17ccd28&amp;gt; in raise_timeout(*args, **kwargs)
      2 
      3 def raise_timeout(*args, **kwargs):
----&amp;gt; 4     raise TimeoutError(&#39;This function has timed out!!!!!&#39;)
      5 
      6 # When an &amp;quot;alarm&amp;quot; signal goes off, call raise_timeout()


TimeoutError: This function has timed out!!!!!
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Timer decorator for how long a function took to run</title>
      <link>http://othrif.github.io/technical_note/python/basics/timer_decorator/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/timer_decorator/</guid>
      <description>&lt;h3 id=&#34;timer-decorator&#34;&gt;Timer decorator&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import time 

def timer(func):
    &amp;quot;&amp;quot;&amp;quot; A decorator that prints how long a function took to run&amp;quot;&amp;quot;&amp;quot;
    # define the wrapper function to return 
    def wrapper(*args, **kwargs):
        # When wrapper() is called, get current time
        t_start = time.time()
        # Call the decorated function and store the result
        result = func(*args, **kwargs)
        # Get the total time it took to run, and print it
        t_total = time.time() - t_start
        print(f&#39;{func.__name__} took {t_total}s&#39;)
        return result
    
    return wrapper
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@timer
def multiply(a,b):
    return a*b
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;multiply(1,2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;multiply took 1.1920928955078125e-06s





2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@timer
def sleep_n_seconds(n):
    time.sleep(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sleep_n_seconds(5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;sleep_n_seconds took 5.004380941390991s
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sleep_n_seconds(10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;sleep_n_seconds took 10.002737045288086s
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Two differnt y-axes in same plot</title>
      <link>http://othrif.github.io/technical_note/python/matplotlibtmp/sameplot/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/matplotlibtmp/sameplot/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Annotations: &lt;a href=&#34;https://matplotlib.org/3.3.0/tutorials/text/annotations.html&#34;&gt;https://matplotlib.org/3.3.0/tutorials/text/annotations.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
import pandas as pd

climate_change = pd.read_csv(&#39;climate_change.csv&#39;, parse_dates=[&#39;date&#39;], index_col=&#39;date&#39;)
seventies = climate_change[&#39;1970-01-01&#39;:&#39;1979-12-31&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Define a function called plot_timeseries
def plot_timeseries(axes, x, y, color, xlabel, ylabel):

  # Plot the inputs x,y in the provided color
  axes.plot(x, y, color=color)

  # Set the x-axis label
  axes.set_xlabel(xlabel)

  # Set the y-axis label
  axes.set_ylabel(ylabel, color=color)

  # Set the colors tick params for y-axis
  axes.tick_params(&#39;y&#39;, colors=color)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots()

# Plot the CO2 levels time-series in blue
plot_timeseries(ax, climate_change.index, climate_change[&#39;co2&#39;], &amp;quot;blue&amp;quot;, &#39;Time (years)&#39;, &#39;CO2 levels&#39;)

# Create a twin Axes object that shares the x-axis
ax2 = ax.twinx()

# Plot the relative temperature data in red
plot_timeseries(ax2, climate_change.index, climate_change[&#39;relative_temp&#39;], &amp;quot;red&amp;quot;, &#39;Time (years)&#39;, &#39;Relative temperature (Celsius)&#39;)

# Annotate point with relative temperature &amp;gt;1 degree
ax2.annotate(&#39;&amp;gt;1 degree&#39;, xy=(pd.Timestamp(&#39;2015-10-06&#39;), 1), xytext=(pd.Timestamp(&#39;2008-10-06&#39;), -0.2), arrowprops={&amp;quot;arrowstyle&amp;quot;:&amp;quot;-&amp;gt;&amp;quot;, &amp;quot;color&amp;quot;:&amp;quot;gray&amp;quot;})

plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;sameplot_4_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Useful decorators: Memoizing, timer, type check</title>
      <link>http://othrif.github.io/technical_note/python/basics/memoize_decorator/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/basics/memoize_decorator/</guid>
      <description>&lt;h3 id=&#34;timer-decorator&#34;&gt;Timer decorator&lt;/h3&gt;
&lt;p&gt;Time your functions!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import wraps
import time
def timer(func):
    &amp;quot;&amp;quot;&amp;quot; A decorator that prints how long a function took to run&amp;quot;&amp;quot;&amp;quot;
    # define the wrapper function to return 
    @wraps(func)
    def wrapper(*args, **kwargs):
        # When wrapper() is called, get current time
        t_start = time.time()
        # Call the decorated function and store the result
        result = func(*args, **kwargs)
        # Get the total time it took to run, and print it
        t_total = time.time() - t_start
        print(f&#39;{func.__name__} took {t_total}s&#39;)
        return result
    
    return wrapper
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;memoize&#34;&gt;Memoize&lt;/h3&gt;
&lt;p&gt;Store results of functions for fast lookup so that the function runs faster the second time a function is called with the same arguments.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import wraps
def memoize(func):
    &amp;quot;&amp;quot;&amp;quot;Store the results of the decorated function for fast lookup&amp;quot;&amp;quot;&amp;quot;
    # Store results in a dict that maps arguments to results
    cache = {}
    # Define the wrapper function to return.
    @wraps(func)
    def wrapper(*args,**kwargs):
        # If these arguments haven&#39;t been seen before,
        key = str(args) + str(kwargs)
        if key not in cache:
            # Call func() and store the result.
            cache[key] = func(*args,**kwargs)
        return cache[key]
    return wrapper
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@timer
@memoize
def multiply_slow(a,b):
    time.sleep(5)
    return a*b
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# here the call runs slowly
multiply_slow(1,2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;wrapper took 5.003448247909546s





2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# here the calls runs much faster
multiply_slow(1,2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;wrapper took 5.7220458984375e-06s





2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;check-type&#34;&gt;Check type&lt;/h3&gt;
&lt;p&gt;Examine the results of your functions at runtime by checking the type returned.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import wraps
def print_return_type(func):# Define wrapper(), the decorated function
  @wraps(func)
  def wrapper(*args, **kwargs):
    # Call the function being decorated
    result = func(*args, **kwargs)
    print(&#39;{}() returned type {}&#39;.format(
      func.__name__, type(result)
    ))
    return result
  # Return the decorated function
  return wrapper
  
@print_return_type
def foo(value):
  return value
  
print(foo(42))
print(foo([1, 2, 3]))
print(foo({&#39;a&#39;: 42}))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;foo() returned type &amp;lt;class &#39;int&#39;&amp;gt;
42
foo() returned type &amp;lt;class &#39;list&#39;&amp;gt;
[1, 2, 3]
foo() returned type &amp;lt;class &#39;dict&#39;&amp;gt;
{&#39;a&#39;: 42}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;counter&#34;&gt;Counter&lt;/h3&gt;
&lt;p&gt;decorator that adds a counter to each function that you decorate. decorate a bunch of functions with the counter() decorator, let your program run for a while, and then print out how many times each function was called.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import wraps
def counter(func):
  @wraps(func)
  def wrapper(*args, **kwargs):
    wrapper.count += 1
    # Call the function being decorated and return the result
    return func(*args, **kwargs)
  wrapper.count = 0
  # Return the new decorated function
  return wrapper

# Decorate foo() with the counter() decorator
@counter
def foo():
  print(&#39;calling foo()&#39;)
  
foo()
foo()

print(&#39;foo() was called {} times.&#39;.format(foo.count))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;calling foo()
calling foo()
foo() was called 2 times.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;measuring-decorator-overhead&#34;&gt;Measuring decorator overhead&lt;/h3&gt;
&lt;p&gt;Access the original function using wraps attribute &lt;code&gt;__wrapped__&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import time
from functools import wraps

def check_everything(func):
  @wraps(func)
  def wrapper(*args, **kwargs):
    time.sleep(2)
    result = func(*args, **kwargs)
    return result
  return wrapper

@check_everything
def duplicate(my_list):
  &amp;quot;&amp;quot;&amp;quot;Return a new list that repeats the input twice&amp;quot;&amp;quot;&amp;quot;
  return my_list + my_list

t_start = time.time()
duplicated_list = duplicate(list(range(50)))
t_end = time.time()
decorated_time = t_end - t_start

t_start = time.time()
# Call the original function instead of the decorated one
duplicated_list = duplicate.__wrapped__(list(range(50)))
t_end = time.time()
undecorated_time = t_end - t_start

print(&#39;Decorated time: {:.5f}s&#39;.format(decorated_time))
print(&#39;Undecorated time: {:.5f}s&#39;.format(undecorated_time))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Decorated time: 2.00555s
Undecorated time: 0.00025s
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Using merge_ordered() and merge_asof() to merge DataFrames</title>
      <link>http://othrif.github.io/technical_note/python/pandas/mergeordered/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/mergeordered/</guid>
      <description>&lt;h3 id=&#34;merge_ordered&#34;&gt;merge_ordered()&lt;/h3&gt;
&lt;p&gt;default = outer merge&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

austin = pd.read_csv(&#39;austin.csv&#39;, delim_whitespace=True)
houston = pd.read_csv(&#39;houston.csv&#39;, delim_whitespace=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Perform the first ordered merge: tx_weather
tx_weather = pd.merge_ordered(austin,houston)
tx_weather
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;ratings&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2016-01-01&lt;/td&gt;
      &lt;td&gt;Cloudy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2016-01-04&lt;/td&gt;
      &lt;td&gt;Rainy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2016-01-17&lt;/td&gt;
      &lt;td&gt;Sunny&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2016-02-08&lt;/td&gt;
      &lt;td&gt;Cloudy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2016-03-01&lt;/td&gt;
      &lt;td&gt;Sunny&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;All information about the city is lost&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Perform the second ordered merge: tx_weather_suff
tx_weather_suff = pd.merge_ordered(austin,houston, on =&#39;date&#39;, suffixes=[&#39;_aus&#39;, &#39;_hus&#39;])
tx_weather_suff
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;ratings_aus&lt;/th&gt;
      &lt;th&gt;ratings_hus&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2016-01-01&lt;/td&gt;
      &lt;td&gt;Cloudy&lt;/td&gt;
      &lt;td&gt;Cloudy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2016-01-04&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Rainy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2016-01-17&lt;/td&gt;
      &lt;td&gt;Sunny&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2016-02-08&lt;/td&gt;
      &lt;td&gt;Cloudy&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2016-03-01&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Sunny&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Perform the third ordered merge: tx_weather_ffill
tx_weather_ffill = pd.merge_ordered(austin,houston, on=&#39;date&#39;, suffixes=[&#39;_aus&#39;, &#39;_hus&#39;], fill_method=&#39;ffill&#39;)
tx_weather_ffill
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;ratings_aus&lt;/th&gt;
      &lt;th&gt;ratings_hus&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2016-01-01&lt;/td&gt;
      &lt;td&gt;Cloudy&lt;/td&gt;
      &lt;td&gt;Cloudy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2016-01-04&lt;/td&gt;
      &lt;td&gt;Cloudy&lt;/td&gt;
      &lt;td&gt;Rainy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2016-01-17&lt;/td&gt;
      &lt;td&gt;Sunny&lt;/td&gt;
      &lt;td&gt;Rainy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2016-02-08&lt;/td&gt;
      &lt;td&gt;Cloudy&lt;/td&gt;
      &lt;td&gt;Rainy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2016-03-01&lt;/td&gt;
      &lt;td&gt;Cloudy&lt;/td&gt;
      &lt;td&gt;Sunny&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;merge_asof&#34;&gt;merge_asof()&lt;/h3&gt;
&lt;p&gt;Similar to &lt;code&gt;pd.merge_ordered()&lt;/code&gt;, the &lt;code&gt;pd.merge_asof()&lt;/code&gt; function will also merge values in order using the on column, but for each row in the left DataFrame, &lt;strong&gt;only rows from the right DataFrame whose &amp;lsquo;on&amp;rsquo; column values are less than the left value will be kept&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

auto = pd.read_csv(&#39;automobiles.csv&#39;, parse_dates=[&#39;yr&#39;])
oil = pd.read_csv(&#39;oil_price.csv&#39;, parse_dates=[&#39;Date&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;auto.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;mpg&lt;/th&gt;
      &lt;th&gt;cyl&lt;/th&gt;
      &lt;th&gt;displ&lt;/th&gt;
      &lt;th&gt;hp&lt;/th&gt;
      &lt;th&gt;weight&lt;/th&gt;
      &lt;th&gt;accel&lt;/th&gt;
      &lt;th&gt;yr&lt;/th&gt;
      &lt;th&gt;origin&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;18.0&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;307.0&lt;/td&gt;
      &lt;td&gt;130&lt;/td&gt;
      &lt;td&gt;3504&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;1970-01-01&lt;/td&gt;
      &lt;td&gt;US&lt;/td&gt;
      &lt;td&gt;chevrolet chevelle malibu&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;15.0&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;350.0&lt;/td&gt;
      &lt;td&gt;165&lt;/td&gt;
      &lt;td&gt;3693&lt;/td&gt;
      &lt;td&gt;11.5&lt;/td&gt;
      &lt;td&gt;1970-01-01&lt;/td&gt;
      &lt;td&gt;US&lt;/td&gt;
      &lt;td&gt;buick skylark 320&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;18.0&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;318.0&lt;/td&gt;
      &lt;td&gt;150&lt;/td&gt;
      &lt;td&gt;3436&lt;/td&gt;
      &lt;td&gt;11.0&lt;/td&gt;
      &lt;td&gt;1970-01-01&lt;/td&gt;
      &lt;td&gt;US&lt;/td&gt;
      &lt;td&gt;plymouth satellite&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;16.0&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;304.0&lt;/td&gt;
      &lt;td&gt;150&lt;/td&gt;
      &lt;td&gt;3433&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;1970-01-01&lt;/td&gt;
      &lt;td&gt;US&lt;/td&gt;
      &lt;td&gt;amc rebel sst&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;17.0&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;302.0&lt;/td&gt;
      &lt;td&gt;140&lt;/td&gt;
      &lt;td&gt;3449&lt;/td&gt;
      &lt;td&gt;10.5&lt;/td&gt;
      &lt;td&gt;1970-01-01&lt;/td&gt;
      &lt;td&gt;US&lt;/td&gt;
      &lt;td&gt;ford torino&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;oil.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Date&lt;/th&gt;
      &lt;th&gt;Price&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1970-01-01&lt;/td&gt;
      &lt;td&gt;3.35&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1970-02-01&lt;/td&gt;
      &lt;td&gt;3.35&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1970-03-01&lt;/td&gt;
      &lt;td&gt;3.35&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1970-04-01&lt;/td&gt;
      &lt;td&gt;3.35&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1970-05-01&lt;/td&gt;
      &lt;td&gt;3.35&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Merge auto and oil: merged
merged = pd.merge_asof(auto, oil, left_on=&#39;yr&#39;, right_on=&#39;Date&#39;)
merged.tail()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;mpg&lt;/th&gt;
      &lt;th&gt;cyl&lt;/th&gt;
      &lt;th&gt;displ&lt;/th&gt;
      &lt;th&gt;hp&lt;/th&gt;
      &lt;th&gt;weight&lt;/th&gt;
      &lt;th&gt;accel&lt;/th&gt;
      &lt;th&gt;yr&lt;/th&gt;
      &lt;th&gt;origin&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;Date&lt;/th&gt;
      &lt;th&gt;Price&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;387&lt;/th&gt;
      &lt;td&gt;27.0&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;140.0&lt;/td&gt;
      &lt;td&gt;86&lt;/td&gt;
      &lt;td&gt;2790&lt;/td&gt;
      &lt;td&gt;15.6&lt;/td&gt;
      &lt;td&gt;1982-01-01&lt;/td&gt;
      &lt;td&gt;US&lt;/td&gt;
      &lt;td&gt;ford mustang gl&lt;/td&gt;
      &lt;td&gt;1982-01-01&lt;/td&gt;
      &lt;td&gt;33.85&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;388&lt;/th&gt;
      &lt;td&gt;44.0&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;97.0&lt;/td&gt;
      &lt;td&gt;52&lt;/td&gt;
      &lt;td&gt;2130&lt;/td&gt;
      &lt;td&gt;24.6&lt;/td&gt;
      &lt;td&gt;1982-01-01&lt;/td&gt;
      &lt;td&gt;Europe&lt;/td&gt;
      &lt;td&gt;vw pickup&lt;/td&gt;
      &lt;td&gt;1982-01-01&lt;/td&gt;
      &lt;td&gt;33.85&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;389&lt;/th&gt;
      &lt;td&gt;32.0&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;135.0&lt;/td&gt;
      &lt;td&gt;84&lt;/td&gt;
      &lt;td&gt;2295&lt;/td&gt;
      &lt;td&gt;11.6&lt;/td&gt;
      &lt;td&gt;1982-01-01&lt;/td&gt;
      &lt;td&gt;US&lt;/td&gt;
      &lt;td&gt;dodge rampage&lt;/td&gt;
      &lt;td&gt;1982-01-01&lt;/td&gt;
      &lt;td&gt;33.85&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;390&lt;/th&gt;
      &lt;td&gt;28.0&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;120.0&lt;/td&gt;
      &lt;td&gt;79&lt;/td&gt;
      &lt;td&gt;2625&lt;/td&gt;
      &lt;td&gt;18.6&lt;/td&gt;
      &lt;td&gt;1982-01-01&lt;/td&gt;
      &lt;td&gt;US&lt;/td&gt;
      &lt;td&gt;ford ranger&lt;/td&gt;
      &lt;td&gt;1982-01-01&lt;/td&gt;
      &lt;td&gt;33.85&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;391&lt;/th&gt;
      &lt;td&gt;31.0&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;119.0&lt;/td&gt;
      &lt;td&gt;82&lt;/td&gt;
      &lt;td&gt;2720&lt;/td&gt;
      &lt;td&gt;19.4&lt;/td&gt;
      &lt;td&gt;1982-01-01&lt;/td&gt;
      &lt;td&gt;US&lt;/td&gt;
      &lt;td&gt;chevy s-10&lt;/td&gt;
      &lt;td&gt;1982-01-01&lt;/td&gt;
      &lt;td&gt;33.85&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Resample merged: yearly
yearly = merged.resample(&#39;A&#39;, on=&#39;Date&#39;)[[&#39;mpg&#39;,&#39;Price&#39;]].mean()
yearly
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;mpg&lt;/th&gt;
      &lt;th&gt;Price&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Date&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1970-12-31&lt;/th&gt;
      &lt;td&gt;17.689655&lt;/td&gt;
      &lt;td&gt;3.35&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1971-12-31&lt;/th&gt;
      &lt;td&gt;21.111111&lt;/td&gt;
      &lt;td&gt;3.56&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1972-12-31&lt;/th&gt;
      &lt;td&gt;18.714286&lt;/td&gt;
      &lt;td&gt;3.56&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1973-12-31&lt;/th&gt;
      &lt;td&gt;17.100000&lt;/td&gt;
      &lt;td&gt;3.56&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1974-12-31&lt;/th&gt;
      &lt;td&gt;22.769231&lt;/td&gt;
      &lt;td&gt;10.11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1975-12-31&lt;/th&gt;
      &lt;td&gt;20.266667&lt;/td&gt;
      &lt;td&gt;11.16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1976-12-31&lt;/th&gt;
      &lt;td&gt;21.573529&lt;/td&gt;
      &lt;td&gt;11.16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1977-12-31&lt;/th&gt;
      &lt;td&gt;23.375000&lt;/td&gt;
      &lt;td&gt;13.90&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1978-12-31&lt;/th&gt;
      &lt;td&gt;24.061111&lt;/td&gt;
      &lt;td&gt;14.85&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1979-12-31&lt;/th&gt;
      &lt;td&gt;25.093103&lt;/td&gt;
      &lt;td&gt;14.85&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1980-12-31&lt;/th&gt;
      &lt;td&gt;33.803704&lt;/td&gt;
      &lt;td&gt;32.50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1981-12-31&lt;/th&gt;
      &lt;td&gt;30.185714&lt;/td&gt;
      &lt;td&gt;38.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1982-12-31&lt;/th&gt;
      &lt;td&gt;32.000000&lt;/td&gt;
      &lt;td&gt;33.85&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pearson correlation between the resampled &#39;Price&#39; and &#39;mpg&#39;
yearly.corr()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;mpg&lt;/th&gt;
      &lt;th&gt;Price&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;mpg&lt;/th&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.948677&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Price&lt;/th&gt;
      &lt;td&gt;0.948677&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;It looks like there is a strong correlation between miles per gallon and the price of oil!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Which DataFrames merging should I use: append, concat, merge() and join()?</title>
      <link>http://othrif.github.io/technical_note/python/pandas/whichmerge/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/python/pandas/whichmerge/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df1.append(df2)&lt;/code&gt;: stacking vertically&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pd.concat([df1, df2])&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;stacking many horizontally or vertically&lt;/li&gt;
&lt;li&gt;simple inner/outer joins on Indexes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df1.join(df2)&lt;/code&gt;: inner/outer/left/right joins on Indexes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pd.merge([df1, df2])&lt;/code&gt;: many joins on multiple columns&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Working with git</title>
      <link>http://othrif.github.io/technical_note/scripting/git/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/scripting/git/</guid>
      <description>&lt;h3 id=&#34;bring-your-branch-up-to-date-with-master&#34;&gt;Bring your branch up-to-date with master&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout master
git fetch -p origin
git merge origin/master
git checkout &amp;lt;feature-branch&amp;gt;
git merge master
git push origin &amp;lt;feature-branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-a-new-branch-and-check-out-an-old--commit&#34;&gt;Create a new branch and check out an old  commit&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout -b &amp;lt;new branch&amp;gt; &amp;lt;SHA-1&amp;gt;
git add .
git commit -m &amp;quot;added a new branch from old commit&amp;quot;
git push --set-upstream origin &amp;lt;new branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;remove-submodule&#34;&gt;Remove submodule&lt;/h3&gt;
&lt;p&gt;To remove a submodule from a git repository you need to:&lt;/p&gt;
&lt;p&gt;Delete the relevant section from the &lt;code&gt;.gitmodules&lt;/code&gt; file&lt;br&gt;
Stage the &lt;code&gt;.gitmodules&lt;/code&gt; changes: &lt;code&gt;git add .gitmodules&lt;/code&gt;&lt;br&gt;
Delete the relevant section from &lt;code&gt;.git/config&lt;/code&gt;&lt;br&gt;
Run &lt;code&gt;git rm --cached path_to_submodule&lt;/code&gt; (no trailing slash) &lt;br&gt;
Run &lt;code&gt;rm -rf .git/modules/path_to_submodule&lt;/code&gt; (no trailing slash)&lt;br&gt;
Commit &lt;code&gt;git commit -m &amp;quot;Removed submodule&amp;quot;&lt;/code&gt; &lt;br&gt;
Delete the now untracked submodule files &lt;code&gt;rm -rf path_to_submodule&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;transfer-from-github-to-gitlab&#34;&gt;Transfer from &lt;code&gt;github&lt;/code&gt; to &lt;code&gt;gitlab&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;git remote add github https://github.com/othrif/vbfmet-recast.git
git push --mirror github
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Zip And Unzip Files Hello</title>
      <link>http://othrif.github.io/technical_note/linux/basics/zip_and_unzip_files/</link>
      <pubDate>Sun, 12 Apr 2020 14:41:32 +0200</pubDate>
      <guid>http://othrif.github.io/technical_note/linux/basics/zip_and_unzip_files/</guid>
      <description>&lt;h2 id=&#34;make-files&#34;&gt;Make Files&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;echo &amp;#34;The number of soldiers in the regiment is 24.&amp;#34; &amp;gt; regiment.txt
echo &amp;#34;The regiment has seen five battles.&amp;#34; &amp;gt; battles.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;zip-files&#34;&gt;Zip Files&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;-v&lt;/code&gt; argument is optional, prints an output with the details of the operation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;gzip regiment.txt battles.txt -v&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;regiment.txt:	 -2.2% -- replaced with regiment.txt.gz
battles.txt:	 -5.6% -- replaced with battles.txt.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;view-contents-of-directory&#34;&gt;View Contents Of Directory&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;ls -l&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;total 8
-rw-rw-r-- 1 othrif othrif 68 Jul 31 13:15 battles.txt.gz
-rw-rw-r-- 1 othrif othrif 78 Jul 31 13:15 regiment.txt.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;unzip-files&#34;&gt;Unzip Files&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;gunzip regiment.txt battles.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;view-contents-of-directory-1&#34;&gt;View Contents Of Directory&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;ls -l&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;total 8
-rw-rw-r-- 1 othrif othrif 36 Jul 31 13:17 battles.txt
-rw-rw-r-- 1 othrif othrif 46 Jul 31 13:17 regiment.txt
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Determination of jet calibration and energy resolution in proton-proton collisions at $sqrts$ = 8 TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2019-ibw/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-ibw/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Longitudinal flow decorrelations in Xe&#43;Xe collisions at $sqrts_mathrmNN=5.44$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2020-gfz/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2020-gfz/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of azimuthal anisotropy of muons from charm and bottom hadrons in Pb&#43;Pb collisions at $sqrts_NN =$ 5.02 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2020-grf/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2020-grf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the $CP$-violating phase $ϕ_s$ in $B^0_s to J/ψϕ$ decays in ATLAS at 13 TeV</title>
      <link>http://othrif.github.io/publication/aad-2020-jfw/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2020-jfw/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the $tbart$ production cross-section and lepton differential distributions in $eμ$ dilepton events from $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-hzw/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-hzw/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the jet mass in high transverse momentum $Z(i̊ghtarrow bøverlineb)γ$ production at $sqrts= 13$ TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-wdr/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-wdr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the nuclear modification factor for inclusive jets in Pb&#43;Pb collisions at $sqrts_mathrmNN=5.02$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-twu/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-twu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the relative $B^±_c/B^±$ production cross section with the ATLAS detector at $sqrts=8$ TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2019-wtr/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-wtr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the transverse momentum distribution of Drell-Yan lepton pairs in proton-proton collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-wmn/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-wmn/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of $tbart$ differential cross-sections of highly boosted top quarks decaying to all-hadronic final states in $pp$ collisions at $sqrts=13,$ TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-eqg/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-eqg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of Higgs boson properties in the diphoton decay channel with 36 fb$^-1$ of $pp$ collision data at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-xdt/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-xdt/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of top-quark pair spin correlations in the $eμ$ channel at $sqrts = 13$ TeV using $pp$ collisions in the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2019-hwz/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-hwz/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Observation of the associated production of a top quark and a $Z$ boson in $pp$ collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2020-wog/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2020-wog/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Prompt and non-prompt $J/ψ$ and $ψ(2mathrmS)$ suppression at high transverse momentum in 5.02 TeV Pb&#43;Pb collisions with the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aaboud-2018-quy/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-quy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for dijet resonances in events with an isolated charged lepton using $sqrts = 13$ TeV proton-proton collision data collected by the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2020-kep/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2020-kep/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for direct production of electroweakinos in final states with one lepton, missing transverse momentum and a Higgs boson decaying into two $b$-jets in (pp) collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-vvf/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-vvf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for flavour-changing neutral current top-quark decays $tto qZ$ in proton-proton collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-nyl/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-nyl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for heavy Higgs bosons decaying into two tau leptons with the ATLAS detector using $pp$ collisions at $sqrts=13$ TeV</title>
      <link>http://othrif.github.io/publication/aad-2020-zxo/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2020-zxo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for heavy neutral Higgs bosons produced in association with $b$-quarks and decaying to $b$-quarks at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-zwb/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-zwb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for Higgs boson decays to beyond-the-Standard-Model light bosons in four-lepton events with the ATLAS detector at $sqrts=13$ TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2018-fvk/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-fvk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for light long-lived neutral particles produced in $pp$ collisions at $sqrts =$ 13 TeV and decaying into collimated leptons or light hadrons with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-tua/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-tua/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for pair production of Higgs bosons in the $bbarbbbarb$ final state using proton-proton collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-knk/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-knk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for squarks and gluinos in final states with same-sign leptons and jets using 139 fb$^-1$ of data collected with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-ftg/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-ftg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for the $HH i̊ghtarrow b barb b barb$ process via vector-boson fusion production using proton-proton collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2020-kub/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2020-kub/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Test of CP invariance in vector-boson fusion production of the Higgs boson in the $Hi̊ghtarrowττ$ channel in proton$-$proton collisions at $sqrts$ = 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2020-mnm/</link>
      <pubDate>Sat, 11 Apr 2020 12:00:03 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2020-mnm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>http://othrif.github.io/contact/</link>
      <pubDate>Wed, 08 Apr 2020 22:44:12 +0200</pubDate>
      <guid>http://othrif.github.io/contact/</guid>
      <description>&lt;p&gt;This is the contact page!!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First publication</title>
      <link>http://othrif.github.io/publication/publication1/</link>
      <pubDate>Wed, 08 Apr 2020 22:44:12 +0200</pubDate>
      <guid>http://othrif.github.io/publication/publication1/</guid>
      <description>&lt;p&gt;My first publication here, now?
&lt;a href=&#34;http://othrif.github.io/files/OthmaneRifki_CV.pdf&#34;&gt;Download my CV&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Higgs boson production cross-section measurements and their EFT interpretation in the $4ell$ decay channel at $sqrts$ = 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2020-mkp/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2020-mkp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the Lund jet plane using charged particles in 13 TeV proton-proton collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2020-zcn/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2020-zcn/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for Higgs boson decays into a $Z$ boson and a light hadronically decaying resonance using 13 TeV $pp$ collision data from the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2020-hzm/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2020-hzm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of the production cross-section for a $Z$ boson in association with $b$-jets in proton-proton collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2020-gfi/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2020-gfi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for long-lived, massive particles in events with a displaced vertex and a muon with large impact parameter in $pp$ collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2020-srt/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2020-srt/</guid>
      <description></description>
    </item>
    
    <item>
      <title>$Z$ boson production in Pb&#43;Pb collisions at $sqrts_textrmNN$= 5.02 TeV measured by the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aad-2019-lan/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-lan/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ATLAS data quality operations and performance for 2015-2018 data-taking</title>
      <link>http://othrif.github.io/publication/aad-2019-hmz/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-hmz/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Combination of searches for Higgs boson pairs in $pp$ collisions at $sqrts = $13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-uzh/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-uzh/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Combined measurements of Higgs boson production and decay using up to $80$ fb$^-1$ of proton-proton collision data at $sqrts=$ 13 TeV collected with the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aad-2019-mbh/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-mbh/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Evidence for electroweak production of two jets in association with a $Zγ$ pair in $pp$ collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-wpb/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-wpb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Fluctuations of anisotropic flow in Pb&#43;Pb collisions at $ sqrtmathrms_mathrmNN $ = 5.02 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2019-sma/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-sma/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of $J/ψ$ production in association with a $W^±$ boson with $pp$ data at 8 TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2019-wfr/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-wfr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of azimuthal anisotropy of muons from charm and bottom hadrons in $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-aol/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-aol/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of differential cross sections for single diffractive dissociation in $sqrts = 8$ TeV $pp$ collisions using the ATLAS ALFA spectrometer</title>
      <link>http://othrif.github.io/publication/aad-2019-tek/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-tek/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of isolated-photon plus two-jet production in $pp$ collisions at $sqrt s=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-cpw/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-cpw/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of long-range two-particle azimuthal correlations in $Z$-boson tagged $pp$ collisions at $sqrts=8$ and 13 TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2019-mcw/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-mcw/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of soft-drop jet observables in $pp$ collisions with the ATLAS detector at $sqrt s$ =13  TeV</title>
      <link>http://othrif.github.io/publication/aad-2019-vyi/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-vyi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the $Z(i̊ghtarrowell^&#43;ell^-)γ$ production cross-section in $pp$ collisions at $sqrts =13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-gpq/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-gpq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the azimuthal anisotropy of charged-particle production in Xe&#43;Xe collisions at $sqrts_mathrmNN=5.44$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-xmh/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-xmh/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Performance of electron and photon triggers in ATLAS during LHC Run 2</title>
      <link>http://othrif.github.io/publication/aad-2019-wsl/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-wsl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for chargino-neutralino production with mass splittings near the electroweak scale in three-lepton final states in $sqrts$ = 13 TeV $pp$ collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-vvi/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-vvi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for direct stau production in events with two hadronic $τ$-leptons in $sqrts = 13$ TeV $pp$ collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-byo/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-byo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for displaced vertices of oppositely charged leptons from decays of long-lived particles in $pp$ collisions at $sqrt s$ =13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-tcc/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-tcc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for electroweak production of charginos and sleptons decaying into final states with two leptons and missing transverse momentum in $sqrts=13$ TeV $pp$ collisions using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-vnb/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-vnb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for flavour-changing neutral currents in processes with one top quark and a photon using 81 fb$^-1$ of $pp$ collisions at $sqrts = 13$ TeV with the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aad-2019-pxo/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-pxo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for long-lived neutral particles produced in $pp$ collisions at $sqrts = 13$ TeV decaying into displaced hadronic jets in the ATLAS inner detector and muon spectrometer</title>
      <link>http://othrif.github.io/publication/aad-2019-xav/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-xav/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for Magnetic Monopoles and Stable High-Electric-Charge Objects in 13 Tev Proton-Proton Collisions with the ATLAS Detector</title>
      <link>http://othrif.github.io/publication/aad-2019-pfm/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-pfm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for new resonances in mass distributions of jet pairs using 139 fb$^-1$ of $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-hjw/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-hjw/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for non-resonant Higgs boson pair production in the $bbellνellν$ final state with the ATLAS detector in $pp$ collisions at $sqrts = 13$ TeV</title>
      <link>http://othrif.github.io/publication/aad-2019-yxi/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-yxi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for the Higgs boson decays $H to ee$ and $H to eμ$ in $pp$ collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-ojw/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-ojw/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Searches for electroweak production of supersymmetric particles with compressed mass spectra in $sqrts=$ 13 TeV $pp$ collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-qnd/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-qnd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Searches for lepton-flavour-violating decays of the Higgs boson in $sqrts=13$ TeV pp collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-ugc/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-ugc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Transverse momentum and process dependent azimuthal anisotropies in $sqrts_mathrmNN=8.16$ TeV $p$&#43;Pb collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-ajj/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-ajj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A search for pairs of highly collimated photon-jets in $pp$ collisions at $sqrts$ = 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-djx/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-djx/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A strategy for a general search for new phenomena using data-derived signal regions and its application within the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aaboud-2018-ufy/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-ufy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ATLAS b-jet identification performance and efficiency measurement with $tbart$ events in pp collisions at $sqrts=13$ TeV</title>
      <link>http://othrif.github.io/publication/aad-2019-aic/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-aic/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Combination of searches for invisible Higgs boson decays with the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aaboud-2019-rtt/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-rtt/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Combinations of single-top-quark production cross-section measurements and |f$_LV$V$_tb$| determinations at $ sqrts $ = 7 and 8 TeV with the ATLAS and CMS experiments</title>
      <link>http://othrif.github.io/publication/aaboud-2019-pkc/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-pkc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Comparison of Fragmentation Functions for Jets Dominated by Light Quarks and Gluons from $pp$ and Pb&#43;Pb Collisions in ATLAS</title>
      <link>http://othrif.github.io/publication/aaboud-2019-oac/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-oac/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Constraints on mediator-based dark matter and scalar dark energy models using $sqrt s = 13$ TeV $pp$ collision data collected by the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2019-yqu/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-yqu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Correlated long-range mixed-harmonic fluctuations measured in $pp$, $p$&#43;Pb and low-multiplicity Pb&#43;Pb collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-syf/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-syf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Cross-section measurements of the Higgs boson decaying into a pair of $τ$-leptons in proton-proton collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-pen/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-pen/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dijet azimuthal correlations and conditional yields in pp and p&#43;Pb collisions at sNN=5.02TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2019-oop/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-oop/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Electron and photon energy calibration with the ATLAS detector using 2015–2016 LHC proton-proton collision data</title>
      <link>http://othrif.github.io/publication/aaboud-2018-ugz/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-ugz/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Electron and photon performance measurements with the ATLAS detector using the 2015–2017 LHC proton-proton collision data</title>
      <link>http://othrif.github.io/publication/aad-2019-tso/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-tso/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Electron reconstruction and identification in the ATLAS experiment using the 2015 and 2016 LHC proton-proton collision data at $sqrts$ = 13 TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2019-ynx/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-ynx/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Evidence for the production of three massive vector bosons with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-dxu/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-dxu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Evidence for the production of three massive vectorbosons in $pp$ collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-udh/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-udh/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Identification of boosted Higgs bosons decaying into $b$-quark pairs with the ATLAS detector at 13  $text TeV$</title>
      <link>http://othrif.github.io/publication/aad-2019-uoz/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-uoz/</guid>
      <description></description>
    </item>
    
    <item>
      <title>In situ calibration of large-radius jet energy and mass in 13 TeV proton–proton collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-kfi/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-kfi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of $K_S^0$ and $Łambda ^0$ production in $t bart$ dileptonic events in pp collisions at $sqrts =$ 7 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-xek/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-xek/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of $W^± $ boson production in Pb&#43;Pb collisions at $sqrts_mathrmNN = 5.02~ text Tetext V$ with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-sfe/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-sfe/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of $W^± $-boson and Z-boson production cross-sections in pp collisions at $sqrts=2.76$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-bdc/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-bdc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of $W^±Z$ production cross sections and gauge boson polarisation in $pp$ collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2019-gxl/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-gxl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of $ZZ$ production in the $ellellνν$ final state with the ATLAS detector in $pp$ collisions at $sqrts = 13$ TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2019-lgy/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-lgy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of angular and momentum distributions of charged particles within and around jets in Pb&#43;Pb and $pp$ collisions at $sqrts_mathrmNN = 5.02$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-igg/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-igg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of distributions sensitive to the underlying event in inclusive $Z$-boson production in pp collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-vyd/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-vyd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of fiducial and differential $W^&#43;W^-$ production cross-sections at $sqrts=13$  TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2019-nkz/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-nkz/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of flow harmonics correlations with mean transverse momentum in lead-lead and proton-lead collisions at $sqrts_NN=5.02$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-fgl/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-fgl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of jet-substructure observables in top quark, $W$ boson and light jet production in proton-proton collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2019-aii/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-aii/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of photon–jet transverse momentum correlations in 5.02 TeV Pb &#43; Pb and $pp$ collisions with ATLAS</title>
      <link>http://othrif.github.io/publication/aaboud-2018-anc/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-anc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of prompt photon production in $sqrts_mathrmNN = 8.16$ TeV $p$&#43;Pb collisions with ATLAS</title>
      <link>http://othrif.github.io/publication/aaboud-2019-tab/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-tab/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the $tbartZ$ and $tbartW$ cross sections in proton-proton collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2019-njj/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-njj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the cross-section and charge asymmetry of $W$ bosons produced in proton–proton collisions at $sqrts=8~ text TeV$ with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-rou/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-rou/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the four-lepton invariant mass spectrum in 13 TeV proton-proton collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2019-lxo/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-lxo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the inclusive cross-section for the production of jets in association with a Z boson in proton-proton collisions at 8 TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-hga/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-hga/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the inclusive isolated-photon cross section in $pp$ collisions at $sqrts=13$ TeV using 36 fb$^-1$ of ATLAS data</title>
      <link>http://othrif.github.io/publication/aad-2019-eqv/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-eqv/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the photon identification efficiencies with the ATLAS detector using LHC Run 2 data collected in 2015 and 2016</title>
      <link>http://othrif.github.io/publication/aaboud-2018-yqu/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-yqu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the production cross section for a Higgs boson in association with a vector boson in the $H to WW^* to ellνellν$ channel in $pp$ collisions at $sqrts$ = 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-lpq/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-lpq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the ratio of cross sections for inclusive isolated-photon production in $pp$ collisions at $sqrt s = 13$ and $8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2019-vpz/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-vpz/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the top quark mass in the $tbarti̊ghtarrow $ lepton&#43;jets channel from $sqrts=8$  TeV ATLAS data and combination with previous results</title>
      <link>http://othrif.github.io/publication/aaboud-2018-zbu/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-zbu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the top-quark mass in $tbart&#43;1$-jet events collected with the ATLAS detector in $pp$ collisions at $sqrts=8$ TeV</title>
      <link>http://othrif.github.io/publication/aad-2019-mkw/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-mkw/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of VH, $ mathrmHto mathrmbøverlinemathrmb $ production as a function of the vector-boson transverse momentum in 13 TeV pp collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2019-nan/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-nan/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of $W$ and $Z$ boson production in $pp$ collisions at $sqrts=5.02$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-nic/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-nic/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of gluon-gluon fusion and vector-boson fusion Higgs boson production cross-sections in the $H to WW^* to eνμν$ decay channel in $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-jqu/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-jqu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of inclusive and differential fiducial cross-sections of $ tøverlinet $ production with additional heavy-flavour jets in proton-proton collisions at $ sqrts $ = 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-eki/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-eki/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of inclusive and differential fiducial cross-sections of $tbartγ $ production in leptonic final states at $sqrts=13~ text TeV$ in ATLAS</title>
      <link>http://othrif.github.io/publication/aaboud-2018-hip/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-hip/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of top-quark pair differential and double-differential cross-sections in the $ell$&#43;jets channel with $pp$ collisions at $sqrts=13$ TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-ntk/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-ntk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Modelling radiation damage to pixel sensors in the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2019-wgd/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-wgd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Observation of electroweak $W^±Z$ boson pair production in association with two jets in $pp$ collisions at $sqrts =$ 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-ddq/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-ddq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Observation of electroweak production of a same-sign $W$ boson pair in association with two jets in $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2019-nmv/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-nmv/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Observation of light-by-light scattering in ultraperipheral Pb&#43;Pb collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-ock/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-ock/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Performance of top-quark and $W$-boson tagging with ATLAS in Run 2 of the LHC</title>
      <link>http://othrif.github.io/publication/aaboud-2018-psm/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-psm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Properties of $gi̊ghtarrow bbarb$ at small opening angles in $pp$ collisions with the ATLAS detector at $sqrts=13$ TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2018-uiu/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-uiu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Properties of jet fragmentation using charged particles measured with the ATLAS detector in $pp$ collisions at $sqrts=13$ TeV</title>
      <link>http://othrif.github.io/publication/aad-2019-onw/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-onw/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Resolution of the ATLAS muon spectrometer monitored drift tubes in LHC Run 2</title>
      <link>http://othrif.github.io/publication/aad-2019-yrr/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-yrr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for a heavy charged boson in events with a charged lepton and missing transverse momentum from $pp$ collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-wvl/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-wvl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for a right-handed gauge boson decaying into a high-momentum heavy neutrino and a charged lepton in $pp$ collisions with the ATLAS detector at $sqrts=13$ TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2019-wfg/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-wfg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for bottom-squark pair production with the ATLAS detector in final states containing Higgs bosons, $b$-jets and missing transverse momentum</title>
      <link>http://othrif.github.io/publication/aad-2019-pfy/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-pfy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for chargino and neutralino production in final states with a Higgs boson and missing transverse momentum at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-ngk/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-ngk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for diboson resonances in hadronic final states in 139 fb$^-1$ of $pp$ collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-fbh/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-fbh/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for doubly charged scalar bosons decaying into same-sign $W$ boson pairs with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-qcu/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-qcu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for excited electrons singly produced in proton–proton collisions at $sqrts=13$ TeV with the ATLAS experiment at the LHC</title>
      <link>http://othrif.github.io/publication/aaboud-2019-zpc/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-zpc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for four-top-quark production in the single-lepton and opposite-sign dilepton final states in pp collisions at $sqrts$ = 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-jsj/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-jsj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for heavy charged long-lived particles in proton-proton collisions at $sqrts = 13$ TeV using an ionisation measurement with the mboxATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-hdl/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-hdl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for heavy charged long-lived particles in the ATLAS detector in 36.1 fb$^-1$ of proton-proton collision data at $sqrts = 13$ TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2019-trc/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-trc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for heavy long-lived multicharged particles in proton-proton collisions at $sqrts$ = 13  TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-kbe/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-kbe/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for heavy Majorana or Dirac neutrinos and right-handed $W$ gauge bosons in final states with two charged leptons and two jets at $ sqrts=13 $ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-spl/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-spl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for heavy neutral leptons in decays of $W$ bosons produced in 13 TeV $pp$ collisions using prompt and displaced signatures with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-kiz/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-kiz/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for heavy particles decaying into a top-quark pair in the fully hadronic final state in $pp$ collisions at $sqrts =$ 13  TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2019-roo/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-roo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for Higgs boson decays into a pair of light bosons in the $bbμμ$ final state in $pp$ collision at $sqrts = $13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-esj/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-esj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for Higgs boson pair production in the $bbarbWW^*$ decay mode at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-zhh/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-zhh/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for Higgs boson pair production in the $WW^(*)WW^(*)$ decay channel using ATLAS data recorded at $sqrts=13$ TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2018-ksn/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-ksn/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for high-mass dilepton resonances using 139 fb$^-1$ of $pp$ collision data collected at $sqrts=$13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-fac/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-fac/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for invisible Higgs boson decays in vector boson fusion at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-sfi/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-sfi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for large missing transverse momentum in association with one top-quark in proton-proton collisions at $ sqrts $ = 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-zpr/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-zpr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for light resonances decaying to boosted quark pairs and produced in association with a photon or a jet in proton-proton collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-zba/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-zba/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for long-lived neutral particles in $pp$ collisions at $sqrts$ = 13 TeV that decay into displaced hadronic jets in the ATLAS calorimeter</title>
      <link>http://othrif.github.io/publication/aaboud-2019-opc/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-opc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for long-lived particles in final states with displaced dimuon vertices in $pp$ collisions at $sqrts=$ 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-jbr/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-jbr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for long-lived particles produced in $pp$ collisions at $sqrts=13$  TeV that decay into displaced hadronic jets in the ATLAS muon spectrometer</title>
      <link>http://othrif.github.io/publication/aaboud-2018-aqj/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-aqj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for low-mass resonances decaying into two jets and produced in association with a photon using $pp$ collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2019-zxd/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-zxd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for scalar resonances decaying into $μ^&#43;μ^-$ in events with and without $b$-tagged jets produced in proton-proton collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2019-sgt/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-sgt/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for single production of vector-like quarks decaying into $Wb$ in $pp$ collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-ifs/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-ifs/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for squarks and gluinos in final states with hadronically decaying $τ$-leptons, jets, and missing transverse momentum using $pp$ collisions at $sqrts$ = 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-mna/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-mna/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for the electroweak diboson production in association with a high-mass dijet system in semileptonic final states in $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2019-xxo/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2019-xxo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for the Production of a Long-Lived Neutral Particle Decaying within the ATLAS Hadronic Calorimeter in Association with a $Z$ Boson from $pp$ Collisions at $sqrts =$ 13  TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2018-arf/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-arf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for top-quark decays $t to Hq$ with 36 fb$^-1$ of $pp$ collision data at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-oqm/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-oqm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for vector-boson resonances decaying to a top quark and bottom quark in the lepton plus jets final state in $pp$ collisions at $sqrts$ = 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-jux/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-jux/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Searches for scalar leptoquarks and differential cross-section measurements in dilepton-dijet events in proton-proton collisions at a centre-of-mass energy of $sqrts$ = 13 TeV with the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aaboud-2019-jcc/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-jcc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Searches for third-generation scalar leptoquarks in $sqrts$ = 13 TeV pp collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2019-bye/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2019-bye/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Study of the hard double-parton scattering contribution to inclusive four-lepton production in $pp$ collisions at $sqrt s=$ 8 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-tiq/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-tiq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Study of the rare decays of $B^0_s$ and $B^0$ mesons into muon pairs using data collected during 2015 and 2016 with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-mst/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-mst/</guid>
      <description></description>
    </item>
    
    <item>
      <title>$ZZ to ell^&#43;ell^-ell^prime &#43;ell^prime -$ cross-section measurements and search for anomalous triple gauge couplings in 13 TeV $pp$ collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-rwm/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-rwm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A search for lepton-flavor-violating decays of the $Z$ boson into a $τ$-lepton and a light lepton with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-cxn/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-cxn/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A search for pair-produced resonances in four-jet final states at $sqrts =$ 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-nmi/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-nmi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A search for resonances decaying into a Higgs boson and a new particle $X$ in the $XH to qqbb$ final state with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-ecz/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-ecz/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Angular analysis of $B^0_d i̊ghtarrow K^*μ^&#43;μ^-$ decays in $pp$ collisions at $sqrts= 8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-krd/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-krd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Combination of inclusive and differential $mathrmtøverlinemathrmt$ charge asymmetry measurements using ATLAS and CMS data at $sqrts =$ 7 and 8 TeV</title>
      <link>http://othrif.github.io/publication/sirunyan-2017-lvd/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/sirunyan-2017-lvd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Combination of searches for heavy resonances decaying into bosonic and leptonic final states using 36  fb$^-1$ of proton-proton collision data at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-bun/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-bun/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Combination of the searches for pair-produced vector-like partners of the third-generation quarks at $sqrts =$ 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-pii/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-pii/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Combined measurement of differential and total cross sections in the $H i̊ghtarrow γ γ$ and the $H g̊htarrow ZZ^* rh̊tarrow 4ell$ decay channels at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-ezd/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-ezd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Comparison between simulated and observed LHC beam backgrounds in the ATLAS experiment at $E_textrm beam$ = 4 TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2018-zze/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-zze/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Constraints on off-shell Higgs boson production and the Higgs boson total width in $ZZto4ell$ and $ZZto2ell2ν$ final states with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-puo/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-puo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Direct top-quark decay width measurement in the $tbart$ lepton&#43;jets channel at $sqrts$=8 TeV with the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aaboud-2017-uqq/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-uqq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Evidence for the associated production of the Higgs boson and a top quark pair with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-jvq/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-jvq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of $τ $ polarisation in $Z/γ ^*i̊ghtarrow τ τ $ decays in proton–proton collisions at $sqrts=8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-lhv/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-lhv/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of colour flow using jet-pull observables in $tbart$ events with the ATLAS experiment at $sqrts = 13,hbox TeV$</title>
      <link>http://othrif.github.io/publication/aaboud-2018-ibj/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-ibj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of differential cross sections and $W^&#43;/W^-$ cross-section ratios for $W$ boson production in association with jets at $sqrts=8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-soa/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-soa/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of differential cross sections of isolated-photon plus heavy-flavour jet production in pp collisions at $sqrts=8$ TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-skj/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-skj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of differential cross-sections of a single top quark produced in association with a $W$ boson at $sqrts=13$ TeV with ATLAS</title>
      <link>http://othrif.github.io/publication/aaboud-2017-qyi/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-qyi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of dijet azimuthal decorrelations in $pp$ collisions at $sqrts=8$ TeV with the ATLAS detector and determination of the strong coupling</title>
      <link>http://othrif.github.io/publication/aaboud-2018-hie/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-hie/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of inclusive jet and dijet cross-sections in proton-proton collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-wsi/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-wsi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of jet fragmentation in 5.02 TeV proton-lead and proton-proton collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-tke/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-tke/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of jet fragmentation in Pb&#43;Pb and $pp$ collisions at $sqrts_NN = 5.02$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-hpb/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-hpb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of long-range multiparticle azimuthal correlations with the subevent cumulant method in $pp$ and $p &#43; Pb$ collisions with the ATLAS detector at the CERN Large Hadron Collider</title>
      <link>http://othrif.github.io/publication/aaboud-2017-blb/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-blb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of longitudinal flow decorrelations in Pb&#43;Pb collisions at $sqrts_text NN=2.76$ and 5.02 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-tql/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-tql/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of quarkonium production in proton–lead and proton–proton collisions at $5.02~ mathrm TeV$ with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-cif/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-cif/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the $ Zγ to ν øverlineνγ $ production cross section in pp collisions at $ sqrts=13 $ TeV with the ATLAS detector and limits on anomalous triple gauge-boson couplings</title>
      <link>http://othrif.github.io/publication/aaboud-2018-jst/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-jst/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the $W$-boson mass in pp collisions at $sqrts=7$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-svj/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-svj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the azimuthal anisotropy of charged particles produced in $sqrts__text NN$ = 5.02 TeV Pb&#43;Pb collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-ves/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-ves/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the cross section for isolated-photon plus jet production in $pp$ collisions at $sqrt s=13$ TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-kff/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-kff/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the cross-section for producing a W boson in association with a single top quark in pp collisions at $ sqrts=13 $ TeV with ATLAS</title>
      <link>http://othrif.github.io/publication/aaboud-2016-lpj/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-lpj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the exclusive $γ γ i̊ghtarrow μ^&#43; μ^-$ process in proton-proton collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-oiq/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-oiq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the Higgs boson coupling properties in the $Hi̊ghtarrow ZZ^* g̊htarrow 4ell$ decay channel at $sqrts$ = 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-vzb/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-vzb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the Higgs boson mass in the $Hi̊ghtarrow ZZ^* g̊htarrow 4ell$ and $H rh̊tarrow γγ$ channels with $sqrts=13$ TeV $pp$ collisions using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-wps/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-wps/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the inclusive and fiducial $tbart$ production cross-sections in the lepton&#43;jets channel in $pp$ collisions at $sqrts = 8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-cgs/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-cgs/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the production cross section of three isolated photons in $pp$ collisions at $sqrts$ = 8 TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-lxm/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-lxm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the production cross-section of a single top quark in association with a Z boson in proton–proton collisions at 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-ylb/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-ylb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the Soft-Drop Jet Mass in pp Collisions at $sqrts = 13$  TeV with the ATLAS Detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-qwh/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-qwh/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the suppression and azimuthal anisotropy of muons from heavy-flavor decays in Pb&#43;Pb collisions at $sqrts_mathrmNN = 2.76$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-bdg/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-bdg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of b-jet tagging efficiency with the ATLAS detector using $ tøverlinet $ events at $ sqrts=13 $ TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2018-xwy/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-xwy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of differential cross sections of top quark pair production in association with jets in $pp$ collisions at $sqrts=13$ TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-uzf/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-uzf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Observation of $H i̊ghtarrow bbarb$ decays and $VH$ production with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-zhk/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-zhk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Observation of centrality-dependent acoplanarity for muon pairs produced via two-photon scattering in Pb&#43;Pb collisions at $sqrts_mathrmNN=5.02$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-eph/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-eph/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Observation of Higgs boson production in association with a top quark pair at the LHC with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-urx/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-urx/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Performance of missing transverse momentum reconstruction with the ATLAS detector using proton-proton collisions at $sqrts$ = 13 TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2018-tkc/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-tkc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Probing the quantum interference between singly and doubly resonant top-quark production in $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-bir/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-bir/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Prompt and non-prompt $J/ψ $ elliptic flow in Pb&#43;Pb collisions at $sqrts__text NN = 5.02$ Tev with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-ttm/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-ttm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for $W&#39; i̊ghtarrow tb$ decays in the hadronic final state using pp collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-juj/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-juj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for $WW/WZ$ resonance production in $ell ν qq$ final states in $pp$ collisions at $sqrts =$ 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-fgj/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-fgj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for a heavy Higgs boson decaying into a $Z$ boson and another heavy Higgs boson in the $ellell bb$ final state in $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-eoy/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-eoy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for a new heavy gauge boson resonance decaying into a lepton and missing transverse momentum in 36 fb$^-1$ of $pp$ collisions at $sqrts =$ 13 TeV with the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aaboud-2017-efa/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-efa/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for a Structure in the $B^0_s π^±$ Invariant Mass Spectrum with the ATLAS Experiment</title>
      <link>http://othrif.github.io/publication/aaboud-2018-hgx/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-hgx/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for additional heavy neutral Higgs and gauge bosons in the ditau final state produced in 36 fb$^−1$ of pp collisions at $ sqrts=13 $ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-sjh/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-sjh/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for an invisibly decaying Higgs boson or dark matter candidates produced in association with a $Z$ boson in $pp$ collisions at $sqrts =$ 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-bja/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-bja/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for B-L R -parity-violating top squarks in $sqrt s$ =13  TeV pp collisions with the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aaboud-2017-opj/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-opj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for charged Higgs bosons decaying into top and bottom quarks at $sqrts$ = 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-cwk/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-cwk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for charged Higgs bosons decaying via $H^± to τ^±ν_τ$ in the $τ$&#43;jets and $τ$&#43;lepton final states with 36 fb$^-1$ of $pp$ collision data recorded at $sqrts = 13$ TeV with the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aaboud-2018-gjj/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-gjj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for chargino-neutralino production using recursive jigsaw reconstruction in final states with two or three charged leptons in proton-proton collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-sua/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-sua/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for dark matter and other new phenomena in events with an energetic jet and large missing transverse momentum using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-phn/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-phn/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for dark matter in events with a hadronically decaying vector boson and missing transverse momentum in $pp$ collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-xdl/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-xdl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for dark matter produced in association with bottom or top quarks in $sqrts=13$ TeV pp collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-rzf/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-rzf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for diboson resonances with boson-tagged jets in $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-eta/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-eta/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for doubly charged Higgs boson production in multi-lepton final states with the ATLAS detector using proton–proton collisions at $sqrts=13,text TeV$</title>
      <link>http://othrif.github.io/publication/aaboud-2017-qph/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-qph/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for electroweak production of supersymmetric states in scenarios with compressed mass spectra at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-leg/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-leg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for exclusive Higgs and $Z$ boson decays to $ϕγ$ and $h̊oγ$ with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-xnb/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-xnb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for flavor-changing neutral currents in top quark decays $tto Hc$ and $t to Hu$ in multilepton final states in proton-proton collisions at $sqrts= 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-pob/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-pob/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for heavy particles decaying into top-quark pairs using lepton-plus-jets events in proton–proton collisions at $sqrts = 13$   $text TeV$ with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-mjh/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-mjh/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for heavy resonances decaying into $WW$ in the $eνμν$ final state in $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-gsl/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-gsl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for heavy resonances decaying into a $W$ or $Z$ boson and a Higgs boson in final states with leptons and $b$-jets in 36 fb$^-1$ of $sqrt s = 13$ TeV $pp$ collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-cxo/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-cxo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for heavy resonances decaying to a photon and a hadronically decaying $Z/W/H$ boson in $pp$ collisions at $sqrts=13$ $mathrmTeV$ with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-fgi/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-fgi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for heavy ZZ resonances in the $ell ^&#43;ell ^-ell ^&#43;ell ^-$ and $ell ^&#43;ell ^-ν barν $ final states using proton–proton collisions at $sqrts= 13$   $text TeV$ with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-rel/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-rel/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for Higgs boson decays into pairs of light (pseudo)scalar particles in the $γγ jj$ final state in $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-gmx/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-gmx/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for Higgs boson pair production in the $γγ bbarb$ final state with 13 TeV $pp$ collision data collected by the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aaboud-2018-ftw/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-ftw/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for Higgs boson pair production in the $γγ WW^*$ channel using $pp$ collision data recorded at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-ewm/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-ewm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for Higgs bosons produced via vector-boson fusion and decaying into bottom quark pairs in $sqrts = 13$ $mathrmTeV$ $pp$ collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-gay/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-gay/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for High-Mass Resonances Decaying to $τν$ in $pp$ Collisions at $sqrts$ = 13 TeV with the ATLAS Detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-vgh/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-vgh/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for lepton-flavor violation in different-flavor, high-mass final states in $pp$ collisions at $sqrt s=13 $ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-jff/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-jff/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for long-lived charginos based on a disappearing-track signature in $pp$ collisions at $sqrts$ = 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-mpt/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-mpt/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for long-lived, massive particles in events with displaced vertices and missing transverse momentum in $sqrts$ = 13 TeV $pp$ collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-iio/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-iio/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for low-mass dijet resonances using trigger-level jets with the ATLAS detector in $pp$ collisions at $sqrts=13$ TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2018-fzt/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-fzt/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for new phenomena in events with same-charge leptons and $b$-jets in $pp$ collisions at $sqrts= 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-xpj/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-xpj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for new phenomena in high-mass final states with a photon and a jet from $pp$ collisions at $sqrts$ = 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-nak/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-nak/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for new phenomena using the invariant mass distribution of same-flavour opposite-sign dilepton pairs in events with missing transverse momentum in $sqrts=13$   $text Tetext V$ pp collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-ujj/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-ujj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for pair production of heavy vector-like quarks decaying into hadronic final states in $pp$ collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-wxv/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-wxv/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for pair production of heavy vector-like quarks decaying into high-$p_T$ $W$ bosons and top quarks in the lepton-plus-jets final state in $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-uek/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-uek/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for pair production of higgsinos in final states with at least three $b$-tagged jets in $sqrts = 13$ TeV $pp$ collisions using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-htj/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-htj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for pair production of up-type vector-like quarks and for four-top-quark events in final states with multiple $b$-jets with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-xuw/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-xuw/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for pair- and single-production of vector-like quarks in final states with at least one $Z$ boson decaying into a pair of electrons or muons in $pp$ collision data collected with the ATLAS detector at $sqrts = 13$ TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2018-saj/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-saj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for photonic signatures of gauge-mediated supersymmetry in 13 TeV $pp$ collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-doq/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-doq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for R-parity-violating supersymmetric particles in multi-jet final states produced in $p$-$p$ collisions at $sqrts =13$ TeV using the ATLAS detector at the LHC</title>
      <link>http://othrif.github.io/publication/aaboud-2018-lpl/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-lpl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for resonances in the mass distribution of jet pairs with one or two jets identified as $b$-jets in proton-proton collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-tqo/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-tqo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for resonant $WZ$ production in the fully leptonic final state in proton-proton collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-ohp/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-ohp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for resonant and non-resonant Higgs boson pair production in the $bbarbτ^&#43;τ^-$ decay channel in $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-sfw/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-sfw/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for squarks and gluinos in final states with jets and missing transverse momentum using 36 fb$^-1$ of $sqrts$=13 TeV $pp$ collision data with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-vwy/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-vwy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for supersymmetry in events with four or more leptons in $sqrts=13$ TeV $pp$ collisions with ATLAS</title>
      <link>http://othrif.github.io/publication/aaboud-2018-zeb/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-zeb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for supersymmetry in final states with charm jets and missing transverse momentum in 13 TeV $pp$ collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-zjf/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-zjf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for supersymmetry in final states with missing transverse momentum and multiple $b$-jets in proton-proton collisions at $ sqrts=13 $ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-hrg/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-hrg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for the Decay of the Higgs Boson to Charm Quarks with the ATLAS Experiment</title>
      <link>http://othrif.github.io/publication/aaboud-2018-fhh/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-fhh/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for the direct production of charginos and neutralinos  in final states with tau leptons in $sqrts = $ 13 TeV $pp$ collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-nhr/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-nhr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for the Higgs boson produced in association with a vector boson and decaying into two spin-zero particles in the $H i̊ghtarrow aa g̊htarrow 4b$ channel in $pp$ collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-iil/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-iil/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for the standard model Higgs boson produced in association with top quarks and decaying into a $bbarb$ pair in $pp$ collisions at $sqrts$ = 13  TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-rss/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-rss/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for top squarks decaying to tau sleptons in $pp$ collisions at  $sqrts= 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-kya/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-kya/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for top-squark pair production in final states with one lepton, jets, and missing transverse momentum using 36 fb$^−1$ of $ sqrts=13 $ TeV pp collision data with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-aeu/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-aeu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Searches for exclusive Higgs and $Z$ boson decays into $J/ψγ$, $ψ(2S)γ$, and $Υ(nS)γ$ at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2018-txb/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2018-txb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Searches for heavy $ZZ$ and $ZW$ resonances in the $ellell qq$ and $νν qq$ final states in $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-itg/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-itg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Looping Over Two Lists</title>
      <link>http://othrif.github.io/post/python/looping_over_two_lists/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      <guid>http://othrif.github.io/post/python/looping_over_two_lists/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create a list of length 3:
armies = [&#39;Red Army&#39;, &#39;Blue Army&#39;, &#39;Green Army&#39;]

# Create a list of length 4:
units = [&#39;Red Infantry&#39;, &#39;Blue Armor&#39;,&#39;Green Artillery&#39;,&#39;Orange Aircraft&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# For each element in the first list,
for army, unit in zip(armies, units):
    # Display the corresponding index element of the second list:
    print(army, &#39;has the following options:&#39;, unit)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Red Army has the following options: Red Infantry
Blue Army has the following options: Blue Armor
Green Army has the following options: Green Artillery
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that the fourth item of the second list, &lt;code&gt;orange aircraft&lt;/code&gt;, did not display.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Numpy Array Basics</title>
      <link>http://othrif.github.io/post/python/numpy_array_basics/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      <guid>http://othrif.github.io/post/python/numpy_array_basics/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import modules
import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create a list
battle_deaths = [3246, 326, 2754, 2547, 2457, 3456]
battle_deaths
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[3246, 326, 2754, 2547, 2457, 3456]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create an array from numpy
deaths = np.array(battle_deaths)
deaths
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([3246,  326, 2754, 2547, 2457, 3456])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create an array of zeros
defectors = np.zeros(6)
defectors
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 0.,  0.,  0.,  0.,  0.,  0.])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create a range from 0 to 100
zero_to_99 = np.arange(0, 100)
zero_to_99
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create 100 ticks between 0 and 1
zero_to_1 = np.linspace(0, 1, 100)
zero_to_1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 0.        ,  0.01010101,  0.02020202,  0.03030303,  0.04040404,
        0.05050505,  0.06060606,  0.07070707,  0.08080808,  0.09090909,
        0.1010101 ,  0.11111111,  0.12121212,  0.13131313,  0.14141414,
        0.15151515,  0.16161616,  0.17171717,  0.18181818,  0.19191919,
        0.2020202 ,  0.21212121,  0.22222222,  0.23232323,  0.24242424,
        0.25252525,  0.26262626,  0.27272727,  0.28282828,  0.29292929,
        0.3030303 ,  0.31313131,  0.32323232,  0.33333333,  0.34343434,
        0.35353535,  0.36363636,  0.37373737,  0.38383838,  0.39393939,
        0.4040404 ,  0.41414141,  0.42424242,  0.43434343,  0.44444444,
        0.45454545,  0.46464646,  0.47474747,  0.48484848,  0.49494949,
        0.50505051,  0.51515152,  0.52525253,  0.53535354,  0.54545455,
        0.55555556,  0.56565657,  0.57575758,  0.58585859,  0.5959596 ,
        0.60606061,  0.61616162,  0.62626263,  0.63636364,  0.64646465,
        0.65656566,  0.66666667,  0.67676768,  0.68686869,  0.6969697 ,
        0.70707071,  0.71717172,  0.72727273,  0.73737374,  0.74747475,
        0.75757576,  0.76767677,  0.77777778,  0.78787879,  0.7979798 ,
        0.80808081,  0.81818182,  0.82828283,  0.83838384,  0.84848485,
        0.85858586,  0.86868687,  0.87878788,  0.88888889,  0.8989899 ,
        0.90909091,  0.91919192,  0.92929293,  0.93939394,  0.94949495,
        0.95959596,  0.96969697,  0.97979798,  0.98989899,  1.        ])
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>A measurement of the calorimeter response to single hadrons and determination of the jet energy scale uncertainty using LHC Run-1 $pp$-collision data with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-hwh/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-hwh/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Analysis of the $Wtb$ vertex from the measurement of triple-differential angular decay rates of single top quarks produced in the $t$-channel at $sqrts$ = 8 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-yqf/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-yqf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Determination of the strong coupling constant $α _mathrm s$ from transverse energy–energy correlations in multijet events at $sqrts = 8~ hbox TeV$ using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-fml/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-fml/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Electron efficiency measurements with the ATLAS detector using 2012 LHC proton–proton collision data</title>
      <link>http://othrif.github.io/publication/aaboud-2016-vfy/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-vfy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Evidence for light-by-light scattering in heavy-ion collisions with the ATLAS detector at the LHC</title>
      <link>http://othrif.github.io/publication/aaboud-2017-bwk/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-bwk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Evidence for the $ Hto bøverlineb $ decay with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-xsd/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-xsd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Femtoscopy with identified charged pions in proton-lead collisions at $sqrts_mathrmNN=5.02$ TeV with ATLAS</title>
      <link>http://othrif.github.io/publication/aaboud-2017-xpw/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-xpw/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Fiducial, total and differential cross-section measurements of $t$-channel single top-quark production in $pp$ collisions at 8 TeV using data collected by the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-pdi/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-pdi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>High-$E_m̊ T$ isolated-photon plus jets production in $pp$ collisions at $sqrt s=$ 8 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-sdm/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-sdm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Identification and rejection of pile-up jets at high pseudorapidity with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-pou/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-pou/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Jet energy scale measurements and their systematic uncertainties in proton-proton collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-jcu/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-jcu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Jet reconstruction and performance using particle flow with the ATLAS Detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-aca/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-aca/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of $b$-hadron pair production with the ATLAS detector in proton-proton collisions at $sqrts=8$ TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2017-vqt/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-vqt/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of $W$ boson angular distributions in events with high transverse momentum jets at $sqrts=$ 8 TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-ylh/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-ylh/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of $W^±W^±$ vector-boson scattering and limits on anomalous quartic gauge couplings with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-ffv/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-ffv/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of $WW/WZ to ell ν q q^prime$ production with the hadronically decaying boson reconstructed as one or two jets in $pp$ collisions at $sqrts=8$ TeV with ATLAS, and constraints on anomalous gauge couplings</title>
      <link>http://othrif.github.io/publication/aaboud-2017-cgf/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-cgf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of charged-particle distributions sensitive to the underlying event in $ sqrts=13 $ TeV proton-proton collisions with the ATLAS detector at the LHC</title>
      <link>http://othrif.github.io/publication/aaboud-2017-fwp/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-fwp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of detector-corrected observables sensitive to the anomalous production of events with jets and large missing transverse momentum in $pp$ collisions at $mathbf sqrts=13$  TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-buf/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-buf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of forward-backward multiplicity correlations in lead-lead, proton-lead, and proton-proton collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-jnr/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-jnr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of inclusive and differential cross sections in the $H i̊ghtarrow ZZ^* g̊htarrow 4ell$ decay channel in $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-oem/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-oem/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of jet $p_mathrmT$ correlations in Pb&#43;Pb and $pp$ collisions at $sqrts_mathrmNN=$ 2.76 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-eww/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-eww/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of jet activity produced in top-quark events with an electron, a muon and two $b$-tagged jets in the final state in $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-xii/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-xii/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of jet fragmentation in Pb&#43;Pb and $pp$ collisions at $sqrts_mathrmNN = 2.76$ TeV with the ATLAS detector at the LHC</title>
      <link>http://othrif.github.io/publication/aaboud-2017-bzv/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-bzv/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of lepton differential distributions and the top quark mass in $tbart$ production in $pp$ collisions at $sqrts=8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-ujq/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-ujq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of multi-particle azimuthal correlations in $pp$, $p&#43;$Pb and low-multiplicity Pb$&#43;$Pb collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-acw/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-acw/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the $ tøverlinetγ $ production cross section in proton-proton collisions at $ sqrts=8 $ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-era/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-era/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the $k_mathrmt$ splitting scales in $Z to ellell$ events in $pp$ collisions at $sqrts = 8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-hox/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-hox/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the $tbart$ production cross section in the $τ$ &#43; jets final state in $pp$ collisions at $sqrts=8$ TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-rgh/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-rgh/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the $tbartZ$ and $tbartW$ production cross sections in multilepton final states using 3.2 fb$^-1$ of $pp$ collisions at $sqrts$ = 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-xve/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-xve/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the $W^&#43;W^-$ production cross section in $pp$ collisions at a centre-of-mass energy of $sqrts$ = 13 TeV with the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aaboud-2017-qkn/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-qkn/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the $ZZ$ production cross section in proton-proton collisions at $sqrt s =$ 8 TeV using the $ZZtoell^-ell^&#43;ell^prime -ell^prime &#43;$ and $ZZtoell^-ell^&#43;νbarν$ channels with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-urj/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-urj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the cross section for inclusive isolated-photon production in $pp$ collisions at $sqrt s=13$ TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-cbm/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-cbm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the cross-section for electroweak production of dijets in association with a Z boson in pp collisions at $sqrt s$ = 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-emo/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-emo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the Drell-Yan triple-differential cross section in $pp$ collisions at $sqrts = 8$ TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2017-ffb/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-ffb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the inclusive cross-sections of single top-quark and top-antiquark $t$-channel production in $pp$ collisions at $sqrts$ = 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-ymp/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-ymp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the inclusive jet cross-sections in proton-proton collisions at $ sqrts=8 $ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-dvo/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-dvo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the prompt J/ $ψ $ pair production cross-section in pp collisions at $sqrts = 8$  TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-fzt/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-fzt/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the W boson polarisation in $tbart$ events from pp collisions at $sqrts$ = 8 TeV in the lepton &#43; jets channel with ATLAS</title>
      <link>http://othrif.github.io/publication/aaboud-2016-hsq/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-hsq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of $ψ(2S)$ and $X(3872) to J/ψπ^&#43;π^-$ production in $pp$ collisions at $sqrts = 8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-vzw/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-vzw/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of charge and CP asymmetries in $b$-hadron decays using top-quark events collected by the ATLAS detector in $pp$ collisions at $sqrts=8$ TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2016-bmk/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-bmk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of electroweak $Wjj$ production and constraints on anomalous gauge couplings with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-fye/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-fye/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of integrated and differential cross sections for isolated photon pair production in $pp$ collisions at $sqrts=8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-vol/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-vol/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of long-range azimuthal anisotropies and associated Fourier coefficients for $pp$ collisions at $sqrts=5.02$ and $13$ TeV and $p$&#43;Pb collisions at $sqrts_mathrmNN=5.02$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-yar/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-yar/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of the production cross section of a $Z$ boson in association with jets in pp collisions at $sqrts = 13$  TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-hbk/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-hbk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of top quark spin observables in $ tøverlinet $ events using dilepton final states in $ sqrts=8 $ TeV pp collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-bit/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-bit/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of top-quark pair differential cross-sections in the $eμ$ channel in $pp$ collisions at $sqrts = 13$ TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-syx/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-syx/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of top-quark pair differential cross-sections in the lepton&#43;jets channel in $pp$ collisions at   $sqrts=13$ TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-fha/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-fha/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of top-quark pair to $Z$-boson cross-section ratios at $sqrt s = 13, 8, 7$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-zpd/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-zpd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Performance of algorithms that reconstruct missing transverse momentum in $sqrts=$ 8 TeV proton-proton collisions in the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2016-nrq/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-nrq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Performance of the ATLAS Track Reconstruction Algorithms in Dense Environments in LHC Run 2</title>
      <link>http://othrif.github.io/publication/aaboud-2017-all/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-all/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Performance of the ATLAS Transition Radiation Tracker in Run 1 of the LHC: tracker properties</title>
      <link>http://othrif.github.io/publication/aaboud-2017-odu/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-odu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Performance of the ATLAS Trigger System in 2015</title>
      <link>http://othrif.github.io/publication/aaboud-2016-leb/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-leb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Precision measurement and interpretation of inclusive $W^&#43;$ , $W^-$ and $Z/γ ^*$ production cross sections with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-btc/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-btc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Probing the W tb vertex structure in t-channel single-top-quark production and decay in pp collisions at $ sqrts=8 $ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-aqp/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-aqp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Reconstruction of primary vertices at the ATLAS experiment in Run 1 proton–proton collisions at the LHC</title>
      <link>http://othrif.github.io/publication/aaboud-2016-rmg/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-rmg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for a scalar partner of the top quark in the jets plus missing transverse momentum final state at $sqrts$=13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-ayj/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-ayj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for anomalous electroweak production of $WW/WZ$ in association with a high-mass dijet system in $pp$ collisions at $sqrts=8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-uuk/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-uuk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for dark matter at $sqrts=13$ TeV in final states containing an energetic photon and large missing transverse momentum with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-dor/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-dor/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for dark matter in association with a Higgs boson decaying to $b$-quarks in $pp$ collisions at $sqrt s=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-obm/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-obm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for dark matter in association with a Higgs boson decaying to two photons at $sqrts$ = 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-uak/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-uak/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for Dark Matter Produced in Association with a Higgs Boson Decaying to $bbar b$ using 36 fb$^-1$ of $pp$ collisions at $sqrt s=13$ TeV with the ATLAS Detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-yqz/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-yqz/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for direct top squark pair production in events with a Higgs or $Z$ boson, and missing transverse momentum in $sqrts=13$ TeV $pp$ collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-ejf/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-ejf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for direct top squark pair production in final states with two leptons in $sqrts = 13$ TeV $pp$ collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-nfd/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-nfd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for Heavy Higgs Bosons $A/H$ Decaying to a Top Quark Pair in $pp$ Collisions at $sqrts=8text text mathrmTeV$ with the ATLAS Detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-hnm/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-hnm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for heavy resonances decaying to a $W$ or $Z$ boson and a Higgs boson in the $qbarq^(prime)bbarb$ final state in $pp$ collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-ahz/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-ahz/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for heavy resonances decaying to a $Z$ boson and a photon in $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-trl/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-trl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for lepton-flavour-violating decays of the Higgs and $Z$ bosons with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2016-blu/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-blu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for new high-mass phenomena in the dilepton final state using 36 fb$^−1$ of proton-proton collision data at $ sqrts=13 $ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-buh/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-buh/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for new phenomena in a lepton plus high jet multiplicity final state with the ATLAS experiment using $ sqrts=13 $ TeV proton-proton collision data</title>
      <link>http://othrif.github.io/publication/aaboud-2017-faq/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-faq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for new phenomena in dijet events using 37 fb$^-1$ of $pp$ collision data collected at $sqrts=$13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-yvp/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-yvp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for new phenomena in events containing a same-flavour opposite-sign dilepton pair, jets, and large missing transverse momentum in $sqrts=$ 13 $pp$ collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-ejt/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-ejt/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for new phenomena in high-mass diphoton final states using 37 fb$^-1$ of proton--proton collisions collected at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-yyg/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-yyg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for new phenomena with large jet multiplicities and missing transverse momentum using large-radius jets and flavour-tagging at ATLAS in 13 TeV $pp$ collisions</title>
      <link>http://othrif.github.io/publication/aaboud-2017-hdf/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-hdf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for new resonances decaying to a $W$ or $Z$ boson and a Higgs boson in the $ell^&#43; ell^- bbar b$, $ell ν bbar b$, and $νbarν bbar b$ channels with $pp$ collisions at $sqrt s = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-lwx/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-lwx/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for pair production of heavy vector-like quarks decaying to high-p$_T$ W bosons and b quarks in the lepton-plus-jets final state in pp collisions at $ sqrts=13 $ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-zfn/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-zfn/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for pair production of vector-like top quarks in events with one lepton, jets, and missing transverse momentum in $ sqrts=13 $ TeV $pp$ collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-qpr/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-qpr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for squarks and gluinos in events with an isolated lepton, jets, and missing transverse momentum at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-bac/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-bac/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for supersymmetry at 13 TeV in final states with two same-sign leptons or at least three leptons and jets using pp collisions recorded with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/rifki-2016-rup/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/rifki-2016-rup/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for supersymmetry in events with $b$-tagged jets and missing transverse momentum in $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-wqg/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-wqg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for supersymmetry in final states with two same sign leptons or three leptons and jets with the ATLAS detector at the LHC</title>
      <link>http://othrif.github.io/publication/rifki-2017-qgx/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/rifki-2017-qgx/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for supersymmetry in final states with two same-sign or three leptons and jets using 36 fb$^-1$ of $sqrts=13$ TeV $pp$ collision data with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-dmy/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-dmy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for the dimuon decay of the Higgs boson in $pp$ collisions at $sqrts$ = 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-ojs/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-ojs/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for top quark decays $ti̊ghtarrow qH$, with $Htoγγ$, in $sqrts=13$ TeV $pp$ collisions using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-mfd/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-mfd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for triboson $W^± W^± W^∓ $ production in $pp$ collisions at $sqrts=8$   $text TeV$ with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-ftt/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-ftt/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Searches for the $Zγ$ decay mode of the Higgs boson and for new high-mass resonances in $pp$ collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-uhw/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-uhw/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Studies of $Zγ$ production in association with a high-mass dijet system in $pp$ collisions at $sqrts=$ 8 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-pds/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-pds/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Study of $WWγ$ and $WZγ$ production in $pp$ collisions at $sqrts = 8$ TeV and search for anomalous quartic gauge couplings with the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aaboud-2017-tcq/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-tcq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Study of ordered hadron chains with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-plr/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-plr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Study of the material of the ATLAS inner detector for Run 2 of the LHC</title>
      <link>http://othrif.github.io/publication/aaboud-2017-pjd/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-pjd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Top-quark mass measurement in the all-hadronic $ tøverlinet $ decay channel at $ sqrts=8 $ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2017-mae/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2017-mae/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Topological cell clustering in the ATLAS calorimeters and its performance in LHC Run 1</title>
      <link>http://othrif.github.io/publication/aad-2016-upy/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-upy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A measurement of material in the ATLAS tracker using secondary hadronic interactions in 7 TeV pp collisions</title>
      <link>http://othrif.github.io/publication/aaboud-2016-poq/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-poq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A new method to distinguish hadronically decaying boosted $Z$ bosons from $W$ bosons using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-eax/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-eax/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A search for an excited muon decaying to a muon and two jets in $pp$ collisions at $sqrts$ = 8 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2016-giq/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-giq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A search for prompt lepton-jets in $pp$ collisions at $sqrts=$ 8 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-sms/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-sms/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A search for top squarks with R-parity-violating decays to all-hadronic final states with the ATLAS detector in $sqrts$ = 8 TeV proton-proton collisions</title>
      <link>http://othrif.github.io/publication/aad-2016-kww/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-kww/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ATLAS searches for squarks and gluinos using leptons or multiple b-jets with 3.2 $fb^-1$ of pp collisions at 13 TeV</title>
      <link>http://othrif.github.io/publication/rifki-2016-tos/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/rifki-2016-tos/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Beam-induced and cosmic-ray backgrounds observed in the ATLAS detector during the LHC 2012 proton-proton running period</title>
      <link>http://othrif.github.io/publication/aad-2016-tzx/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-tzx/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Charged-particle distributions at low transverse momentum in $sqrts = 13$  TeV $pp$ interactions measured with the ATLAS detector at the LHC</title>
      <link>http://othrif.github.io/publication/aaboud-2016-itf/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-itf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Charged-particle distributions in $pp$ interactions at $sqrts=$ 8 TeV measured with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2016-xww/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-xww/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Charged-particle distributions in $sqrts$ = 13 TeV pp interactions measured with the ATLAS detector at the LHC</title>
      <link>http://othrif.github.io/publication/aad-2016-mok/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-mok/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Combination of searches for $WW$, $WZ$, and $ZZ$ resonances in $pp$ collisions at $sqrts = 8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-ipg/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-ipg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Constraints on non-Standard Model Higgs boson interactions in an effective Lagrangian using differential cross sections measured in the $H i̊ghtarrow γγ$ decay channel at $sqrts = 8$TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-tna/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-tna/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dark matter interpretations of ATLAS searches for the electroweak production of supersymmetric particles in $ sqrts=8 $ TeV proton-proton collisions</title>
      <link>http://othrif.github.io/publication/aaboud-2016-wna/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-wna/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dijet production in $sqrts=$ 7 TeV $pp$ collisions with large rapidity gaps at the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aad-2015-xis/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-xis/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Evidence for single top-quark production in the $s$-channel in proton-proton collisions at $sqrts=$8 TeV with the ATLAS detector using the Matrix Element Method</title>
      <link>http://othrif.github.io/publication/aad-2015-upn/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-upn/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Identification of boosted, hadronically decaying W bosons and comparisons with ATLAS data taken at $sqrts = 8$ TeV</title>
      <link>http://othrif.github.io/publication/aad-2015-rpa/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-rpa/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Identification of high transverse momentum top quarks in $pp$ collisions at $sqrts$ = 8 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2016-pux/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-pux/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Luminosity determination in pp collisions at $sqrts$ = 8 TeV using the ATLAS detector at the LHC</title>
      <link>http://othrif.github.io/publication/aaboud-2016-hhf/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-hhf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of $W^&#43;W^-$ production in association with one jet in proton--proton collisions at $sqrts =8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-mrt/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-mrt/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of $W^±$ and $Z$-boson production cross sections in $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2016-naf/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-naf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of event-shape observables in $Z i̊ghtarrow ell ^&#43; ell ^-$ events in $pp$ collisions at $sqrts=$ 7 TeV with the ATLAS detector at the LHC</title>
      <link>http://othrif.github.io/publication/aad-2016-ria/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-ria/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of exclusive $γγi̊ghtarrow W^&#43;W^-$ production and search for exclusive Higgs boson production in $pp$ collisions at $sqrts = 8$ TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-dkv/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-dkv/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of fiducial differential cross sections of gluon-fusion production of Higgs bosons decaying to WW$^∗$→eνμν with the ATLAS detector at $ sqrts=8 $ TeV</title>
      <link>http://othrif.github.io/publication/aad-2016-lvc/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-lvc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of jet activity in top quark events using the $eμ$ final state with two $b$-tagged jets in $pp$ collisions at $sqrts=8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-omn/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-omn/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of jet charge in dijet events from $sqrts$=8  TeV pp collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-cua/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-cua/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the $bøverlineb$ dijet cross section in pp collisions at $sqrts = 7$  TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-jed/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-jed/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the $tbart$ production cross-section using $eμ$ events with b-tagged jets in pp collisions at $sqrts$=13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-pbd/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-pbd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the $W^±Z$ boson pair-production cross section in $pp$ collisions at $sqrts=13$ TeV with the ATLAS Detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-yus/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-yus/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the $ZZ$ Production Cross Section in $pp$ Collisions at $sqrts$ = 13 TeV with the ATLAS Detector</title>
      <link>http://othrif.github.io/publication/aad-2015-zqe/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-zqe/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the angular coefficients in $Z$-boson events using electron and muon pairs from data taken at $sqrts=8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2016-izn/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-izn/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the charge asymmetry in highly boosted top-quark pair production in $sqrts =$ 8 TeV $pp$ collision data collected by the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aad-2015-lgx/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-lgx/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the charge asymmetry in top-quark pair production in the lepton-plus-jets final state in pp collision data at $sqrts=8,mathrm TeV$ with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-noh/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-noh/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the charged-particle multiplicity inside jets from $sqrts=8$ TeV $pp$ collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2016-oit/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-oit/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the correlations between the polar angles of leptons from top quark decays in the helicity basis at $sqrts=7$TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-bfa/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-bfa/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the dependence of transverse energy production at large pseudorapidity on the hard-scattering kinematics of proton-proton collisions at $sqrts = 2.76$ TeV with ATLAS</title>
      <link>http://othrif.github.io/publication/aad-2015-ziq/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-ziq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the differential cross-section of highly boosted top quarks as a function of their transverse momentum in $sqrts$ = 8 TeV proton-proton collisions using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-hna/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-hna/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the differential cross-sections of prompt and non-prompt production of $J/ψ $ and $ψ (2mathrm S)$ in $pp$ collisions at $sqrts = 7$ and 8 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-duc/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-duc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the double-differential high-mass Drell-Yan cross section in pp collisions at $ sqrts=8 $ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2016-zzw/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-zzw/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the inclusive isolated prompt photon cross section in pp collisions at $ sqrts=8 $ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2016-xcr/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-xcr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the Inelastic Proton-Proton Cross Section at $sqrts = 13$  TeV with the ATLAS Detector at the LHC</title>
      <link>http://othrif.github.io/publication/aaboud-2016-mmw/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-mmw/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the photon identification efficiencies with the ATLAS detector using LHC Run-1 data</title>
      <link>http://othrif.github.io/publication/aaboud-2016-yuq/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-yuq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the production cross-section of a single top quark in association with a $W$ boson at 8 TeV with the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aad-2015-eto/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-eto/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the relative width difference of the $B^0$-$bar B^0$ system with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-bro/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-bro/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the top quark mass in the $tbartto$ dilepton channel from $sqrts=8$ TeV ATLAS data</title>
      <link>http://othrif.github.io/publication/aaboud-2016-igd/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-igd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the total cross section from elastic scattering in $pp$ collisions at $sqrts=8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-ijx/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-ijx/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the transverse momentum and $ϕ ^*_η $ distributions of Drell–Yan lepton pairs in proton–proton collisions at $sqrts=8$  TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-auj/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-auj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of top quark pair differential cross-sections in the dilepton channel in $pp$ collisions at $sqrts$ = 7 and 8 TeV with ATLAS</title>
      <link>http://othrif.github.io/publication/aaboud-2016-iot/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-iot/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of total and differential $W^&#43;W^-$ production cross sections in proton-proton collisions at $sqrts=$ 8 TeV with the ATLAS detector and limits on anomalous triple-gauge-boson couplings</title>
      <link>http://othrif.github.io/publication/aad-2016-wpd/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-wpd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of $W^± Z$ production cross sections in $pp$ collisions at $sqrts = 8$ TeV with the ATLAS detector and limits on anomalous gauge boson self-couplings</title>
      <link>http://othrif.github.io/publication/aad-2016-ett/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-ett/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of $Zγ$ and $Zγγ$ production in $pp$ collisions at $sqrts=$ 8 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2016-sau/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-sau/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of fiducial cross-sections for $tbart$ production with one or two additional b-jets in pp collisions at $sqrts$ =8 TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-yja/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-yja/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of four-lepton production in $pp$ collisions at $sqrts=$ 8 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-rka/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-rka/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of the charge asymmetry in top-quark pair production in the dilepton final state at $sqrts=8$  TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2016-ove/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-ove/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of the Higgs boson production and decay rates and constraints on its couplings from a combined ATLAS and CMS analysis of the LHC pp collision data at $ sqrts=7 $ and 8 TeV</title>
      <link>http://othrif.github.io/publication/khachatryan-2016-vau/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/khachatryan-2016-vau/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurements of top-quark pair differential cross-sections in the lepton&#43;jets channel in $pp$ collisions at $sqrts=8$ TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-mbv/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-mbv/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Muon reconstruction performance of the ATLAS detector in proton–proton collision data at $sqrts$ =13 TeV</title>
      <link>http://othrif.github.io/publication/aad-2016-jkr/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-jkr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Observation of Long-Range Elliptic Azimuthal Anisotropies in $sqrts=$13 and 2.76 TeV $pp$ Collisions with the ATLAS Detector</title>
      <link>http://othrif.github.io/publication/aad-2015-gqa/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-gqa/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Probing lepton flavour violation via neutrinoless $τłongrightarrow 3μ$  decays with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2016-wce/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-wce/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Reconstruction of hadronic decay products of tau leptons with the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aad-2015-unr/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-unr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for a high-mass Higgs boson decaying to a $W$ boson pair in $pp$ collisions at $sqrts = 8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-agg/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-agg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for anomalous couplings in the $Wtb$ vertex from the measurement of double differential angular decay rates of single top quarks produced in the $t$-channel with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-yem/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-yem/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for bottom squark pair production in proton–proton collisions at $sqrts=13$  TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-nwl/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-nwl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for charged Higgs bosons in the $H^± i̊ghtarrow tb$ decay channel in $pp$ collisions at $sqrts=8 $ TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-typ/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-typ/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for charged Higgs bosons produced in association with a top quark and decaying via $H^± i̊ghtarrow τν$ using $pp$ collision data recorded at $sqrts = 13$ TeV by the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-dig/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-dig/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for dark matter produced in association with a hadronically decaying vector boson in $pp$ collisions at $sqrts =$ 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-qgg/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-qgg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for dark matter produced in association with a Higgs boson decaying to two bottom quarks in $pp$ collisions at $sqrts = 8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-dva/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-dva/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for gluinos in events with an isolated lepton, jets and missing transverse momentum at $sqrts$ = 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2016-qqk/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-qqk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for heavy long-lived charged $R$-hadrons with the ATLAS detector in 3.2 fb$^-1$ of proton--proton collision data at $sqrts = 13$ TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2016-uth/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-uth/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for Higgs and $Z$ Boson Decays to $ϕ,γ$ with the ATLAS Detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-rug/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-rug/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for high-mass new phenomena in the dilepton final state using proton-proton collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-cth/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-cth/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for invisible decays of a Higgs boson using vector-boson fusion in $pp$ collisions at $sqrts=8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-txa/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-txa/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for magnetic monopoles and stable particles with high electric charges in 8 TeV $pp$ collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-kta/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-kta/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for metastable heavy charged particles with large ionization energy loss in pp collisions at $sqrts = 13$ TeV using the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aaboud-2016-dgf/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-dgf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for Minimal Supersymmetric Standard Model Higgs bosons $H/A$ and for a $Z^prime$ boson in the $τ τ$ final state produced in $pp$ collisions at $sqrts=13$ TeV with the ATLAS Detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-cre/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-cre/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for new phenomena in different-flavour high-mass dilepton final states in pp collisions at $sqrts=13$  Tev with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-hmk/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-hmk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for new phenomena in dijet mass and angular distributions from $pp$ collisions at $sqrts=$ 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/atlas-2015-nsi/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/atlas-2015-nsi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for new phenomena in events with a photon and missing transverse momentum in $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-uro/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-uro/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for new phenomena in events with at least three photons collected in $pp$ collisions at $sqrts$ = 8 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-bua/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-bua/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for new phenomena in final states with an energetic jet and large missing transverse momentum in $pp$ collisions at $sqrts=13$  TeV using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-tnv/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-tnv/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for new phenomena in final states with large jet multiplicities and missing transverse momentum with ATLAS using $sqrts =$ 13 TeV proton-proton collisions</title>
      <link>http://othrif.github.io/publication/aad-2016-jxj/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-jxj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for new phenomena with photon&#43;jet events in proton-proton collisions at $ sqrts=13 $ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-ywd/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-ywd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for new resonances in events with one lepton and missing transverse momentum in $pp$ collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-zkn/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-zkn/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for pair production of gluinos decaying via stop and sbottom in events with $b$-jets and large missing transverse momentum in $pp$ collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2016-eki/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-eki/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for pair production of Higgs bosons in the $bbarbbbarb$ final state using proton--proton collisions at $sqrts = 13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-xco/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-xco/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for resonances in diphoton events at $sqrts$=13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-tru/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-tru/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for resonances in the mass distribution of jet pairs with one or two jets identified as $b$-jets in proton--proton collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-nbq/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-nbq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for scalar leptoquarks in pp collisions at $sqrts$ = 13 TeV with the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aaboud-2016-qeg/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-qeg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for single production of a vector-like quark via a heavy gluon in the $4b$ final state with the ATLAS detector in $pp$ collisions at $sqrts = 8$ TeV</title>
      <link>http://othrif.github.io/publication/aad-2016-shx/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-shx/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for single production of vector-like quarks decaying into Wb in pp collisions at $sqrts = 8$  TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2016-qpo/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-qpo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for single top-quark production via flavour-changing neutral currents at 8 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-gea/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-gea/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for squarks and gluinos in events with hadronically decaying tau leptons, jets and missing transverse momentum in proton–proton collisions at $sqrts=13$  TeV recorded with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-zpr/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-zpr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for squarks and gluinos in final states with jets and missing transverse momentum at $sqrts =$ 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-zdn/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-zdn/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for strong gravity in multijet final states produced in pp collisions at $sqrts =$ 13 TeV using the ATLAS detector at the LHC</title>
      <link>http://othrif.github.io/publication/aad-2015-mzg/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-mzg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for supersymmetry at $sqrts=13$  TeV in final states with jets and two same-sign leptons or three leptons with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2016-tuk/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-tuk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for supersymmetry in a final state containing two photons and missing transverse momentum in $sqrts$ = 13 TeV $pp$ collisions at the LHC using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/atlas-collaboration-2016-wlb/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/atlas-collaboration-2016-wlb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for TeV-scale gravity signatures in high-mass final states with leptons and jets with the ATLAS detector at $sqrts=13$ TeV</title>
      <link>http://othrif.github.io/publication/aaboud-2016-ewt/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-ewt/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for the electroweak production of supersymmetric particles in $sqrts$=8 TeV $pp$ collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-eda/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-eda/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for the Higgs boson produced in association with a $W$ boson and decaying to four $b$-quarks via two spin-zero particles in $pp$ collisions at 13 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-oyb/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-oyb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for the production of single vector-like and excited quarks in the $Wt$ final state in $pp$ collisions at $sqrts$ = 8 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-voa/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-voa/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for the Standard Model Higgs boson decaying into $ bøverlineb $ produced in association with top quarks decaying hadronically in pp collisions at $ sqrts=8 $ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2016-zqi/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-zqi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for the Standard Model Higgs boson produced by vector-boson fusion and decaying to bottom quarks in $ sqrts=8 $ TeV pp collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-cns/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-cns/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for the Standard Model Higgs boson produced in association with a vector boson and decaying into a tau pair in $pp$ collisions at $sqrts = 8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-zrx/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-zrx/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for top squarks in final states with one isolated lepton, jets, and missing transverse momentum in $sqrts=13$ TeV $pp$ collisions with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-lwz/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-lwz/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Searches for heavy diboson resonances in $pp$ collisions at $sqrts=13$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-okv/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-okv/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Searches for scalar leptoquarks in pp collisions at $sqrts$ = 8 TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-caa/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-caa/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Study of hard double-parton scattering in four-jet events in pp collisions at $ sqrts=7 $ TeV with the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aaboud-2016-dea/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-dea/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Study of the rare decays of $B^0_s$ and $B^0$ into muon pairs from data collected during the LHC Run 1 with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aaboud-2016-ire/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aaboud-2016-ire/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Test of CP Invariance in vector-boson fusion production of the Higgs boson using the Optimal Observable method in the ditau decay channel with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2016-nal/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-nal/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The ATLAS Dataflow system in Run-2: Design and Performance</title>
      <link>http://othrif.github.io/publication/rifki-2016-ufa/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/rifki-2016-ufa/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The evolution of the region of interest builder for the ATLAS experiment at CERN</title>
      <link>http://othrif.github.io/publication/abbott-2016-yax/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/abbott-2016-yax/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The performance of the jet trigger for the ATLAS detector during 2011 data taking</title>
      <link>http://othrif.github.io/publication/atlas-2016-qun/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/atlas-2016-qun/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Transverse momentum, rapidity, and centrality dependence of inclusive charged-particle production in $sqrts_NN=5.02$ TeV $p$ &#43; Pb collisions measured by the ATLAS experiment</title>
      <link>http://othrif.github.io/publication/aad-2016-zif/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2016-zif/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Constraints on new phenomena via Higgs boson couplings and invisible decays with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-pla/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-pla/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of four-jet differential cross sections in $sqrts=8$ TeV proton-proton collisions using the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-nda/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-nda/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of the $ tøverlinetW $ and $ tøverlinetZ $ production cross sections in pp collisions at $ sqrts=8 $ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-eua/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-eua/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Measurement of transverse energy-energy correlations in multi-jet events in $pp$ collisions at $sqrts = 7$ TeV using the ATLAS detector and determination of the strong coupling constant $α_mathrms(m_Z)$</title>
      <link>http://othrif.github.io/publication/atlas-2015-yaa/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/atlas-2015-yaa/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for flavour-changing neutral current top quark decays $tto Hq$ in $pp$ collisions at $sqrts=8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-pja/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-pja/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for lepton-flavour-violating H → μτ decays of the Higgs boson with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-gha/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-gha/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search for pair production of a new heavy quark that decays into a $W$ boson and a light quark in $pp$ collisions at $sqrts = 8$ TeV with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-tba/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-tba/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Searches for Higgs boson pair production in the $hhto bbττ, γγ WW^*, γγ bb, bbbb$ channels with the ATLAS detector</title>
      <link>http://othrif.github.io/publication/aad-2015-xja/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-xja/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Summary of the ATLAS experiment’s sensitivity to supersymmetry after LHC Run 1 — interpreted in the phenomenological MSSM</title>
      <link>http://othrif.github.io/publication/aad-2015-baa/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/publication/aad-2015-baa/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://othrif.github.io/post/my-post/firstjupyter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/post/my-post/firstjupyter/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;First Jupyter notebook!&#39;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://othrif.github.io/technical_note/python/sklearn/wikipedia/preprocessing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://othrif.github.io/technical_note/python/sklearn/wikipedia/preprocessing/</guid>
      <description>&lt;p&gt;To preprocess &lt;code&gt;wikipedia-vectors.csv&lt;/code&gt; into the format in which you used it in the exercises, you have to take its transpose:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;import pandas as pd
from scipy.sparse import csr_matrix

df = pd.read_csv(&#39;wikipedia-vectors.csv&#39;, index_col=0)
articles = csr_matrix(df.transpose())
titles = list(df.columns)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The reason for taking this transpose is that without it, there would be 13,000 columns (corresponding to the 13,000 words in the file), which is a lot of columns for a CSV to have.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
